
module time.Time;

/******************************************************************************

    Эта структура представляет длину времени. Нижележащее представление состоит
    из единиц в 100 наносекунд. Это даёт временной интервал в +/- 10000 лет.

    В ней заметно отсутствуют представления недель, месяцев и лет.
    Поскольку недели, месяцы и годы отличаются согласно местным календарям.
    С этими понятиями имеет дело модуль time.chrono.*.

    Примечание: не следует менять эту структуру без серьёзного основания,
    так как она нужна как часть некоторых интерфейсов. Надо рассматривать её как
    встроеннный тип. Также заметьте, что здесь отсутствует конструктор opCall,
    так как он потенциально производит массу проблем. Если необходимо построить
    структуру ИнтервалВремени из значения тиков, используйте встроенную
    способность Ди создавать структуру с указанными значениями членов
    (смотрите описание функции тики() как пример выполнения этого).

    Пример:
    -------------------
    Время старт = Часы.сейчас;
    Нить.сон(0.150);
    Стдвыв.форматнс("проспал {} мс", (Часы.сейчас-старт).миллисек);
    -------------------

    See_Also: thread, time.Clock

******************************************************************************/

extern(D) struct ИнтервалВремени
{
	
    // Полезные константы. Не следует использовать в обычном коде,
    // используйте лучше статические члены ИнтервалВремени.  т.е. вместо
    // ИнтервалВремени.ТиковВСек используйте ИнтервалВремени.секунда.тики
    //
    enum : дол
    {
        /// Базовые значения тиков
        НаносекВТике  = 100,
        ТиковВМикросек = 1000 / НаносекВТике,
        ТиковВМиллисек = 1000 * ТиковВМикросек,
        ТиковВСек      = 1000 * ТиковВМиллисек,
        ТиковВМин      = 60 * ТиковВСек,
        ТиковВЧас        = 60 * ТиковВМин,
        ТиковВДень         = 24 * ТиковВЧас,

        // Счёт миллисекунд
        МиллисекВСек     = 1000,
        МиллисекВМин     = МиллисекВСек * 60,
        МиллисекВЧас       = МиллисекВМин * 60,
        МиллисекВДень        = МиллисекВЧас * 24,

        /// Счёт дней
        ДнейВГоду         = 365,
        ДнейНа4Года       = ДнейВГоду * 4 + 1,
        ДнейНа100Лет     = ДнейНа4Года * 25 - 1,
        ДнейНа400Лет     = ДнейНа100Лет * 4 + 1,

        // Счёт эпох
        Эпоха1601           = ДнейНа400Лет * 4 * ТиковВДень,
        Эпоха1970           = Эпоха1601 + ТиковВСек * 11644473600L,
    }

    const дво	МиллисекНаТик = 1.0 / ТиковВМиллисек;
    const дво    СекНаТик = 1.0 / ТиковВСек;
    const дво   МинутНаТик = 1.0 / ТиковВМин;


     /**
     * Минимальный ИнтервалВремени
     */
    static ИнтервалВремени мин();

    /**
     * Максимальный ИнтервалВремени
     */
    static ИнтервалВремени макс();

    /**
     * Нулевой ИнтервалВремени.  Используется для сравнений.
     */
    static ИнтервалВремени нуль();
	
		   /**
   * Инициализует новый экземпляр.
   * Параметры: тики = Период времени, выраженный в 100-наносекундных единицах.
   */
    static ИнтервалВремени opCall(дол тики);

    /**
    *  Инициализует новый экземпляр.
    */
    static ИнтервалВремени opCall(цел часы, цел минуты, цел секунды);

    /**
     *  Инициализует новый экземпляр.
     */
   static ИнтервалВремени opCall(цел дни, цел часы, цел минуты, цел секунды, цел миллисекунды = 0);
	
	/**
	* Установить тики.
	*/	
    ИнтервалВремени opAssign(дол тики);
	
    /**
     * Получить число тиков, прелставляющее данный промежуток времени. Может
     * использоваться для построения другого ИнтервалВремени:
     *
     * --------
     * дол тики = мойИнтервалВремени.тики;
     * ИнтервалВремени копияМоегоИнтервалВремени = ИнтервалВремени(тики);
     * --------
     */
    дол тики();

    /**
     * Определяет равенство двух значений ИнтервалВремени.
     */
     бул opEquals(ИнтервалВремени t);

    /**
     * Сравнивает объект this с другим значением ИнтервалВремени.
     */
    цел opCmp(ИнтервалВремени t);

    /**
     * Добавить ИнтервалВремени к this, вернув новый ИнтервалВремени.
     *
     * Параметры: t = Добавляемое значение ИнтервалВремени.
     * Возвращает: Значение ИнтервалВремени, являющееся суммой этого экземпляра и t.
     */
    ИнтервалВремени opAdd(ИнтервалВремени t);

    /**
     * Добавить указанный ИнтервалВремени к this ИнтервалВремени, присвоив результат
     * экземпляру this.
     *
     * Параметры: t = Добавляемое значение ИнтервалВремени.
     * Возвращает: копию экземпляра this после прибавки t.
     */
    ИнтервалВремени opAddAssign(ИнтервалВремени t);

    /**
     * Отнять указанный ИнтервалВремени от this ИнтервалВремени.
     *
     * Параметры: t = Вычитаемый ИнтервалВремени.
     * Возвращает: Новый промежуток времени, являющийся разностью между this
     * экземпляром и t.
     */
    ИнтервалВремени opSub(ИнтервалВремени t);

    /**
     *
     * Отнять указанный ИнтервалВремени от this ИнтервалВремени с присвоением.
     *
     * Параметры: t = Вычитаемый ИнтервалВремени.
     * Возвращает: Копия this экземпляра после вычитания t.
     */
    ИнтервалВремени opSubAssign(ИнтервалВремени t);

    /**
     * Масштабировать ИнтервалВремени на заданное количество. Не следует
     * использовать для преобразования в иные единицы. Вместо этого используются
     * аксессоры единиц. Используется только в механизме масштабирования. 
     * Например, если имеется таймаут и нужен сон, дважды превышающий
     * таймаут, то используется таймаут * 2.
     *
     * Параметры: знач = Множитель, используемый для масштабирования этого интервала времени.
     * Возвращает: Новый ИнтервалВремени, масштабированный на знач.
     */
    ИнтервалВремени opMul(дол знач);

    /**
     * Масштабирует this ИнтервалВремени и присваивает результат this экземпляру.
     *
     * Параметры: знач = Множитель, используемый для масштабирования.
     * Возвращает: Копия this экземпляра после масштабирования.
     */
    ИнтервалВремени opMulAssign(дол знач);

    /**
     * Разделить этот ИнтервалВремени на указанное количество. Не следует
     * использовать для преобразования в иные единицы. Вместо этого используются
     * аксессоры единиц. Используется только в механизме масштабирования. 
     * Например,  если имеется таймаут и требуется сон в половину этого
     * таймаута, нужно использовать таймаут / 2.
     *
     *
     * Параметры: знач = Делитель, используемый для масштабирования этого вринтервала.
     * Возвращает: Новый ИнтервалВремени, поделенный на знач
     */
    ИнтервалВремени opDiv(дол знач);

    /**
     * Делит этот ИнтервалВремени и присваивает результат этому экземпляру.
     *
     * Параметры: знач = Множитель, используемый для деления.
     * Возвращает: Копию этого экземпляра после деления.
     */
    ИнтервалВремени opDivAssign(дол знач);

    /**
     * Выполняет целое деление с данным интервалом времени.
     *
     * Параметры: t = Делитель, используемый для деления
     * Возвращает: Результат целого деления между этим экземпляром и
     * t.
     */
    дол opDiv(ИнтервалВремени t);

    /**
     * Делает отрицательным интервал времени.
     *
     * Возвращает: Отрицательный эквивалени этого интервала времени
     */
    ИнтервалВремени opNeg();

    /**
     * Преобразует в наносекунды.
     *
     * Примечание: может происходить потеря данных, так как наносекунды не
     * могут представлять диапазон данных, который представляет ИнтервалВремени.
     *
     * Возвращает: Число наносекунд, которое представляет данный ИнтервалВремени.
     */
    дол наносек();

    /**
     * Преобразует в микросекунды.
     *
     * Возвращает: Число микросекунд, которое представляет данный ИнтервалВремени.
     */
    дол микросек();

    /**
     * Преобразует в миллисекунды.
     *
     * Возвращает: Число миллисек, которое представляет данный ИнтервалВремени.
     */
    дол миллисек();

    /**
     * Преобразует в секунды.
     *
     * Возвращает: Число сек, которое представляет данный ИнтервалВремени.
     */
     дол сек();

    /**
     * Преобразует в минуты.
     *
     * Возвращает: Число минут, которое представляет данный ИнтервалВремени.
     */
    дол минуты();

    /**
     * Преобразует в часы.
     *
     * Возвращает: Число часов, которое представляет данный ИнтервалВремени.
     */
    дол часы();

    /**
     * Преобразует в дни.
     *
     * Возвращает: Число дней, которое представляет данный ИнтервалВремени.
     */
    дол дни();

    /**
     * Преобразует в интервал плавающей точкой, представляющий сек.
     *
     * Примечание: Может вызывать потерю точности, так как дво не может точно
     * представлять некоторые дробные значения.
     *
     * Возвращает: Интервал, представляющий эту секунду и её дробную
     * часть, которые представляют данный ИнтервалВремени.
     */
    дво интервал();

    /**
     * Преобразует в ВремяДня.
     *
     * Возвращает: ВремяДня, представленное этим ИнтервалВремени.
     */
    ВремяДня время();

    /**
     * Конструирует ИнтервалВремени из заданного числа наносекунд.
     *
     * Примечание: Может приводить к потере данных, поскольку разрешение ИнтервалВремени
     * представлено в 100-наносекундных инкрементах.
     *
     * Параметры: значение = Число наносекунд.
     * Возвращает: ИнтервалВремени, представляющий данное число наносекунд.
     */
    static ИнтервалВремени изНаносек(дол значение);

    /**
     * Конструирует ИнтервалВремени из заданного числа микросекунд.
     *
     * Параметры: значение = Число микросекунд.
     * Возвращает: ИнтервалВремени, представляющий данное число микросекунд.
     */
    static ИнтервалВремени изМикросек(дол значение);

    /**
     * Конструирует ИнтервалВремени из заданного числа миллисекунд.
     *
     * Параметры: значение = Число миллисекунд.
     * Возвращает: ИнтервалВремени, представляющий данное число миллисекунд.
     */
    static ИнтервалВремени изМиллисек(дол значение);

    /**
     * Конструирует ИнтервалВремени из заданного числа сек.
     *
     * Параметры: значение = Число сек.
     * Возвращает: ИнтервалВремени, представляющий данное число сек.
     */
    static ИнтервалВремени изСек(дол значение);

    /**
     * Конструирует ИнтервалВремени из заданного числа минут.
     *
     * Параметры: значение = Число минуты.
     * Возвращает: ИнтервалВремени, представляющий данное число минуты.
     */
   static ИнтервалВремени изМин(дол значение);

    /**
     * Конструирует ИнтервалВремени из заданного числа часов.
     *
     * Параметры: значение = Число часов.
     * Возвращает: ИнтервалВремени, представляющий данное число часов.
     */
    static ИнтервалВремени изЧасов(дол значение);

    /**
     * Конструирует ИнтервалВремени из указанного число дней.
     *
     * Параметры: значение = Число дней.
     * Возвращает: ИнтервалВремени, представляющий данное число дней.
     */
    static ИнтервалВремени изДней(дол значение);

    /**
     * Конструирует ИнтервалВремени из указанного интервала.  Этот иинтервал
     * представляет сек как дво.  Это позволяет передавать целую и
     * дробную части сек.
     *
     * Параметры: значение = Интервал, передаваемый в сек.
     * Возвращает: ИнтервалВремени, представляющий данный интервал.
     */
    static ИнтервалВремени изИнтервала(дво сек);

    дво всегоМиллисек();
    дво всегоСек();
    дво всегоМин();
    /**
     * Сравнивает два значения ИнтервалВремени и возвращает целое, показывающее, короче ли первое,
	 * равно или длинее второго.
     * Возвращает: -1, если t1 короче, чем t2; 0, если t1 равно t2; 1, если t1 длинее, чем t2.
     */
    static цел сравни(ИнтервалВремени t1, ИнтервалВремени t2);

    /**
     * Сравнивает этот экземпляр с заданным ИнтервалВремени и возвращает целое, показывающее, короче ли первое,
	 * равно или длинее второго.
     * Возвращает: -1, если t1 короче, чем t2; 0, если t1 равно t2; 1, если t1 длинее, чем t2.
     */
    цел сравниС(ИнтервалВремени другой);

    /**
     * Возвращает значение, указывающее на то, равны ли два экземпляра.
     * Параметры:
     *   t1 = Первый ИнтервалВремени.
     *   t2 = Второй ИнтервалВремени.
     * Возвращает: да, если значения t1 и t2 равны; иначе нет.
     */
    static бул равны(ИнтервалВремени t1, ИнтервалВремени t2);

    /**
     * Возвращает значение, показывающее, равно ли значение экземпляра this другому экземпляру.
     * Параметры: другой = ИнтервалВремени, сравниваемый с этим экземпляром.
     * Возвращает: да, если другой rпредставляет такой же интервал времени, что и этот; иначе, нет.
     */
    бул равен(ИнтервалВремени другой);

    бцел вХэш();

    /// Возвращает текстовое представление значения экземпляра this.
    ткст вТкст();    

    /// Прибавляет заданный ИнтервалВремени к этому экземпляру.
    ИнтервалВремени прибавь(ИнтервалВремени ts);

/// описано ранее
    void opAddAssign(ИнтервалВремени ts);

    /// Отнимает заданный ИнтервалВремени от этого экземпляра.
    ИнтервалВремени отними(ИнтервалВремени ts);

    /// описано ранее
    void opSubAssign(ИнтервалВремени ts);

    /// Возвращает ИнтервалВремени,значение которого является отрицательным значением данного экземпляра.
    ИнтервалВремени дайНегатив();

    ИнтервалВремени opPos();

}


/******************************************************************************

        Представляет точку во времени.

        Примечания: Время представляет даты и время между 12:00:00
        полуночи на 1 Января, 10000 до н.э. и 11:59:59 PM на 31 Декабря,
        9999 н.э.

        Значения Время измеряются в 100-наносекундных интервалах, тлт тиках.
        Значение даты - это число тиков, прошедшее с 12:00:00 полуночи
		на 1 Января, 0001 до н.э.  по Грегорианскому календарю.

        Отрицательные значения времени  = это смещения от точки сноски,
        но обратно по истории. Значения времени не специфицны ни для каких
        календарей, но, например, начиная с 31 Декабря, 1 до н.э.
        по Грегорианскому календарю получается, что
		Время = Время.эпоха - ИнтервалВремени.дни(1).

******************************************************************************/

extern(D) struct Время
{
    /// Представляет эпоху 1/1/1601 (Широко используется на системах Windows)
    static Время эпоха1601();

    /// Представляет эпоха of 1/1/1970 (Широко используется на системах Unix)
    static Время эпоха1970();

	/// Представляет наименьшее и наибольшее значение Времени.
    static Время мин();	 
    static Время макс();

    /// Представляет эпоху (1/1/0001)
    static Время эпоха();
	
	static Время opCall(бдол тики);	
    /**********************************************************************

            $(I Property.) Выдаёт число тиков для этого Время.
            Это значение может использоваться для построения другой структуры Время,
            путём написания:

            ---------
            дол тики = моёВремя.тики;
            Время копияМоегоВремени = Время(тики);
            ---------


            Возвращает: A дол represented by the время of this
                     экземпляр.

    **********************************************************************/

    дол тики();

    /**********************************************************************

            Определяет, равны ли два значения Время.

            Параметры:  значение = Значение Время.
            Возвращает: да, если экземпляры равны; иначе, нет.

    **********************************************************************/

    цел opEquals(Время t);

    /**********************************************************************

            Сравнивает два значения Время.

    **********************************************************************/

    цел opCmp(Время t);

    /**********************************************************************

            добавьs the specified время вринтервал в_ the время, returning a new
            время.

            Параметры:  t = A ИнтервалВремени значение.
            Возвращает: A Время that is the sum of this экземпляр и t.

    **********************************************************************/

    Время opAdd(ИнтервалВремени t);

    /**********************************************************************

            добавьs the specified время вринтервал в_ the время, assigning
            the результат в_ this экземпляр.

            Параметры:  t = A ИнтервалВремени значение.
            Возвращает: The текущ Время экземпляр, with t добавьed в_ the
                     время.

    **********************************************************************/

    Время opAddAssign(ИнтервалВремени t);

    /**********************************************************************

            Subtracts the specified время вринтервал из_ the время,
            returning a new время.

            Параметры:  t = A ИнтервалВремени значение.
            Возвращает: A Время whose значение is the значение of this экземпляр
                     minus the значение of t.

    **********************************************************************/

     Время opSub(ИнтервалВремени t);

    /**********************************************************************

            Возвращает время вринтервал which represents the difference во времени
            between this и the given Время.

            Параметры:  t = Значение Времени.
            Возвращает: A ИнтервалВремени which represents the difference between
                     this и t.

    **********************************************************************/

    ИнтервалВремени opSub(Время t);

    /**********************************************************************

            Subtracts the specified время вринтервал из_ the время,
            assigning the результат в_ this экземпляр.

            Параметры:  t = A ИнтервалВремени значение.
            Возвращает: The текущ Время экземпляр, with t subtracted
                     из_ the время.

    **********************************************************************/

    Время opSubAssign(ИнтервалВремени t);

    /**********************************************************************

            $(I Property.) Retrieves the дата component.

            Возвращает: A new Время экземпляр with the same дата as
                     this экземпляр, but with the время truncated.

    **********************************************************************/

    Время дата();

    /**********************************************************************

            $(I Property.) Retrieves the время of день.

            Возвращает: A ВремяДня representing the дво of the день
                     elapsed since mопрnight.

    **********************************************************************/

    ВремяДня время();

    /**********************************************************************

            $(I Property.) Retrieves the equivalent ИнтервалВремени.

            Возвращает: A ИнтервалВремени representing this Время.

    **********************************************************************/

    ИнтервалВремени вринтервал();

    /**********************************************************************

            $(I Property.) Retrieves a ИнтервалВремени that corresponds в_ Unix
            время (время since 1/1/1970).  Use the ИнтервалВремени accessors в_ получи
            the время in сек, milliseconds, etc.

            Возвращает: A ИнтервалВремени representing this Время as Unix время.

            -------------------------------------
            auto unixTime = Часы.сейчас.юникс.сек;
            auto javaTime = Часы.сейчас.юникс.миллисек;
            -------------------------------------

    **********************************************************************/

    ИнтервалВремени юникс();
}


/******************************************************************************

        Represents a время of день. This is different из_ ИнтервалВремени in that
        each component is represented внутри the limits of everyday время,
        rather than из_ the старт of the Эпоха. Effectively, the ВремяДня
        эпоха is the первый секунда of each день.

        This is handy for dealing strictly with a 24-час clock instead of
        potentially thousands of годы. For example:
        ---
        auto время = Часы.сейчас.время;
        assert (время.миллисек < 1000);
        assert (время.сек < 60);
        assert (время.минуты < 60);
        assert (время.часы < 24);
        ---

        You can создай a ВремяДня из_ an existing Время or ИнтервалВремени экземпляр
        via the respective время() метод. To преобразуй задний в_ a ИнтервалВремени, use
        the вринтервал() метод

******************************************************************************/

extern(D) struct ВремяДня
{
    /**
     * Часовая компонента времени дня.  Должно быть между 0 и
     * 23, включительно.
     */
    public бцел часы (бцел ч = бцел.init);

    /**
     * Минутная компонента времени дня.  Должно быть между 0 и
     * 59, включительно.
     */
    public бцел минуты(бцел м = бцел.init);

    /**
     * Секундная компонента времени дня.  Должно быть между 0 и
     * 59, включительно.
     */
    public бцел сек(бцел с = бцел.init);

    /**
     * Миллисекундная компонента времени дня.  Должно быть между
     * 0 и 999, включительно.
     */
	 
	  public бцел миллисек(бцел мс = бцел.init);

    /**
     * constructor.
     * Параметры: часы = число of часы since mопрnight
     *         минуты = число of минуты преобр_в the час
     *         сек = число of сек преобр_в the минута
     *         миллисек = число of milliseconds преобр_в the секунда
     *
     * Возвращает: a ВремяДня representing the given время fields.
     *
     * Note: There is no verification of the range of значения, or
     * normalization made.  So if you пароль in larger значения than the
     * максимум значение for that field, they will be stored as that значение.
     *
     * example:
     * --------------
     * auto врдня = ВремяДня(100, 100, 100, 10000);
     * assert(врдня.часы == 100);
     * assert(врдня.минуты == 100);
     * assert(врдня.сек == 100);
     * assert(врдня.миллисек == 10000);
     * --------------
     */
   static ВремяДня opCall (бцел часы, бцел минуты, бцел сек, бцел миллисек=0);

    /**
     * constructor.
     * Параметры: тики = тики representing a Значение Времени.  This is normalized
     * so that it represent a время of день (modulo-24 etc)
     *
     * Возвращает: a ВремяДня значение that corresponds в_ the время of день of
     * the given число of тики.
     */
  static ВремяДня opCall(дол тики);

    /**
     * construct a ИнтервалВремени из_ the текущ fields
     *
     * Возвращает: a ВремяДня representing the field значения.
     *
     * Note: that fields are not проверьed against a действителен range, so
     * настройка 60 for минуты is allowed, и will just добавь 1 в_ the час
     * component, и установи the минута component в_ 0.  The результат is
     * normalized, so the часы wrap.  If you пароль in 25 часы, the
     * результатing ВремяДня will have a час component of 1.
     */
   ИнтервалВремени вринтервал();

    /**
     * internal routine в_ исправь тики by one день. Also adjusts for
     * offsets in the BC эра
     */
   static ИнтервалВремени модуль24 (дол тики);
}

/******************************************************************************

    Генерное представление Даты

******************************************************************************/

struct Дата
{
    public бцел         эра,            /// AD, BC
           день,            /// 1 .. 31
           год,           /// 0 в_ 9999
           месяц,          /// 1 .. 12
           деньнед,            /// 0 .. 6
           деньгода;            /// 1 .. 366
}


/******************************************************************************

    Комбинация из Дата и ВремяДня

******************************************************************************/

struct ДатаВремя
{
    public Дата         дата;       /// дата представление
    public ВремяДня    время;       /// время представление
}