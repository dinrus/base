/*******************************************************************************

        ФПуть предоставляет средства для эффективного редактирования компонентов пути
        и доступа к низлежащей файловой системе.

        Используйте модуль Path.d вместо этого, если нужен доступ к файловой системе,
        а не к изменению компонентов самого пути.

*******************************************************************************/

module io.FilePath;

private import  io.Path;
private import  io.model: ФайлКонст, ИнфОФайле;

/*******************************************************************************

        Моделирует файловый путь. Ожидается его использование как конструктивного
        аргумента для разных классов файлов. Предполагается их лёгкое преобразование
        в другие представления, например, в абсолютное, каноническое или Url.

        Фйловые пути, не содержащие символов ansi, должны кодироваться в UTF-8.
        Supporting Unicode in this manner was deemed в_ be ещё suitable
        than provопрing a шим version of ФПуть, and is Всё consistent
        & compatible with the approach taken with the Уир class.

        ФПуть is designed в_ be transformed, thus each mutating метод
        modifies the internal контент. See module Путь.d for a lightweight
        immutable variation.

        Note that образцы of adjacent '.' разделители are treated specially
        in that they will be assigned в_ the имя where there is no distinct
        суффикс. In добавьition, a '.' at the старт of a имя signifies it does
        not belong в_ the суффикс т.е. ".файл" is a имя rather than a суффикс.
        Образцы of intermediate '.' characters will иначе be assigned
        в_ the суффикс, such that "файл....суффикс" включает the dots within
        the суффикс itself. See метод расш() for a суффикс without dots.

        Note that Win32 '\' characters are преобразованый в_ '/' by default via
        the ФПуть constructor.

*******************************************************************************/


extern(D)
class ФПуть : ПросмотрПути
{

    public alias    добавь  opCatAssign;    // путь ~= x;


    /***********************************************************************

            Фильтр used for screening пути via вСписок()

    ***********************************************************************/

    public alias бул delegate (ФПуть, бул) Фильтр;

    /***********************************************************************

            Вызов-site shortcut в_ создай a ФПуть экземпляр. This
            enables the same syntax as struct usage, so may expose
            a migration путь

    ***********************************************************************/

    static ФПуть opCall (ткст фпуть = пусто);

    /***********************************************************************

            Create a ФПуть из_ a копируй of the предоставленный ткст.

            ФПуть assumes Всё путь & имя are present, and therefore
            may разбей what is иначе a logically valid путь. That is,
            the 'имя' of a файл is typically the путь segment following
            a правейший путь-разделитель. The intent is в_ treat файлы and
            directories in the same manner; как имя with an optional
            ancestral structure. It is possible в_ bias the interpretation
            by добавим a trailing путь-разделитель в_ the аргумент. Doing so
            will результат in an пустой имя атрибут.

            With regard в_ the фпуть копируй, we найдено the common case в_
            be an explicit .dup, whereas aliasing appeared в_ be rare by
            сравнение. We also noted a large proportion interacting with
            C-oriented OS calls, implying the postfix of a пусто terminator.
            Thus, ФПуть combines Всё как single operation.

            Note that Win32 '\' characters are normalized в_ '/' instead.

    ***********************************************************************/

    this (ткст фпуть = пусто);

    /***********************************************************************

            Возвращает complete текст of this фпуть

    ***********************************************************************/

    final ткст вТкст ();

    /***********************************************************************

            Duplicate this путь

    ***********************************************************************/

    final ФПуть dup ();

    /***********************************************************************

            Возвращает complete текст of this фпуть как пусто
            terminated ткст для использования с a C api. Use вТкст
            instead for any D api.

            Note that the nul is всегда embedded within the ткст
            maintained by ФПуть, so there's no куча overhead when
            making a C вызов

    ***********************************************************************/

    final ткст сиТкст ();

    /***********************************************************************

            Возвращает корень of this путь. Roots are constructs such as
            "c:"

    ***********************************************************************/

    final ткст корень ();

    /***********************************************************************

            Возвращает файл путь. Paths may старт and конец with a "/".
            The корень путь is "/" and an unspecified путь is returned as
            an пустой ткст. Directory пути may be разбей such that the
            дир имя is placed преобр_в the 'имя' member; дир
            пути are treated no differently than файл пути

    ***********************************************************************/

    final ткст папка ();

    /***********************************************************************

            Возвращает путь representing the родитель of this one. This
            will typically return the current путь component, though
            with a special case where the имя component is пустой. In
            such cases, the путь is scanned for a prior segment:
            ---
            нормаль:  /x/y/z => /x/y
            special: /x/y/  => /x
            ---

            Note that this returns a путь suitable for splitting преобр_в
            путь and имя components (there's no trailing разделитель).

            See вынь() also, which is generally ещё useful when working
            with ФПуть instances

    ***********************************************************************/

    final ткст родитель ();

    /***********************************************************************

            Возвращает имя of this файл, либо дир.

    ***********************************************************************/

    final ткст имя ();

    /***********************************************************************

            Ext is the хвост of the имяф, rightward of the правейший
            '.' разделитель e.g. путь "foo.bar" есть расш "bar". Note that
            образцы of adjacent разделители are treated specially; for
            example, ".." will wind up with no расш at все

    ***********************************************************************/

    final ткст расш ();

    /***********************************************************************

            Suffix is like расш, but включает the разделитель e.g. путь
            "foo.bar" есть суффикс ".bar"

    ***********************************************************************/

    final ткст суффикс ();

    /***********************************************************************

            return the корень + папка combination

    ***********************************************************************/

    final ткст путь ();

    /***********************************************************************

            return the имя + суффикс combination

    ***********************************************************************/

    final ткст файл ();

    /***********************************************************************

            Возвращает да, если все fields are опрentical. Note that some
            combinations of operations may not произведи an опрentical
            установи of fields. For example:
            ---
            ФПуть("/foo").добавь("bar").вынь == "/foo";
            ФПуть("/foo/").добавь("bar").вынь != "/foo/";
            ---

            The latter is different due в_ variance in как добавь
            injects данные, and как вынь is ожидалось в_ operate under
            different circumstances (Всё examples произведи the same
            вынь результат, although the начальное путь is not опрentical).

            However, opEquals() can overlook minor distinctions such
            as this example, and will return a match.

    ***********************************************************************/

    final override цел opEquals (Объект o);

    /***********************************************************************

            Does this ФПуть match the given текст? Note that some
            combinations of operations may not произведи an опрentical
            установи of fields. For example:
            ---
            ФПуть("/foo").добавь("bar").вынь == "/foo";
            ФПуть("/foo/").добавь("bar").вынь != "/foo/";
            ---

            The latter Is Different due в_ variance in как добавь
            injects данные, and как вынь is ожидалось в_ operate under
            different circumstances (Всё examples произведи the same
            вынь результат, although the начальное путь is not опрentical).

            However, opEquals() can overlook minor distinctions such
            as this example, and will return a match.

    ***********************************************************************/

    final цел opEquals (ткст s);

    /***********************************************************************

            Возвращает да, если this ФПуть is *not* relative в_ the
            current working дир

    ***********************************************************************/

    final бул абс_ли ();

    /***********************************************************************

            Возвращает да, если this ФПуть is пустой

    ***********************************************************************/

    final бул пуст_ли ();

    /***********************************************************************

            Возвращает да, если this ФПуть есть a родитель. Note that a
            родитель is defined by the presence of a путь-разделитель in
            the путь. This means 'foo' within "\foo" is consопрered a
            ветвь of the корень

    ***********************************************************************/

    final бул ветвь_ли ();

    /***********************************************************************

            Замени все 'из_' instances with 'в_'

    ***********************************************************************/

    final ФПуть замени (сим из_, сим на_);

    /***********************************************************************

            Convert путь разделители в_ a стандарт форматируй, using '/' as
            the путь разделитель. This is compatible with URI and все of
            the contemporary O/S which Dinrus supports. Known exceptions
            include the Windows команда-строка процессор, which consопрers
            '/' characters в_ be switches instead. Use the исконный()
            метод в_ support that.

            Note: mutates the current путь.

    ***********************************************************************/

    final ФПуть стандарт ();

    /***********************************************************************

            Convert в_ исконный O/S путь разделители where that is required,
            such as when dealing with the Windows команда-строка.

            Note: mutates the current путь. Use this образец в_ obtain a
            копируй instead: путь.dup.исконный

    ***********************************************************************/

    final ФПуть исконный ();

    /***********************************************************************

            Concatenate текст в_ this путь; no разделители are добавьed.
            See объедини() also

    ***********************************************************************/

    final ФПуть склей (ткст[] другие...);

    /***********************************************************************

            Append a папка в_ this путь. A leading разделитель is добавьed
            as required

    ***********************************************************************/

    final ФПуть добавь (ткст путь);

    /***********************************************************************

            Prepend a папка в_ this путь. A trailing разделитель is добавьed
            if needed

    ***********************************************************************/

    final ФПуть приставь (ткст путь);

    /***********************************************************************

            Reset the контент of this путь в_ that of другой and
            reparse

    ***********************************************************************/

    ФПуть установи (ФПуть путь);

    /***********************************************************************

            Reset the контент of this путь, and reparse. There's an
            optional булево flag в_ преобразуй the путь преобр_в стандарт
            form, перед parsing (converting '\' преобр_в '/')

    ***********************************************************************/

    final ФПуть установи (ткст путь, бул преобразуй = нет);

    /***********************************************************************

            Sопрestep the нормаль отыщи for пути that are known в_
            be папки. Where папка is да, файл-system lookups
            will be skИПped.

    ***********************************************************************/

    final ФПуть папка_ли (бул папка);

    /***********************************************************************

            Замени the корень portion of this путь

    ***********************************************************************/

    final ФПуть корень (ткст другой);

    /***********************************************************************

            Замени the папка portion of this путь. The папка will be
            псеп_в_конце with a путь-разделитель as required

    ***********************************************************************/

    final ФПуть папка (ткст другой);

    /***********************************************************************

            Замени the имя portion of this путь

    ***********************************************************************/

    final ФПуть имя (ткст другой);

    /***********************************************************************

            Замени the суффикс portion of this путь. The суффикс will be
            псеп_в_начале with a файл-разделитель as required

    ***********************************************************************/

    final ФПуть суффикс (ткст другой);

    /***********************************************************************

            Замени the корень and папка portions of this путь and
            reparse. The replacement will be псеп_в_конце with a путь
            разделитель as required

    ***********************************************************************/

    final ФПуть путь (ткст другой);

    /***********************************************************************

            Замени the файл and суффикс portions of this путь and
            reparse. The replacement will be псеп_в_начале with a суффикс
            разделитель as required

    ***********************************************************************/

    final ФПуть файл (ткст другой);

    /***********************************************************************

            Pop в_ the родитель of the current фпуть (in situ - mutates
            this ФПуть). Note that this differs из_ родитель() in that
            it does not include any special cases

    ***********************************************************************/

    final ФПуть вынь ();

    /***********************************************************************

            Join набор of путь specs together. A путь разделитель is
            potentially inserted between each of the segments.

    ***********************************************************************/

    static ткст объедини (ткст[] пути...);

    /***********************************************************************

            Convert this ФПуть в_ абсолютный форматируй, using the given
            префикс as necessary. If this ФПуть is already абсолютный,
            return it intact.

            Возвращает this ФПуть, adjusted as necessary

    ***********************************************************************/

    final ФПуть абсолютный (ткст префикс);

    /***********************************************************************

            Return an adjusted путь such that non-пустой instances do not
            have a trailing разделитель

    ***********************************************************************/

    static ткст очищенный (ткст путь, сим c = ФайлКонст.СимПутьРазд);

    /***********************************************************************

            Return an adjusted путь such that non-пустой instances всегда
            have a trailing разделитель

    ***********************************************************************/

    static ткст псеп_в_конце (ткст путь, сим c = ФайлКонст.СимПутьРазд);

    /***********************************************************************

            Return an adjusted путь such that non-пустой instances всегда
            have a псеп_в_начале разделитель

    ***********************************************************************/

    static ткст псеп_в_начале (ткст s, сим c = ФайлКонст.СимПутьРазд);

    /***********************************************************************

            Parse the путь spec, and mutate '\' преобр_в '/' as necessary

    ***********************************************************************/

    private final ФПуть разбор ();

    /***********************************************************************

            Potentially сделай room for ещё контент

    ***********************************************************************/

    private final проц расширь (бцел размер);

    /***********************************************************************

            Insert/delete internal контент

    ***********************************************************************/

   // private final цел исправь (цел голова, цел хвост, цел длин, ткст sub);


    /**********************************************************************/
    /********************** файл-system methods ***************************/
    /**********************************************************************/


    /***********************************************************************

            Create an entire путь consisting of this папка along with
            все родитель папки. The путь must not contain '.' or '..'
            segments. Related methods include PathUtil.нормализуй() and
            абсолютный()

            Note that each segment is создан как папка, включая the
            trailing segment.

            Возвращает: a chaining reference (this)

            Выводит исключение: ВВИскл upon systen ошибки

            Выводит исключение: ИсклНелегальногоАргумента if a segment есть_ли but as
            a файл instead of a папка

    ***********************************************************************/

    final ФПуть создай ();

    /***********************************************************************

            List the установи of filenames within this папка, using
            the предоставленный фильтр в_ control the список:
            ---
            бул delegate (ФПуть путь, бул папка_ли) Фильтр
            ---

            Returning да из_ the фильтр включает the given путь,
            whilst returning нет excludes it. Parameter 'папка_ли'
            indicates whether the путь is a файл or папка.

            Note that пути composed of '.' characters are ignored.

    ***********************************************************************/

    final ФПуть[] вСписок (Фильтр фильтр = пусто);

    /***********************************************************************

            Construct a ФПуть из_ the given ИнфОФайле

    ***********************************************************************/

    static ФПуть из_ (ref ИнфОФайле инфо);

    /***********************************************************************

            Does this путь currently есть_ли?

    ***********************************************************************/

    final бул есть_ли ();

    /***********************************************************************

            Возвращает the время of the последний modification. Accurate
            в_ whatever the OS supports, and in a форматируй dictated
            by the файл-system. For example NTFS keeps UTC время,
            while FAT timestamps are based on the local время.

    ***********************************************************************/

    final Время изменён ();

    /***********************************************************************

            Возвращает the время of the последний access. Accurate в_
            whatever the OS supports, and in a форматируй dictated
            by the файл-system. For example NTFS keeps UTC время,
            while FAT timestamps are based on the local время.

    ***********************************************************************/

    final Время использовался ();

    /***********************************************************************

            Возвращает the время of файл creation. Accurate в_
            whatever the OS supports, and in a форматируй dictated
            by the файл-system. For example NTFS keeps UTC время,
            while FAT timestamps are based on the local время.

    ***********************************************************************/

    final Время создан ();

    /***********************************************************************

            change the имя or location of a файл/дир, and
            adopt the предоставленный Путь

    ***********************************************************************/

    final ФПуть переименуй (ФПуть приёмн);

    /***********************************************************************

            Transfer the контент of другой файл в_ this one. Возвращает
            reference в_ this class on success, либо throws an ВВИскл
            upon failure.

    ***********************************************************************/

    final ФПуть копируй (ткст исток);

    /***********************************************************************

            Возвращает файл length (in байты)

    ***********************************************************************/

    final бдол размерФайла ();

    /***********************************************************************

            Is this файл записываемый?

    ***********************************************************************/

    final бул записываем_ли ();

    /***********************************************************************

            Is this файл actually a папка/дир?

    ***********************************************************************/

    final бул папка_ли ();

    /***********************************************************************

            Is this a regular файл?

    ***********************************************************************/

    final бул файл_ли ();

    /***********************************************************************

            Return timestamp information

            Timstamps are returns in a форматируй dictated by the
            файл-system. For example NTFS keeps UTC время,
            while FAT timestamps are based on the local время

    ***********************************************************************/

    final Штампы штампыВремени ();

    /***********************************************************************

            Transfer the контент of другой файл в_ this one. Возвращает
            reference в_ this class on success, либо throws an ВВИскл
            upon failure.

    ***********************************************************************/

    final ФПуть копируй (ФПуть ист);

    /***********************************************************************

            Удали the файл/дир из_ the файл-system

    ***********************************************************************/

    final ФПуть удали ();

    /***********************************************************************

           change the имя or location of a файл/дир, and
           adopt the предоставленный Путь

    ***********************************************************************/

    final ФПуть переименуй (ткст приёмн);

    /***********************************************************************

            Create a new файл

    ***********************************************************************/

    final ФПуть создайФайл ();

    /***********************************************************************

            Create a new дир

    ***********************************************************************/

    final ФПуть создайПапку ();

    /***********************************************************************

            List the установи of filenames within this папка.

            Each путь and имяф is passed в_ the предоставленный
            delegate, along with the путь префикс and whether
            the Запись is a папка or not.

            Возвращает the число of файлы scanned.

    ***********************************************************************/

    final цел opApply (цел delegate(ref ИнфОФайле) дг);
}



/*******************************************************************************

*******************************************************************************/

interface ПросмотрПути
{
    alias ФС.Штампы         Штампы;
    //alias ФС.ИнфОФайле       ИнфОФайле;

    /***********************************************************************

            Возвращает complete текст of this фпуть

    ***********************************************************************/

     ткст вТкст ();

    /***********************************************************************

            Возвращает complete текст of this фпуть

    ***********************************************************************/

     ткст сиТкст ();

    /***********************************************************************

            Возвращает корень of this путь. Roots are constructs such as
            "c:"

    ***********************************************************************/

     ткст корень ();

    /***********************************************************************

            Возвращает файл путь. Paths may старт and конец with a "/".
            The корень путь is "/" and an unspecified путь is returned as
            an пустой ткст. Directory пути may be разбей such that the
            дир имя is placed преобр_в the 'имя' member; дир
            пути are treated no differently than файл пути

    ***********************************************************************/

     ткст папка ();

    /***********************************************************************

            Возвращает имя of this файл, либо дир, excluding a
            суффикс.

    ***********************************************************************/

     ткст имя ();

    /***********************************************************************

            Ext is the хвост of the имяф, rightward of the правейший
            '.' разделитель e.g. путь "foo.bar" есть расш "bar". Note that
            образцы of adjacent разделители are treated specially; for
            example, ".." will wind up with no расш at все

    ***********************************************************************/

     ткст расш ();

    /***********************************************************************

            Suffix is like расш, but включает the разделитель e.g. путь
            "foo.bar" есть суффикс ".bar"

    ***********************************************************************/

     ткст суффикс ();

    /***********************************************************************

            return the корень + папка combination

    ***********************************************************************/

     ткст путь ();

    /***********************************************************************

            return the имя + суффикс combination

    ***********************************************************************/

     ткст файл ();

    /***********************************************************************

            Возвращает да, если this ФПуть is *not* relative в_ the
            current working дир.

    ***********************************************************************/

     бул абс_ли ();

    /***********************************************************************

            Возвращает да, если this ФПуть is пустой

    ***********************************************************************/

     бул пуст_ли ();

    /***********************************************************************

            Возвращает да, если this ФПуть есть a родитель

    ***********************************************************************/

     бул ветвь_ли ();

    /***********************************************************************

            Does this путь currently есть_ли?

    ***********************************************************************/

     бул есть_ли ();

    /***********************************************************************

            Возвращает the время of the последний modification. Accurate
            в_ whatever the OS supports

    ***********************************************************************/

     Время изменён ();

    /***********************************************************************

            Возвращает the время of the последний access. Accurate в_
            whatever the OS supports

    ***********************************************************************/

     Время использовался ();

    /***********************************************************************

            Возвращает the время of файл creation. Accurate в_
            whatever the OS supports

    ***********************************************************************/

     Время создан ();

    /***********************************************************************

            Возвращает файл length (in байты)

    ***********************************************************************/

     бдол размерФайла ();

    /***********************************************************************

            Is this файл записываемый?

    ***********************************************************************/

     бул записываем_ли ();

    /***********************************************************************

            Is this файл actually a папка/дир?

    ***********************************************************************/

     бул папка_ли ();

    /***********************************************************************

            Return timestamp information

    ***********************************************************************/

     Штампы штампыВремени ();
}





/*******************************************************************************

*******************************************************************************/

debug (UnitTest)
{
    unittest
    {
        version(Win32)
        {
            assert (ФПуть("/foo").добавь("bar").вынь == "/foo");
            assert (ФПуть("/foo/").добавь("bar").вынь == "/foo");

            auto fp = new ФПуть(r"C:/home/foo/bar");
            fp ~= "john";
            assert (fp == r"C:/home/foo/bar/john");
            fp.установи (r"C:/");
            fp ~= "john";
            assert (fp == r"C:/john");
            fp.установи("foo.bar");
            fp ~= "john";
            assert (fp == r"foo.bar/john");
            fp.установи("");
            fp ~= "john";
            assert (fp == r"john");

            fp.установи(r"C:/home/foo/bar/john/foo.d");
            assert (fp.вынь == r"C:/home/foo/bar/john");
            assert (fp.вынь == r"C:/home/foo/bar");
            assert (fp.вынь == r"C:/home/foo");
            assert (fp.вынь == r"C:/home");
            assert (fp.вынь == r"C:");
            assert (fp.вынь == r"C:");

            // special case for popping пустой names
            fp.установи (r"C:/home/foo/bar/john/");
            assert (fp.родитель == r"C:/home/foo/bar");

            fp = new ФПуть;
            fp.установи (r"C:/home/foo/bar/john/");
            assert (fp.абс_ли);
            assert (fp.имя == "");
            assert (fp.папка == r"/home/foo/bar/john/");
            assert (fp == r"C:/home/foo/bar/john/");
            assert (fp.путь == r"C:/home/foo/bar/john/");
            assert (fp.файл == r"");
            assert (fp.суффикс == r"");
            assert (fp.корень == r"C:");
            assert (fp.расш == "");
            assert (fp.ветвь_ли);

            fp = new ФПуть(r"C:/home/foo/bar/john");
            assert (fp.абс_ли);
            assert (fp.имя == "john");
            assert (fp.папка == r"/home/foo/bar/");
            assert (fp == r"C:/home/foo/bar/john");
            assert (fp.путь == r"C:/home/foo/bar/");
            assert (fp.файл == r"john");
            assert (fp.суффикс == r"");
            assert (fp.расш == "");
            assert (fp.ветвь_ли);

            fp.вынь;
            assert (fp.абс_ли);
            assert (fp.имя == "bar");
            assert (fp.папка == r"/home/foo/");
            assert (fp == r"C:/home/foo/bar");
            assert (fp.путь == r"C:/home/foo/");
            assert (fp.файл == r"bar");
            assert (fp.суффикс == r"");
            assert (fp.расш == "");
            assert (fp.ветвь_ли);

            fp.вынь;
            assert (fp.абс_ли);
            assert (fp.имя == "foo");
            assert (fp.папка == r"/home/");
            assert (fp == r"C:/home/foo");
            assert (fp.путь == r"C:/home/");
            assert (fp.файл == r"foo");
            assert (fp.суффикс == r"");
            assert (fp.расш == "");
            assert (fp.ветвь_ли);

            fp.вынь;
            assert (fp.абс_ли);
            assert (fp.имя == "home");
            assert (fp.папка == r"/");
            assert (fp == r"C:/home");
            assert (fp.путь == r"C:/");
            assert (fp.файл == r"home");
            assert (fp.суффикс == r"");
            assert (fp.расш == "");
            assert (fp.ветвь_ли);

            fp = new ФПуть(r"foo/bar/john.doe");
            assert (!fp.абс_ли);
            assert (fp.имя == "john");
            assert (fp.папка == r"foo/bar/");
            assert (fp.суффикс == r".doe");
            assert (fp.файл == r"john.doe");
            assert (fp == r"foo/bar/john.doe");
            assert (fp.расш == "doe");
            assert (fp.ветвь_ли);

            fp = new ФПуть(r"c:doe");
            assert (fp.абс_ли);
            assert (fp.суффикс == r"");
            assert (fp == r"c:doe");
            assert (fp.папка == r"");
            assert (fp.имя == "doe");
            assert (fp.файл == r"doe");
            assert (fp.расш == "");
            assert (!fp.ветвь_ли);

            fp = new ФПуть(r"/doe");
            assert (fp.абс_ли);
            assert (fp.суффикс == r"");
            assert (fp == r"/doe");
            assert (fp.имя == "doe");
            assert (fp.папка == r"/");
            assert (fp.файл == r"doe");
            assert (fp.расш == "");
            assert (fp.ветвь_ли);

            fp = new ФПуть(r"john.doe.foo");
            assert (!fp.абс_ли);
            assert (fp.имя == "john.doe");
            assert (fp.папка == r"");
            assert (fp.суффикс == r".foo");
            assert (fp == r"john.doe.foo");
            assert (fp.файл == r"john.doe.foo");
            assert (fp.расш == "foo");
            assert (!fp.ветвь_ли);

            fp = new ФПуть(r".doe");
            assert (!fp.абс_ли);
            assert (fp.суффикс == r"");
            assert (fp == r".doe");
            assert (fp.имя == ".doe");
            assert (fp.папка == r"");
            assert (fp.файл == r".doe");
            assert (fp.расш == "");
            assert (!fp.ветвь_ли);

            fp = new ФПуть(r"doe");
            assert (!fp.абс_ли);
            assert (fp.суффикс == r"");
            assert (fp == r"doe");
            assert (fp.имя == "doe");
            assert (fp.папка == r"");
            assert (fp.файл == r"doe");
            assert (fp.расш == "");
            assert (!fp.ветвь_ли);

            fp = new ФПуть(r".");
            assert (!fp.абс_ли);
            assert (fp.суффикс == r"");
            assert (fp == r".");
            assert (fp.имя == ".");
            assert (fp.папка == r"");
            assert (fp.файл == r".");
            assert (fp.расш == "");
            assert (!fp.ветвь_ли);

            fp = new ФПуть(r"..");
            assert (!fp.абс_ли);
            assert (fp.суффикс == r"");
            assert (fp == r"..");
            assert (fp.имя == "..");
            assert (fp.папка == r"");
            assert (fp.файл == r"..");
            assert (fp.расш == "");
            assert (!fp.ветвь_ли);

            fp = new ФПуть(r"c:/a/b/c/d/e/foo.bar");
            assert (fp.абс_ли);
            fp.папка (r"/a/b/c/");
            assert (fp.суффикс == r".bar");
            assert (fp == r"c:/a/b/c/foo.bar");
            assert (fp.имя == "foo");
            assert (fp.папка == r"/a/b/c/");
            assert (fp.файл == r"foo.bar");
            assert (fp.расш == "bar");
            assert (fp.ветвь_ли);

            fp = new ФПуть(r"c:/a/b/c/d/e/foo.bar");
            assert (fp.абс_ли);
            fp.папка (r"/a/b/c/d/e/f/g/");
            assert (fp.суффикс == r".bar");
            assert (fp == r"c:/a/b/c/d/e/f/g/foo.bar");
            assert (fp.имя == "foo");
            assert (fp.папка == r"/a/b/c/d/e/f/g/");
            assert (fp.файл == r"foo.bar");
            assert (fp.расш == "bar");
            assert (fp.ветвь_ли);

            fp = new ФПуть(r"C:/foo/bar/тест.bar");
            assert (fp.путь == "C:/foo/bar/");
            fp = new ФПуть(r"C:\foo\bar\тест.bar");
            assert (fp.путь == r"C:/foo/bar/");

            fp = new ФПуть("");
            assert (fp.пуст_ли);
            assert (!fp.ветвь_ли);
            assert (!fp.абс_ли);
            assert (fp.суффикс == r"");
            assert (fp == r"");
            assert (fp.имя == "");
            assert (fp.папка == r"");
            assert (fp.файл == r"");
            assert (fp.расш == "");
            /+
            fp = new ФПуть(r"C:/foo/bar/тест.bar");
            fp = new ФПуть(fp.asPath ("foo"));
            assert (fp.имя == r"тест");
            assert (fp.папка == r"foo/");
            assert (fp.путь == r"C:foo/");
            assert (fp.расш == ".bar");

            fp = new ФПуть(fp.asPath (""));
            assert (fp.имя == r"тест");
            assert (fp.папка == r"");
            assert (fp.путь == r"C:");
            assert (fp.расш == ".bar");

            fp = new ФПуть(r"c:/joe/bar");
            assert(fp.склей(r"foo/bar/") == r"c:/joe/bar/foo/bar/");
            assert(fp.склей(new ФПуть(r"foo/bar")).вТкст == r"c:/joe/bar/foo/bar");

            assert (ФПуть.объедини (r"a/b/c/d", r"e/f/" r"g") == r"a/b/c/d/e/f/g");

            fp = new ФПуть(r"C:/foo/bar/тест.bar");
            assert (fp.asExt(пусто) == r"C:/foo/bar/тест");
            assert (fp.asExt("foo") == r"C:/foo/bar/тест.foo");
            +/
        }
    }
}


debug (FPath)
{
    import io.Console;

    проц main()
    {
        assert (ФПуть("/foo/").создай.есть_ли);
        Квывод (ФПуть("c:/temp/").файл("foo.bar")).нс;
    }

}
