
module io.stream.Patterns;

private import text.Regex;
    
private import io.stream.Iterator;

/*******************************************************************************

        Итерирует по набору (т.е. обходит набор) текстовых образцов.

        Каждый образец выставляется клиенту как срез исходного контента,
        где этот срез транзитивен (transient). Если нужно удержать предоставленный
        контент, тогда его нужно соответствующе дублировать с помощью .dup. 

        Предполагается, что предоставляемый этим обходчикам контент полностью
        может быть только читаем (только чтение). Этого правила придерживаются
		все текущие обходчики, но пользователь может менять контент через
		срез получи().
		
		Чтобы усилить желаемый аспект только чтения, в этот код пришлось быть
		ввести повторное копирование, либо же компилятор должен поддерживать
		массивы только для чтения (сейчас это уже есть в D2).

        Смотрите Разграничители, Строки, Образцы, Кавычки.

*******************************************************************************/

class Образцы : Обходчик!(сим)
{
        private Regex regex;
        private alias сим T;
        
        /***********************************************************************
				
				Конструирует неинициализованный обходчик. Например:
                ---
                auto строки = new Строки!(сим);

                проц somefunc (ИПотокВвода поток)
                {
                        foreach (строка; строки.установи(поток))
                                 Квывод (строка).нс;
                }
                ---

                Конструирует потоковый обходчик на потоке:
                ---
                проц somefunc (ИПотокВвода поток)
                {
                        foreach (строка; new Строки!(сим) (поток))
                                 Квывод (строка).нс;
                }
                ---
                
                Конструирует потоковый обходчик на проводе:
                ---
                foreach (строка; new Строки!(сим) (new Файл ("myfile")))
                         Квывод (строка).нс;
                ---

        ***********************************************************************/

        this (T[] образец, ИПотокВвода поток = пусто)
        {
                regex = new Regex (образец, "");
                super (поток);
        }

        /***********************************************************************
                
        ***********************************************************************/

        protected т_мера скан (проц[] данные)
        {
                auto контент = (cast(T*) данные.ptr) [0 .. данные.length / T.sizeof];

                if (regex.тест (контент))
                   {
                   цел старт = regex.registers_[0];
                   цел финиш = regex.registers_[1];
                   установи (контент.ptr, 0, старт);
                   return найдено (финиш-1);        
                   }

                return неНайдено;
        }
}


/*******************************************************************************

*******************************************************************************/

debug(UnitTest)
{
        private import io.device.Array;

        unittest 
        {
                auto p = new Образцы ("b.*", new Массив("blah"));
        }
}
