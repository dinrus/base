
module io.model;


interface ФайлКонст
{

        version (Win32)
        {
                ///
                enum : сим 
                {
                        /// Символ текущей папки
                        СимТекПап = '.',
                        
                        /// Символ разделителя файлов
                       СимФайлРазд = '.',
                        
                        /// Символ разделителя пути
                        СимПутьРазд = '/',
                        
                        /// Символ системного пути
                        СимСистПуть = ';',
                }

                /// Родительская папка
                static const ткст ТкстРодПап = "..";
                
                /// Текущая папка
                static const ткст ТкстТекПап = ".";
                
                /// Разделитель файлов
                static const ткст ТкстФайлРазд = ".";
                
                /// Разделить пути
                static const ткст ТкстПутьРазд = "/";
                
                /// Системный путь
                static const ткст ТкстСистРазд = ";";

                /// Ткст нс (новая строка)
                static const ткст НовСтрЗнак = "\r\n";
        }

        version (Posix)
        {
                ///
                enum : сим 
                {
                        /// Символ текущей папки
                        СимТекПап = '.',
                        
                        /// Символ разделителя файлов
                        СимФайлРазд = '.',
                        
                        /// Символ разделителя пути
                        СимПутьРазд = '/',
                        
                        /// Символ системного пути
                        СимСистПуть = ':',
                }

                /// Родительская папка
                static const ткст ТкстРодПап = "..";
                
                /// Текущая папка
                static const ткст ТкстТекПап = ".";
                
                /// Разделитель файлов
                static const ткст ТкстФайлРазд = ".";
                
                /// Разделить пути
                static const ткст ТкстПутьРазд = "/";
                
                /// Системный путь
                static const ткст ТкстСистРазд = ":";

                /// Ткст нс (новая строка)
                static const ткст НовСтрЗнак = "\n";
        }
}

struct ИнфОФайле
{
        ткст          путь,
                        имя;
        бдол           байты;
        бул            папка,
                        скрытый,
                        системный;
}

interface ИПровод : ИПотокВвода, ИПотокВывода
{
         т_мера размерБуфера ();                      
		 ткст вТкст (); 
         бул жив_ли ();
         проц открепи ();
         проц ошибка (ткст сооб);
		
        interface ИШаг {}
/+
        interface ИОбрез 
        {
                проц упрости (дол размер);
        }+/
}

interface ИВыбираемый
{     
        version (Windows) 
                 alias ук Дескр;   /// opaque OS file-handle         
             else
                typedef цел Дескр = -1; 
        Дескр фукз();
}

interface ИПотокВВ 
{
        const Кф = -1;  


        enum Якорь {
                    Нач   = 0,
                    Тек = 1,
                    Кон    = 2,
                    };


        дол сместись (дол смещение, Якорь якорь = Якорь.Нач);
        ИПровод провод ();
        ИПотокВВ слей ();               
        проц закрой ();               


        interface Переключатель {}
}

interface ИПотокВвода : ИПотокВВ
{

        т_мера читай (проц[] приёмн);               
        проц[] загрузи (т_мера max = -1);        
        ИПотокВвода ввод ();               
}

interface ИПотокВывода : ИПотокВВ
{

        т_мера пиши (проц[] ист);     
        ИПотокВывода копируй (ИПотокВвода ист, т_мера max = -1);
        ИПотокВывода вывод ();               
}

interface БуферВвода : ИПотокВвода
{
        проц[] срез ();

        бул следщ (т_мера delegate(проц[]) скан);

        т_мера читатель (т_мера delegate(проц[]) потребитель);
}

interface БуферВывода : ИПотокВывода
{
        alias добавь opCall;

        проц[] срез ();
        
        БуферВывода добавь (проц[]);

        т_мера писатель (т_мера delegate(проц[]) производитель);
}

interface ИБуфер : ИПровод, ИБуферированный
{
        alias добавь opCall;
        alias слей  opCall;

         ИБуфер буфер ();
         проц[] дайКонтент ();
         ИБуфер устКонтент (проц[] данные);
         ИБуфер устКонтент (проц[] данные, т_мера читаемый);
         ИБуфер добавь (ук контент, т_мера длина);
         ИБуфер добавь (проц[] контент);
         ИБуфер добавь (ИБуфер другой);
         проц потреби (проц[] ист);
         проц[] срез ();
         проц[] opSlice (т_мера старт, т_мера конец);
         проц[] срез (т_мера размер, бул съешь = true);
         проц[] читайРовно (ук приёмн, т_мера байты);
         т_мера заполни (проц[] приёмн);
         т_мера писатель (т_мера delegate (проц[]) писатель);
         т_мера читатель (т_мера delegate (проц[]) читатель);
         ИБуфер сожми ();
         бул пропусти (цел размер);
         бул следщ (т_мера delegate (проц[]));
         т_мера заполни (ИПотокВвода ист);
         т_мера дренируй (ИПотокВывода приёмн);
         бул упрости (т_мера протяженность);
         бул сожми (бул да);
         т_мера читаемый ();
         т_мера записываемый ();
         т_мера резервируй (т_мера пространство);
         т_мера предел ();
         т_мера ёмкость ();
         т_мера позиция ();
         ИБуфер устПровод (ИПровод провод);
         ИБуфер вывод (ИПотокВывода сток);
         ИБуфер ввод (ИПотокВвода исток);
         т_мера читай (проц[] приёмн);
         т_мера пиши (проц[] ист);
         ИПотокВывода вывод ();
         ИПотокВвода ввод ();
         проц ошибка (ткст сооб);
         ИПровод провод ();
         т_мера размерБуфера ();
         ткст вТкст ();
         бул жив_ли ();
         ИПотокВывода слей ();
        ИПотокВвода очисть ();
        ИПотокВывода копируй (ИПотокВвода ист, т_мера макс=-1);
        проц открепи ();
        проц закрой ();
}

interface ИБуферированный
{
        ИБуфер буфер();
}
