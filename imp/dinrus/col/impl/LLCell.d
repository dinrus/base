module col.impl.LLCell;

private import col.impl.Cell;
private import col.model.Comparator;

/**
 *
 * ЯчейкиСС расширяют Ячейки стандартными следующими полями линкованного списка,
 * и предоставляют стандартные операции над ними.
 * <P>
 * ЯчейкиСС - это инструменты реализации. Они выполняют проверку
 * no аргументу, без скрининга результата и синхронизации.
 * Они полагаются на классы пользовательского уровня (см., напр., СвязныйСписок).
 * Этот класс объявлен `public', чтобы его можно было применить для
 * построения иного рода коллекций или ещё чего-либо, помимо тех, которые
 * поддерживаются на данный момент.
**/

public class ЯчейкаСС(T) : Ячейка!(T)
{
        alias Сравнитель!(T) КомпараторТ;


        protected ЯчейкаСС следщ_;

        /**
         * Возвращает следующую ячейку (или пусто, если Неук).
        **/

        public ЯчейкаСС следщ()
        {
                return следщ_;
        }

        /**
         * Устанавливает на точку в n как следщ ячейку.
         * @param n, эта новая следщ ячейка.
        **/

        public проц следщ(ЯчейкаСС n)
        {
                следщ_ = n;
        }

        public this (T знач, ЯчейкаСС n)
        {
                super(знач);
                следщ_ = n;
        }

        public this (T знач)
        {
                this(знач, пусто);
        }

        public this ()
        {
                this(T.init, пусто);
        }


        /**
         * Splice in p между текущ ячейкой и тем, на что указывалось ранее.
         * @param p, ячейка для splice.
        **/

        public final проц вяжиСледщ(ЯчейкаСС p)
        {
                if (p !is пусто)
                    p.следщ_ = следщ_;
                следщ_ = p;
        }

        /**
         * Заставляет текущ ячейку перейти к текущ следщ(),
         * эффективно удаляя следщ элемент из списка.
        **/

        public final проц отвяжиСледщ()
        {
                if (следщ_ !is пусто)
                    следщ_ = следщ_.следщ_;
        }

        /**
         * Линейный поиск вниз по списку с поиском элемента (используя T.равно).
         * @param элемент, который надо найти
         * Возвращает: ячейку, содержащую элемент, либо пусто, если таковой нет.
        **/

        public final ЯчейкаСС найди(T элемент)
        {
                for (ЯчейкаСС p = this; p !is пусто; p = p.следщ_)
                     if (p.элемент() == элемент)
                         return p;
                return пусто;
        }

        /**
         * Возвращает число ячеек, пройденных в поисках первого случая
         * ячейки с элемент() элемент, либо -1, если отсутствует.
        **/

        public final цел индекс(T элемент)
        {
                цел i = 0;
                for (ЯчейкаСС p = this; p !is пусто; p = p.следщ_)
                    {
                    if (p.элемент() == элемент)
                        return i;
                    else
                       ++i;
                    }
                return -1;
        }

        /**
         * Перечисляет число случаев элемента в списке.
        **/

        public final цел счёт(T элемент)
        {
                цел c = 0;
                for (ЯчейкаСС p = this; p !is пусто; p = p.следщ_)
                     if (p.элемент() == элемент)
                         ++c;
                return c;
        }

        /**
         * Возвращает число ячеек в этом списке.
        **/

        public final цел длина()
        {
                цел c = 0;
                for (ЯчейкаСС p = this; p !is пусто; p = p.следщ_)
                     ++c;
                return c;
        }

        /**
         * Возвращает ячейку, представляющую последний элемент этого списка
         * (т.е., ту, у которой следщ() = пусто).
        **/

        public final ЯчейкаСС хвост()
        {
                ЯчейкаСС p = this;
                for ( ; p.следщ_ !is пусто; p = p.следщ_)
                    {}
                return p;
        }

        /**
         * Возвращает н_ую ячейку этого списка, либо пусто, если таковой нет.
        **/

        public final ЯчейкаСС н_ый(цел n)
        {
                ЯчейкаСС p = this;
                for (цел i = 0; i < n; ++i)
                     p = p.следщ_;
                return p;
        }


        /**
         * Создаёт копию этого списка; т.е., новый список, содержащий новые ячейки,
         * но включающий те же элементы в том же порядке.
        **/

        public final ЯчейкаСС копируйСписок()
        {
                ЯчейкаСС новый_список = пусто;
                новый_список = дубликат();
                ЯчейкаСС текущ = новый_список;

                for (ЯчейкаСС p = следщ_; p !is пусто; p = p.следщ_)
                    {
                    текущ.следщ_ = p.дубликат();
                    текущ = текущ.следщ_;
                    }
                текущ.следщ_ = пусто;
                return новый_список;
        }

        /**
         * Клон неглубокий (SHALLOW); т.е., делается только копия текущ ячейки.
        **/

        private final ЯчейкаСС дубликат()
        {
                return new ЯчейкаСС(элемент(), следщ_);
        }

        /**
         * Базовый алгоритм ЛинкованногоСписка совмести.
         * Сливает головы списков по перв и втор согласно cmp.
         * @param перв голова  первого списка.
         * @param втор голова второго списка.
         * @param cmp  Сравнитель, используемый для сравнения элементов.
         * Возвращает: слитый упорядоченный список
        **/

        public final static ЯчейкаСС совмести(ЯчейкаСС перв, ЯчейкаСС втор, КомпараторТ cmp)
        {
                ЯчейкаСС a = перв;
                ЯчейкаСС b = втор;
                ЯчейкаСС hd = пусто;
                ЯчейкаСС текущ = пусто;
                for (;;)
                    {
                    if (a is пусто)
                       {
                       if (hd is пусто)
                           hd = b;
                       else
                          текущ.следщ(b);
                       return hd;
                       }
                    else
                       if (b is пусто)
                          {
                          if (hd is пусто)
                              hd = a;
                          else
                             текущ.следщ(a);
                          return hd;
                          }

                    цел рознь = cmp (a.элемент(), b.элемент());
                    if (рознь <= 0)
                       {
                       if (hd is пусто)
                           hd = a;
                       else
                          текущ.следщ(a);
                       текущ = a;
                       a = a.следщ();
                       }
                    else
                       {
                       if (hd is пусто)
                           hd = b;
                       else
                          текущ.следщ(b);
                       текущ = b;
                       b = b.следщ();
                       }
                    }
                return пусто;
        }

        /**
         * Стандартный делитель списка, используемый сортируй.
         * Делит список на пополам. Возвращает голову второй половины.
         * @param s голова этого списка
         * Возвращает: голову второй половины.
        **/

        public final static ЯчейкаСС разбей(ЯчейкаСС s)
        {
                ЯчейкаСС быстро = s;
                ЯчейкаСС медленно = s;

                if (быстро is пусто || быстро.следщ() is пусто)
                    return пусто;

                while (быстро !is пусто)
                      {
                      быстро = быстро.следщ();
                      if (быстро !is пусто && быстро.следщ() !is пусто)
                         {
                         быстро = быстро.следщ();
                         медленно = медленно.следщ();
                         }
                      }

                ЯчейкаСС r = медленно.следщ();
                медленно.следщ(пусто);
                return r;

        }

        /**
         * Стандартный алгоритм слейСорт.
         * @param s сортируемый список.
         * @param cmp, сравнитель, используемый для упорядочивания.
         * Возвращает: голову отсортированного списка.
        **/

        public final static ЯчейкаСС слейСорт(ЯчейкаСС s, КомпараторТ cmp)
        {
                if (s is пусто || s.следщ() is пусто)
                    return s;
                else
                   {
                   ЯчейкаСС право = разбей(s);
                   ЯчейкаСС лево = s;
                   лево = слейСорт(лево, cmp);
                   право = слейСорт(право, cmp);
                   return совмести(лево, право, cmp);
                   }
        }

}

