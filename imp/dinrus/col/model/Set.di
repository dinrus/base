module col.model.Set;
public import col.model.Collection,
       col.model.Addable;

/**
 * Набор - это коллекция объектов, в которой может существовать только один
 * экземпляр объекта. Если добавляется 2 экземпляра объекта, то только первый
 * попадает в набор.
 */
interface Набор(З) : Коллекция!(З), Добавляемый!(З)
{
    /**
     * Удалить все значения, которые соответствуют данному обходчику.
     */
    Набор!(З) удали(Обходчик!(З) поднабор);

    /**
     * Удалить все значения, которые соответствуют данному обходчику.
     */
    Набор!(З) удали(Обходчик!(З) поднабор, ref бцел члоУдалённых);

    /**
     * Удалить все значения, которых ет в данном обходчике.
     */
    Набор!(З) накладка(Обходчик!(З) поднабор);

    /**
     * Удалить все значения, которых ет в данном обходчике.
     */
    Набор!(З) накладка(Обходчик!(З) поднабор, ref бцел члоУдалённых);

    /**
     * Совариантно dup (из Коллекция)
     */
    Набор!(З) dup();

    /**
     * Совариантно удали (из Коллекция)
     */
    Набор!(З) удали(З з);

    /**
     * Совариантно удали (из Коллекция)
     */
    Набор!(З) удали(З з, ref бул былУдалён);

    /**
     * Совариантно добавь (из Добавляемый)
     */
    Набор!(З) добавь(З з);

    /**
     * Совариантно добавь (из Добавляемый)
     */
    Набор!(З) добавь(З з, ref бул былДобавлен);

    /**
     * Совариантно добавь (из Добавляемый)
     */
    Набор!(З) добавь(Обходчик!(З) обх);

    /**
     * Совариантно добавь (из Добавляемый)
     */
    Набор!(З) добавь(Обходчик!(З) обх, ref бцел члоДобавленных);

    /**
     * Совариантно добавь (из Добавляемый)
     */
    Набор!(З) добавь(З[] массив);

    /**
     * Совариантно добавь (из Добавляемый)
     */
    Набор!(З) добавь(З[] массив, ref бцел члоДобавленных);

    /**
     * Сравнить два набора. Возвращает да, если оба набора имеют одинаковое число
     * элементов,и все элементы из одного набора существуют и в другом наборе.
     *
     * Если o нет в каком-либо Наборе, вернуть нет.
     */
    цел opEquals(Объект o);

    /**
     * Даёт наиболее подходящий элемент из набора. Это элемент, который
     * итерируется первым. Следовательно, вызов удали(дай())
     * гарантировано будет менее операции O(n).
     */
    З дай();

    /**
     * Удалить наиболее подходящий элемент из набора и вернуть его значение.
     * Это равнозначно удали(дай()), за исклчением того, что производиться
     * только один поиск.
     */
    З изыми();
}
