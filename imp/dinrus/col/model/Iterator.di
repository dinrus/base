module col.model.Iterator;

enum : бцел
{
    /**
     * Возвращается из длина(), когда length не поддерживается.
     */
    ДЛИНА_НЕ_ПОДДЕРЖИВАЕТСЯ = ~0
}

/**
 * Базовый обходчик. Позволяет итерировать по всем элементам объекта.
 */
interface Обходчик(З)
{
    /**
     * Если поддерживается, возвращает число элементов, по которым будет производиться обход.
     *
     * Если не поддерживается, возвращает ДЛИНА_НЕ_ПОДДЕРЖИВАЕТСЯ.
     */
    бцел длина(); alias длина length;

    /**
     * Оператор foreach.
     */
    цел opApply(цел delegate(ref З з) дг);
}

/**
 * Обходчик с ключами. Позволяет просматривать ключ элемента, а также
 * его значение, при обходе.
 */
interface Ключник(К, З) : Обходчик!(З)
{
    alias Обходчик!(З).opApply opApply;

    /**
     * Итерирует как по ключам, так и по значениям.
     */
    цел opApply(цел delegate(ref К к, ref З з) дг);
}

/**
 * Чистящий итератор используется tдля очистки значений из коллекции. Он работает
 * сообщая обходчику, что вам нужно, чтобы обх удалил последнее пройденное значение.
 */
interface Чистящий(З)
{
    /**
     * Итерирует по значениям обходчика, сообщая обх, какие значения нужно
     * удалить. Чтобы удалить значение, установите чистить_ли в да перед
     * выходом из цикла.
     *
     * Убедитесь, что вы указали ref для параметра чистить_ли:
     *
     * -----
     * foreach(ref чистить_ли, з; &чистящий.очистить){
     * ...
     * -----
     */
    цел очистить(цел delegate(ref бул чистить_ли, ref З з) дг);
}

/**
 * Чистящий обходчик для контейнеров с ключами.
 */
interface ЧистящийКлючи(К, З) : Чистящий!(З)
{
    /**
     * Итерирует по парам ключ/значение обходчика, сообщая обх, которые из
     * них удалить.
     *
     * Убедитесь, что вы указали ref для параметра чистить_ли:
     *
     * -----
     * foreach(ref чистить_ли, к, з; &чистящий.чисть_ключ){
     * ...
     * -----
     */
    цел чисть_ключ(цел delegate(ref бул чистить_ли, ref К к, ref З з) дг);
}
