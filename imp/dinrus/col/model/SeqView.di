module col.model.SeqView;

private import col.model.View;

/**
 * 
 *
 * Секи - это индексированные, последовательно упорядоченные коллекции.
 * Индексы всегда находятся в диапазоне 0 .. размер() -1. всякий доступ по индексу
 * проверяется, вызывая исключения, если этот индекс не вписывается в диапазон.
 * <P>
 * Перечисление элементы() для всех секов гарантированно обходится
 * (посредством следщЭлт) в последовательном порядке.
 * 
        author: Doug Lea
 * @version 0.93
**/

public interface ОбзорСека(T) : Обзор!(T)
{
        public override ОбзорСека!(T) дубликат();
        public alias дубликат dup;
        /**
         * Возвращает элемент по указанному индексу
         * @param индекс 
         * Возвращает: элемент по индексу
         * Выводит исключение: НетЭлементаИскл, если индекс вне диапазона 0..размер()-1
        **/

        public T получи(цел индекс);
        public alias получи opIndex;


        /**
         * Возвращает первый элемент, если он есть.
         * По поведению равнозначно at(0)
         * Выводит исключение: НетЭлементаИскл, если пуст
        **/

        public T голова();


        /**
         * Возвращает последний элемент, если он есть.
         * По поведению равнозначно at(размер()-1)
         * Выводит исключение: НетЭлементаИскл, если пуст
        **/

        public T хвост();


        /**
         * Репортирует индекс левейшего случая элемента от
         * заданной стартовой точки, либо -1, если такого индекса нет.
         * @param элемент искомый элемент
         * @param стартовыйИндекс индекс, с которого начинается поиск.
		 * Этот стартовыйИндекс должнет обязательно быть действительным.
         * Если меньше нуля, то это понимается как 0.
         * Если больше или равно размер(), результат всегда будет -1.
         * Возвращает: индекс, так чтобы
         * <PRE> 
         * пусть цел si = max(0, стартовыйИндекс) in
         *  индекс == -1 &&
         *   foreach (цел i in si .. размер()-1) !at(индекс).равно(элемент)
         *  ||
         *  at(индекс).равно(элемент) &&
         *   foreach (цел i in si .. индекс-1) !at(индекс).равно(элемент)
         * </PRE>
        **/

        public цел первый(T элемент, цел стартовыйИндекс = 0);

        /**
         * Репортирует индекс самого правого случая какого-либо элемента от 
         * заданной стартовой точки, либо -1, если такой индекс отсутствует.
         * @param элемент искомый элемент
         * @param стартовыйИндекс индекс для начала поиска. стартовыйИндекс
         * обязан быть действительным. Если менбше нуля, результат
         * всегда будет -1.
         * Если больше или равно размер(), понимается как размер()-1.
         * Возвращает: индекс, так чтобы
         * <PRE> 
         * пусть цел si = min(размер()-1, стартовыйИндекс) in
         *  индекс == -1 &&
         *   foreach (цел i in 0 .. si) !at(индекс).равно(элемент)
         *  ||
         *  at(индекс).равно(элемент) &&
         *   foreach (цел i in индекс+1 .. si) !at(индекс).равно(элемент)
         * </PRE>
         *
        **/
        public цел последний(T элемент, цел стартовыйИндекс = 0);


        /**
         * Конструирует новый ОбзорСека, клон этого, за исключением того что
         * он не содержит элементов, находящихся перед индексом или
         * после индекс+длина. Если длина меньше или равна нулю,
         * возвратится пустой ОбзорСека.
         * @param индекс элемента, который станет 0-ым индексом в новом ОбзорСека
         * @param длина число элементов в новом ОбзорСека
         * Возвращает: новую пследовательность, так чтобы
         * <PRE>
         * s.размер() == макс(0, длина) &&
         * foreach (цел i in 0 .. s.размер()-1) s.at(i).равно(at(i+индекс)); 
         * </PRE>
         * Выводит исключение: НетЭлементаИскл, если индекс вне диапазона 0..размер()-1
        **/
        public ОбзорСека поднабор(цел индекс, цел длина);

        /**
         * Конструирует новый ОбзорСека, клон этого, за исключением того что
         * он не содержит элементов, находящихся перед начало или
         * после конец-1. Если длина меньше или равна нулю,
         * возвратится пустой ОбзорСека.
         * @param индекс элемента, который станет 0-ым индексом в новом ОбзорСека
         * @param индекс последнего элемента в этом ОбзорСека плюс 1
         * Возвращает: новую пследовательность, так чтобы
         * <PRE>
         * s.размер() == макс(0, длина) &&
         * foreach (цел i in 0 .. s.размер()-1) s.at(i).равно(at(i+индекс)); 
         * </PRE>
         * Выводит исключение: НетЭлементаИскл, если индекс вне диапазона 0..размер()-1
        **/
        public ОбзорСека opSlice(цел начало, цел конец);


version (VERBOSE)
{
        /**
         * Конструирует новый ОбзорСека, клон этого, за исключением того что
         * он добавляет (вставляет) указанный элемент по
         * указанному индексу.
         * @param индекс индекс, по которому будет помещён новый элемент
         * @param элемент Элемент, вставляемый в новую коллекцию
         * Возвращает: новую последовательность s, так чтобы
         * <PRE>
         *  s.at(индекс) == элемент &&
         *  foreach (цел i in 1 .. s.размер()-1) s.at(i).равно(at(i-1));
         * </PRE>
         * Выводит исключение: НетЭлементаИскл, если индекс вне диапазона 0..размер()-1
        **/

        public ОбзорСека вставкаПо(цел индекс, T элемент);


        /**
         * Конструирует новый ОбзорСека, клон этого, за исключением того что
         * указанный элемент помещается по указанному индексу.
         * @param индекс индекс, по которому заменяется элемент
         * @param элемент Новое значение at(индекс)
         * Возвращает: новую последовательность s, так чтобы
         * <PRE>
         *  s.at(индекс) == элемент &&
         *  foreach (цел i in 0 .. s.размер()-1) 
         *     (i != индекс) --&gt; s.at(i).равно(at(i));
         * </PRE>
         * Выводит исключение: НетЭлементаИскл, если индекс вне диапазона 0..размер()-1
        **/

        public ОбзорСека заменаПо(цел индекс, T элемент);


        /**
         * Конструирует новый ОбзорСека, клон этого, за исключением того что
         * он не содержит элемента по указанному индексу; все
         * элементы в его право части перемещаются в левую по одному.
         *
         * @param индекс индекс, по которому удаляется элемент
         * Возвращает: новую последовательность, так чтобы
         * <PRE>
         *  foreach (цел i in 0.. индекс-1) s.at(i).равно(at(i)); &&
         *  foreach (цел i in индекс .. s.размер()-1) s.at(i).равно(at(i+1));
         * </PRE>
         * Выводит исключение: НетЭлементаИскл, если индекс вне диапазона 0..размер()-1
        **/
        public ОбзорСека удалениеПо(цел индекс);
} // version
}

