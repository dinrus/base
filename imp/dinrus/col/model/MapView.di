module col.model.MapView;

private import  col.model.View,
                col.model.GuardIterator;

/**
 * Карты содержат элементы с ключами. Объект любого рода 
 * может служить ключом для какого-либо элемента.
**/

public interface ОбзорКарты(К, З) : Обзор!(З)
{
        public override ОбзорКарты!(К,З) дубликат();
        public alias дубликат dup;
        /**
         * Рапортует о том, МОЖЕТ ЛИ MapT включить ключ как ключ.
         * Всегда возвращает нет, если ключ is пусто.
        **/

        public бул допускаетсяКлюч(К ключ);

        /**
         * Рапортует о том, есть ли какой-либо элемент с Ключом ключ.
         * Возвращает: да, если есть такой элемент
        **/

        public бул содержитКлюч(К ключ);

        /**
         * Рапортует о том, есть ли пара (ключ, значение).
         * Возвращает: да, если есть такой элемент
        **/

        public бул содержитПару(К ключ, З значение);


        /**
         * Возвращает перечисление, которое может быть использовано для обхода
         * ключей (не элементов) коллекции. Соответствующие элементы
         * могут "to be looked at" с помощью at(ключ) для каждого ключа "ключ". Например:
         * <PRE>
         * Обходчик ключи = amap.ключи();
         * while (ключи.ещё()) {
         *   К ключ = ключи.получи();
         *   T значение = amap.получи(ключ)
         * // ...
         * }
         * </PRE>
         * Возвращает: это перечисление
        **/

        public ОбходчикПар!(К, З) ключи();

        /**
         Обходит контент коллекции. Это экономней, чем использование
         обходчика, так как нет процесса создания нового класса.
        **/

        цел opApply (цел delegate (inout К ключ, inout З значение) дг);
        
        /**
         * Возвращает элемент, ассоциированный с Ключом ключ. 
         * @param ключ ключ
         * Возвращает: элемент, где содержит(ключ, элемент)
         * Выводит исключение: НетЭлементаИскл, если !содержитКлюч(ключ)
        **/

        public З получи(К ключ);
        public alias получи opIndex;

        /**
         * Возвращает элемент, ассоциированный с Ключом ключ. 
         * @param ключ ключ
         * Возвращает: есть ли ключ или его нет
        **/

        public бул получи(К ключ, inout З элемент); 


        /**
         * Возвращает ключ, ассоциированный с элементлм. Может быть
         * любое число ключей, ассоциированных с любым элементом, но
         * возвращается только один из них (произвольно), либо нет,
		 * если такого ключа нет.
         * @param ключ, место для возврата обнаруженного ключа
         * @param элемент значение, к которому делается попытка найти ключ.
         * Возвращает: да, когда значение is найдено; нет иначе
        **/

        public бул ключК(inout К ключ, З значение);
}

