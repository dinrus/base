module col.model.Map;
public import col.model.Collection,
       col.model.Keyed,
       col.model.Multi;

/**
 * В коллекции Карта для значений используются ключи. Допускается наличие
 * только одного экземпляра ключа в одно и то же время.
 */
interface Карта(К, З) : СКлючом!(К, З), Коллекция!(З), Мульти!(З)
{
    /**
     * Установить в карту из данного итератора ключей все элементы.  Любой ключ,
     * ранее существовавший, будет перезаписан.
     *
     * Возвращает this.
     */
    Карта!(К, З) установи(Ключник!(К, З) исток);

    /**
     * Установить в карту из данного итератора ключей все элементы.  Любой ключ,
     * ранее существовавший, будет перезаписан.
     *
     * Возвращает this.
     *
     * члоДобавленных устанавливается в число элементов, которое было добавленно.
     */
    Карта!(К, З) установи(Ключник!(К, З) исток, ref бцел члоДобавленных);

    /**
     * Установить в карту из данного итератора ключей все элементы.  Любой ключ,
     * ранее существовавший, будет перезаписан.
     *
     * Возвращает this.
     */
    Карта!(К, З) установи(З[К] исток);

    /**
     * Установить в карту из данного итератора ключей все элементы.  Любой ключ,
     * ранее существовавший, будет перезаписан.
     *
     * Возвращает this.
     *
     * члоДобавленных устанавливается в число элементов, которое было добавленно.
     */
    Карта!(К, З) установи(З[К] исток, ref бцел члоДобавленных);

    /**
     * Удалить все заданные ключи из этой карты.
     *
     * Возвращает this.
     */
    Карта!(К, З) удали(Обходчик!(К) поднабор);

    /**
     * Удалить все заданные ключи из этой карты.
     *
     * Возвращает this.
     *
     * члоУдалённых устанавливается в число элементов, которое было удалено.
     */
    Карта!(К, З) удали(Обходчик!(К) поднабор, ref бцел члоУдалённых);

    /**
     * Удалить все заданные ключи из этой карты.
     *
     * Возвращает this.
     */
    Карта!(К, З) удали(К[] поднабор);

    /**
     * Удалить все заданные ключи из этой карты.
     *
     * Возвращает this.
     *
     * члоУдалённых устанавливается в число элементов, которое было удалено.
     */
    Карта!(К, З) удали(К[] поднабор, ref бцел члоУдалённых);

    /**
     * Удаляет все ключи, которых нет в данном обходчике.
     *
     * Возвращает this.
     */
    Карта!(К, З) накладка(Обходчик!(К) поднабор);

    /**
     * Удаляет все ключи, которых нет в данном обходчике.
     *
     * члоУдалённых устанавливается в число элементов, которое было удалено.
     *
     * Возвращает this.
     */
    Карта!(К, З) накладка(Обходчик!(К) поднабор, ref бцел члоУдалённых);

    /**
     * Удаляет все ключи, которых нет в данном массиве.
     *
     * Возвращает this.
     */
    Карта!(К, З) накладка(К[] поднабор);

    /**
     * Удаляет все ключи, которых нет в данном массиве.
     *
     * члоУдалённых устанавливается в число элементов, которое было удалено.
     *
     * Возвращает this.
     */
    Карта!(К, З) накладка(К[] поднабор, ref бцел члоУдалённых);

    /**
     * Выдаёт набор ключей, который содержит данная карта. Это не копия
     * ключей, но действительное "окно" в ключи карты. Если в карту
     * добавляются значения, они будут появляться в итераторе ключей.
     *
     * Этого нет в СКлючом, так как некоторые контейнеры СКлючом не имеют
     * ключи, определённые пользователем.
     */
    Обходчик!(К) ключи();

    /**
     * Совариантно с зачисть (из Коллекция)
     */
    Карта!(К, З) зачисть();

    /**
     * Совариантно с dup (из Коллекция)
     */
    Карта!(К, З) dup();

    /**
     * Совариантно с удали (из Коллекция)
     */
    Карта!(К, З) удали(З з);

    /**
     * Совариантно с удали (из Коллекция)
     */
    Карта!(К, З) удали(З з, ref бул былУдалён);

    /**
     * Совариантно с удалиВсе (из Мульти)
     */
    Карта!(К, З) удалиВсе(З з);

    /**
     * Совариантно с удалиВсе (из Мульти)
     */
    Карта!(К, З) удалиВсе(З з, ref бцел члоУдалённых);

    /**
     * Совариантно с удалиПо (из СКлючом)
     */
    Карта!(К, З) удалиПо(К ключ);

    /**
     * Совариантно с удалиПо (из СКлючом)
     */
    Карта!(К, З) удалиПо(К ключ, ref бул былУдалён);

    /**
     * Совариантно с установи (из СКлючом)
     */
    Карта!(К, З) установи(К ключ, З значение);

    /**
     * Совариантно с установи (из СКлючом)
     */
    Карта!(К, З) установи(К ключ, З значение, ref бул былДобавлен);

    /**
     * Сравнивает две карты. Возвращает да, если обе карты имеют одинаковое число
     * элементов, и в обеих имеются элементы, чьи ключи и значения одинаковы.
     *
     * Если o не карта, то возвращается 0.
     */
    цел opEquals(Объект o);
}
