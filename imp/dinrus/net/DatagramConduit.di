module net.DatagramConduit;
public  import  io.device.Conduit;

package import  net.Socket,
                net.SocketConduit;
				
/*******************************************************************************

        Датаграммы предоставляют low-overhead, non-reliable механизм передачи данных.

        Датаграммы не 'подключен'ы так же точно как ПУТ сокет; не требуется
        слушай() или прими(), чтобы принять датаграмму, кроме того, данные
        могут приходить из разных источников. Но сокет датаграмм однако может
        всё ещё использовать метод подключись() как ПУТ сокет. Когда подключен,
        методы читай() и пиши() будут ограничены до единичного адреса,
        вместо того чтобы быть открытыми. Поэтому применение подключись() сделает
        аргумент адреса, куда всё читай() и пиши() irrelevant. Без
        подключись(), метод пиши() должен быть снабжён адресом, а метод
        читай() тоже адресом, идентифицирующим исток данных.

        При использовании как слушателя сначала следует привязать сокет к
        локальному адаптеру. Этого можно достичь привязкой сокета к
        АдресИнтернета, построенному только по порту (АДР_ЛЮБОЙ), чем
        возникает запрос к ОС на присвоение адреса локального сетевого адаптера.

*******************************************************************************/

extern(D) class ДатаграммПровод : СокетПровод
{
/***********************************************************************

            Создаёт сокет датаграмм читай/пиши.

    ***********************************************************************/
        this();
/***********************************************************************

            Наполняет предоставленный Массив из этого сокета. This will stall,
            пока не получит какие-либо данные, или происходит таймаут. Предполагается,
            что датаграмма была подключена.

            Возвращает число байтов, считанных в вывод, или Кф, если
            сокет не читается.

    ***********************************************************************/

        override т_мера читай (проц[] ист);
/***********************************************************************

            Читает байты из доступной датаграммы, преобразуя в заданный Массив.
            Если предоставлен, адрес 'из_' наполнсется из источника
            входящих данных. Заметьте, что применяются механизмы таймаута,
            получаемые через суперкласс СокетПровод.

            Возвращает число байтов, считанных из ввода, либо Кф, если
            сокет не смог прочесть.

    ***********************************************************************/
        т_мера читай (проц[] приёмн, Адрес из_);
/***********************************************************************

            Записывает предоставленный контент на сокет. Это продолжается,
            пока сокет отвечает в нужной манере. Предполагается, что
            датаграмма уже подключена.

            Возвращает число байтов, отправленных на вывод, либо Кф, если
            сокен не может писать.

    ***********************************************************************/
        override т_мера пиши (проц[] ист);
/***********************************************************************

            Записывает массив на указанный адрес. Если адрес 'куда' равен
            пусто, предполагается, что вместо него был подключен сокет.

            Возвращает число байтов, отправленных на вывод, либо Кф, если
            сокен не может писать.

    ***********************************************************************/
        т_мера пиши (проц[] ист, Адрес куда);
}
