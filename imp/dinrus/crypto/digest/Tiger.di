/*******************************************************************************

       This module реализует the Tiger algorithm by Ross Anderson и Eli
        Biham.

*******************************************************************************/
module crypto.digest.Tiger;

private import crypto.digest.MerkleDamgard;
public  import crypto.digest.Digest;

/*******************************************************************************

*******************************************************************************/

final class Tiger : MerkleDamgard
{

        /***********************************************************************

                Конструирует Tiger

        ***********************************************************************/

        this();

        /***********************************************************************

                The размер of a tiger дайджест is 24 байты
                
        ***********************************************************************/

        override бцел размерДайджеста() ;
        

        /***********************************************************************

                Initialize the cipher

                Примечания:
                Возвращает the cipher состояние в_ it's начальное значение

        ***********************************************************************/

        override проц сбрось();

        /***********************************************************************

                Obtain the дайджест

                Возвращает:
                the дайджест

                Примечания:
                Возвращает дайджест of the текущ cipher состояние, this may be the
                final дайджест, or a дайджест of the состояние between calls в_ обнови()

        ***********************************************************************/

        override проц создайДайджест(ббайт[] буф);

        /***********************************************************************

                Get the число of проходки being performed

                Возвращает:
                the число of проходки

                Примечания:
                The Tiger algorithm may выполни an arbitrary число of проходки
                the minimum recommended число is 3 и this число should be
                quite безопасно however the "ultra-cautious" may wish в_ increase
                this число.

        ***********************************************************************/

        бцел проходки();

        /***********************************************************************

                Набор the число of проходки в_ be performed

                Параметры:
                n = the число of проходки в_ выполни

                Примечания:
                The Tiger algorithm may выполни an arbitrary число of проходки
                the minimum recommended число is 3 и this число should be
                quite безопасно however the "ultra-cautious" may wish в_ increase
                this число.

        ***********************************************************************/

        проц проходки(бцел n);

        /***********************************************************************

                 блок размер

                Возвращает:
                the блок размер

                Примечания:
                Specifies the размер (in байты) of the блок of данные в_ пароль в_
                each вызов в_ трансформируй(). For Tiger the размерБлока is 64.

        ***********************************************************************/

        protected override бцел размерБлока();

        /***********************************************************************

                Length паддинг размер

                Возвращает:
                the length паддинг размер

                Примечания:
                Specifies the размер (in байты) of the паддинг which uses the
                length of the данные which имеется been ciphered, this паддинг is
                carried out by the падДлин метод. For Tiger the добавьРазмер is 8.

        ***********************************************************************/

        protected бцел добавьРазмер()   ;

        /***********************************************************************

                Pads the cipher данные

                Параметры:
                данные = a срез of the cipher буфер в_ заполни with паддинг

                Примечания:
                Fills the passed буфер срез with the appropriate паддинг for
                the final вызов в_ трансформируй(). This паддинг will заполни the cipher
                буфер up в_ размерБлока()-добавьРазмер().

        ***********************************************************************/

        protected override проц падСооб(ббайт[] at);

        /***********************************************************************

                Performs the length паддинг

                Параметры:
                данные   = the срез of the cipher буфер в_ заполни with паддинг
                length = the length of the данные which имеется been ciphered

                Примечания:
                Fills the passed буфер срез with добавьРазмер() байты of паддинг
                based on the length in байты of the ввод данные which имеется been
                ciphered.

        ***********************************************************************/

        protected override проц падДлин(ббайт[] at, бдол length);

        /***********************************************************************

                Performs the cipher on a блок of данные

                Параметры:
                данные = the блок of данные в_ cipher

                Примечания:
                The actual cipher algorithm is carried out by this метод on
                the passed блок of данные. This метод is called for every
                размерБлока() байты of ввод данные и once ещё with the остаток
                данные псеп_в_конце в_ размерБлока().

        ***********************************************************************/

        protected override проц трансформируй(ббайт[] ввод);

        /***********************************************************************

        ***********************************************************************/

        private static ббайт получиБайт(бдол c, бцел b1, бцел b2 = 0);

        /***********************************************************************

        ***********************************************************************/

        private static проц округли(ref бдол a, ref бдол b, ref бдол c, бдол x, бдол mul);

        /***********************************************************************

        ***********************************************************************/

        private static проц пароль(ref бдол a, ref бдол b, ref бдол c, бдол[8] x, бдол mul);

        /***********************************************************************

        ***********************************************************************/

        private static проц keySchedule(бдол[8] x);


}



debug(UnitTest)
{
        unittest
        {
        static ткст[] strings = [
                "",
                "abc",
                "Tiger",
                "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-",
                "ABCDEFGHIJKLMNOPQRSTUVWXYZ=abcdefghijklmnopqrstuvwxyz+0123456789",
                "Tiger - A Быстрый Нов Хэш Function, by Ross Anderson и Eli Biham",
                "Tiger - A Быстрый Нов Хэш Function, by Ross Anderson и Eli Biham, proceedings of Быстрый Software Encryption 3, Camмост.",
                "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
                x"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000",
        ];
        static ткст[] результатs = [
                "3293ac630c13f0245f92bbb1766e16167a4e58492dde73f3",
                "2aab1484e8c158f2bfb8c5ff41b57a525129131c957b5f93",
                "dd00230799f5009fec6debc838bb6a27df2b9d6f110c7937",
                "f71c8583902afb879edfe610f82c0d4786a3a534504486b5",
                "48ceeb6308b87d46e95d656112cdf18d97915f9765658957",
                "8a866829040a410c729ad23f5ada711603b3cdd357e4c15e",
                "ce55a6afd591f5ebac547ff84f89227f9331dab0b611c889",
                "0f7bf9a19b9c58f2b7610df7e84f0ac3a71c631e7b53f78e",
                "5ab6ff5b263acfab2013c3068c03a82979ea6db287a3ecdd",
        ];

        Tiger h = new Tiger();

        foreach(цел i, ткст s; strings) {
                h.обнови(cast(ббайт[]) s);

                ткст d = h.гексДайджест();

                assert(d == результатs[i],":("~s~")("~d~")!=("~результатs[i]~")");

        }
        }
}
