/**
* Модуль функций WIN API для языка Динрус.
* Разработчик Виталий Кулич.
*/
module sys.WinFuncs;
import sys.WinStructs, sys.WinConsts, sys.WinIfaces;
import cidrus;
/+
//СПЕЦИФИЧНЫЕ МОДУЛЬНЫЕ КОНСТАНТЫ
const{

шткст0 RT_STRING;

}

static this()
{
RT_STRING = ДЕЛИНТРЕСУРС(6);
}

//КОНЕЦ ДЛЯ СПЕЦИФИЧНЫЕ МОДУЛЬНЫЕ КОНСТАНТЫ
+/

alias бкрат АТОМ;
//alias бцел ЛКИД;

extern(Windows)
{

    alias цел function(ИСКЛУКАЗЫ*) ВЕКТОРНЫЙ_ОБРАБОТЧИК_ИСКЛЮЧЕНИЯ;
    alias проц function( бцел кодОш, бцел члоПеремещБайт, АСИНХРОН *асинх) ПРОЦЕДУРА_АСИНХ_ВЫПОЛНЕНИЯ_ВВ;
    alias проц function(ук, бул) ПРОЦ_ОТВЕТА_ТАЙМЕРА;
    alias проц function(ук) ПРОЦ_СТАРТА_ФИБРЫ;
    alias бцел function(ук) ПРОЦ_СТАРТА_НИТИ;
    alias бцел function(БОЛЬШЕЦЕЛ, БОЛЬШЕЦЕЛ, БОЛЬШЕЦЕЛ, БОЛЬШЕЦЕЛ, бцел, бцел, ук, ук, ук) ПРОЦ_ПРОГРЕССА;
}

extern(C):
	/**
	*MAKEINTRESOURCEW
	*/
	шткст0 ДЕЛИНТРЕСУРС(цел i);

	/**
	*GetOverlappedResult
	*/
	бул ДайАсинхронРезультат(ук укз, АСИНХРОН* ас, бцел* бц, бул бу);

	/**
	* GetHandleInformation
	*/
	бул ДайИнфОДескр(ук укз, ПХэндлФ* фл);
	/**
	* SetHandleInformation
	*/
	бул УстановиИнфОДескр(ук укз, ПХэндлФ маска, бцел флаги);
	/**
	*WSAGetOverlappedResult
	*/
    int ВСАДайАсинхрРезультат (ук сокет, АСИНХРОН* оверлап, бцел* трансфер, бул ждать, бцел* флаги);
	/**
	*WSAIoctl
	*/
    int ВСАВВКонтрл (ук s, бцел op, ук inBuf, бцел cbIn, ук outBuf, бцел cbOut, бцел* результат, АСИНХРОН* оверлап, ук фция);
	/**
	*WSARecv
	*/
    int ВСАПрими (ук сок, ВИНСОКБУФ* буф, бцел см, бцел* ссм, бцел* ссмм, АСИНХРОН* ас, ук ф);
	/**
	*WSASend
	*/
    int ВСАШли (ук сок, ВИНСОКБУФ* буф, бцел лл, бцел* олл, бцел оллл, АСИНХРОН* ас, ук ффф);
	/**
	*GetDiskFreeSpaceExA
	*/
	бул ДайСвобДискПространствоДопА(ткст0 имяП, ББОЛЬШЕЦЕЛ* свобБайтыДоступнВызывающему, ББОЛЬШЕЦЕЛ* общЧлоБайт, ББОЛЬШЕЦЕЛ* общЧлоСвобБайт);	
	/**
	*GetDiskFreeSpaceExW
	*/
	бул ДайСвобДискПространствоДоп(шткст0 имяП, ББОЛЬШЕЦЕЛ* свобБайтыДоступнВызывающему, ББОЛЬШЕЦЕЛ* общЧлоБайт, ББОЛЬШЕЦЕЛ* общЧлоСвобБайт);
	/**
	*GetLogicalDriveStringsA
	*/
	ткст ДайТкстЛогДисковА();
	/**
	*GetVolumePathNameW
	*/
	бул ДайИмяПутиТома(inout шткст0 а, inout шткст0 б, бцел в);
	/**
	*GetVolumePathNameA
	*/
	бул ДайИмяПутиТомаА(inout ткст0 а, inout ткст0 б, бцел в);
	/**
	* GetFileSizeEx
	*/
	бул ДайРазмерФайлаДоп(ук укз, БОЛЬШЕЦЕЛ* бц);
	/**
	* GetFileSize
	*/
	бцел ДайРазмерФайла(ук укз, бцел* бц);
	/**
	* SetFilePointerEx
	*/
	бул УстановиФайлУкДоп(ук файл, sys.WinStructs.БОЛЬШЕЦЕЛ а, sys.WinStructs.БОЛЬШЕЦЕЛ *б, бцел ф);
	/**
	* ActivateActCtx
	*/
    бул АктивируйАктКткс(ук актКткст, бцел** куки);
	/**
	* AddAtomA
	*/
    АТОМ ДобавьАтомА(ткст атом);
	/**
	* AddAtomW
	*/
    АТОМ ДобавьАтом(шткст атом);
	/**
	* AddLocalAlternateComputerNameA
	*/
    ПОшибка ДобавьЛокальноеАльтернативноеИмяКомпьютераА(ткст днсИмяХоста, бцел флаги = 0);
	/**
	* AddLocalAlternateComputerNameW
	*/
    ПОшибка ДобавьЛокальноеАльтернативноеИмяКомпьютера(шткст днсИмяХоста, бцел флаги = 0);
	/**
	* AddRefActCtx
	*/
    проц ДобавьСсылАктКткс(ук актКткст);
	/**
	* AddVectoredExceptionHandler
	*/
    ук ДобавьВекторныйОбработчикИсключения(бцел первОбр, ВЕКТОРНЫЙ_ОБРАБОТЧИК_ИСКЛЮЧЕНИЯ векОбрИскл);
	/**
	* AllocConsole
	*/
    бул РазместиКонсоль();
	/**
	* AllocateUserPhysicalPages
	*/
    бул РазместиФизическиеСтраницыПользователя(ук процесс, бцел *члоСтр, бцел *члоФреймовСтр);
	/**
	* AreFileApisANSI
	*/
    бул ФайлВВФцииИспользуютАНЗИ();
	/**
	* AssignProcessToJobObject
	*/
    бул ПрисвойПроцессДжобОбъекту(ук джоб, ук процесс);
	/**
	* AttachConsole
	*/
    бул ПрикрепиКонсоль(бцел идПроц);
	/**
	* BackupRead
	*/
    бул БэкапЧитай(ук файл, ббайт *буф, бцел члоБайтСчитать, бцел *члоСчитБайт, бул аборт, бул безопасноДляПроцесса, ук контекст );
	/**
	* BackupSeek
	*/
    бул БэкапСместись(ук файл, бцел младшБайтСместиться, бцел старшБайтСместиться, бцел *младшСмещБайт, бцел *старшСмещБайт, ук контекст);
	/**
	* BackupWrite
	*/
    бул БэкапПиши(ук файл, ббайт *буф,  бцел члоБайтПисать, бцел *члоЗаписБайт, бул аборт, бул безопасноДляПроцесса, ук контекст );
	/**
	* Beep
	*/
    бул Бип(бцел герц, бцел мсек);
	/**
	* BeginUpdateResourceA
	*/
    ук НачниОбновлениеРесурсаА(ткст рес, бул б);
	/**
	* BeginUpdateResourceW
	*/
    ук НачниОбновлениеРесурса(шткст рес, бул б);
	/**
	* BindIoCompletionCallback
	*/
    бул ПривяжиОбрвызовВыполненияВВ(ук файл, ПРОЦЕДУРА_АСИНХ_ВЫПОЛНЕНИЯ_ВВ фн, бцел флаги = 0);
	/**
	* BuildCommDCBA
	*/
    бул СтройКоммСКУА(ткст описание, СКУ *ску);
	/**
	* BuildCommDCBW
	*/
    бул СтройКоммСКУ(шткст описание, СКУ *ску);
	/**
	* BuildCommDCBAndTimeoutsA
	*/
    бул СтройКоммСКУИТаймаутыА(ткст определение, СКУ *ску, КОММТАЙМАУТЫ *кт);
	/**
	* BuildCommDCBAndTimeoutsW
	*/
    бул СтройКоммСКУИТаймауты(шткст определение, СКУ *ску, КОММТАЙМАУТЫ *кт);
	/**
	* CallNamedPipeA
	*/
    бул ВызовиИменованныйПайпА(ткст имяПайпа, ук вхБуф, бцел вхБуфРазм, ук выхБуф, бцел выхБуфРазм, бцел *байтЧитать, бцел таймаут  );
	/**
	* CallNamedPipeW
	*/
    бул ВызовиИменованныйПайп(шткст имяПайпа, ук вхБуф, бцел вхБуфРазм, ук выхБуф, бцел выхБуфРазм, бцел *байтЧитать, бцел таймаут  );
	/**
	* CancelDeviceWakeupRequest
	*/
    бул  ОтмениЗапросПобудкиУстройства(ук устр);
	/**
	* CancelIo
	*/
    бул ОтмениВВ(ук файл);
	/**
	* CancelWaitableTimer
	*/
    бул ОтмениОжидающийТаймер(ук таймер);
	/**
	* ChangeTimerQueueTimer
	*/
    бул ИзмениТаймерОчередиТаймеров(ук очередьТаймеров, ук таймер, бцел устВремя, бцел период );
	/**
	* CancelTimerQueueTimer
	*/
    бул ОтмениТаймерОчередиТаймеров(ук очередьТаймеров, ук таймер);
	/**
	* CheckNameLegalDOS8Dot3A
	*/
    бул ПроверьЛегальностьИмениФайлаДляДОС8_3А(in ткст имя, out ткст оемИмя,in бцел размОЕМИмени, out бул естьПробелы, out бул имяЛегально)	;
	/**
	* CheckNameLegalDOS8Dot3W
	*/
    бул ПроверьЛегальностьИмениФайлаДляДОС8_3(in шткст имя, out ткст оемИмя,in бцел размОЕМИмени, out бул естьПробелы, out бул имяЛегально)	;
	/**
	* CheckRemoteDebuggerPresent
	*/
    бул ПроверьПрисутствиеУдалённогоОтладчика(in ук процесс, inout бул естьОтл );
	/**
	* ClearCommBreak
	*/
    бул СотриКоммБрейк(ук файл);
	/**
	* ClearCommError
	*/
    бул СотриОшибкуКомм(ук файл, ПОшКомм ошибка, КОММСТАТ *кс)	;
	/**
	* CommConfigDialogA
	*/
    бул ДиалогКонфигурацииКоммА(ткст имяУстр, ук окноРодитель, КОММКОНФИГ *кк);
	/**
	* CommConfigDialogW
	*/
    бул ДиалогКонфигурацииКомм(шткст имяУстр, ук окноРодитель, КОММКОНФИГ *кк);
	/**
	* CompareFileTime
	*/
    ПСравнВремФла СравниФВремя(in ФВРЕМЯ *фвр1, in ФВРЕМЯ *фвр2);
	/**
	* CompareStringA
	*/
    ПСравнСтр СравниСтрокиА(бцел локаль, ПФлагиНормСорт флаги, ткст0 стр1, цел члоСимВСтр1, ткст0 стр2, цел члоСимВСтр2);
	/**
	* CompareStringW
	*/
    ПСравнСтр СравниСтроки(ЛКИД локаль, ПФлагиНормСорт флаги, шткст *стр1, цел члоСимВСтр1, шткст *стр2, цел члоСимВСтр2);
	/**
	* ConnectNamedPipe
	*/
    бул ПодключиИменованныйПайп(ук имПайп, АСИНХРОН *асинх)	;
	/**
	* ContinueDebugEvent
	*/
    бул ПродолжайСобытиеОтладки(бцел идПроцесса, бцел идНити, ПСтатПродолжОтладки стат)	;
	/**
	* ConvertDefaultLocale
	*/
    ЛКИД ПреобразуйДефолтнуюЛокаль(ЛКИД лок);
	/**
	* ConvertFiberToThread
	*/
    бул ПреобразуйФибруВНить()	;
	/**
	* ConvertThreadToFiber
	*/
    ук ПреобразуйНитьВФибру( ук параметр );
	/**
	* CopyFileExA
	*/
    бул КопируйФайлДопА(ткст0 сущФИмя, ткст0 новФИмя, ПРОЦ_ПРОГРЕССА пп, ук данные, бул *отменить, ПКопирФайл флаги);
	/**
	* CopyFileExW
	*/
    бул КопируйФайлДоп(шткст *сущФИмя, шткст *новФИмя, ПРОЦ_ПРОГРЕССА пп, ук данные, бул *отменить, ПКопирФайл флаги);
	/**
	* CreateActCtxA
	*/
    ук СоздайАктКтксА(АКТКТКСА *ак);
	/**
	* CreateActCtxW
	*/
    ук СоздайАктКткс(АКТКТКС *ак);
	/**
	* CreateConsoleScreenBuffer
	*/
    ук СоздайБуферЭкранаКонсоли(ППраваДоступа желДост, ПСовмИспФайла совмРеж, in БЕЗАТРЫ *ба);
	/**
	* CreateDirectoryA
	*/
    бул СоздайПапкуА(ткст путь, БЕЗАТРЫ *безАтры );
	/**
	* CreateDirectoryW
	*/
    бул СоздайПапку(шткст путь, БЕЗАТРЫ *безАтры );
	/**
	* CreateDirectoryExA
	*/
    бул СоздайПапкуДопА(ткст папкаШаблон, ткст новаяПапка, БЕЗАТРЫ *безАтры );
	/**
	* CreateDirectoryExW
	*/
    бул СоздайПапкуДоп(шткст папкаШаблон, шткст новаяПапка, БЕЗАТРЫ *безАтры );
	/**
	* CreateEventA
	*/
    ук СоздайСобытиеА(БЕЗАТРЫ *ба, бул ручнойСброс, бул сигнализироватьНачСост, ткст0 имя)	;
	/**
	* CreateEventW
	*/
    ук СоздайСобытие(БЕЗАТРЫ *ба, бул ручнойСброс, бул сигнализироватьНачСост, шткст *имя);
	/**
	* CreateFiber
	*/
    ук СоздатьФибру(т_мера размСтека,ПРОЦ_СТАРТА_ФИБРЫ псф, ук параметр);
	/**
	* CreateFiberEx
	*/
    ук СоздатьФибруДоп(т_мера размСтекаКоммит, т_мера размСтекаРезерв, бцел флаги, ПРОЦ_СТАРТА_ФИБРЫ псф, ук параметр);
	/**
	* CreateFileMappingA
	*/
    ук СоздайМаппингФайлаА(ук ф, БЕЗАТРЫ *ба, ППамять защ, бцел максРазмН, бцел максРазмВ, ткст имя);
	/**
	* CreateFileMappingW
	*/
    ук СоздайМаппингФайла(ук ф, БЕЗАТРЫ *ба,ППамять защ, бцел максРазмН, бцел максРазмВ, шткст имя);
	/**
	* CreateHardLinkA
	*/
    бул СоздайЖёсткуюСвязкуА(ткст имяСвязываемогоФайла, ткст имяСвязующегоФайла);
	/**
	* CreateHardLinkW
	*/
    бул CreateHardLinkW(ткст имяСвязываемогоФайла, ткст имяСвязующегоФайла);
	/**
	* CreateIoCompletionPort
	*/
    ук 	СоздайПортАвтозаполненияВВ(ук файл, ук сущПортВып, бцел ключВып, бцел числоКонкурентныхНитей);
	/**
	* CreateJobObjectA
	*/
    ук СоздайОбъектДжобА(БЕЗАТРЫ *ба, ткст имя )	;
	/**
	* CreateJobObjectW
	*/
    ук СоздайОбъектДжоб(БЕЗАТРЫ *ба, ткст имя )		;
	/**
	* CreateMailslotA
	*/
    ук СоздайСлотПочтыА(ткст имя, бцел максРазмСооб, бцел таймаутЧтен, БЕЗАТРЫ *ба)	;
	/**
	* CreateMailslotW
	*/
    ук СоздайСлотПочты(ткст имя, бцел максРазмСооб, бцел таймаутЧтен, БЕЗАТРЫ *ба);
	/**
	* CreateMemoryResourceNotification
	*/
    ук СоздайПометкуРесурсаПамяти(ТПРП метка)		;
	/**
	* CreateMutexA
	*/
    ук СоздайМютексА(БЕЗАТРЫ* ба, бул иницВладеть, ткст имя)			;
	/**
	* CreateMutexW
	*/
    ук СоздайМютекс(БЕЗАТРЫ* ба, бул иницВладеть, ткст имя)	;
	/**
	* CreateNamedPipeA
	*/
    ук СоздайИменованныйПайпА(ткст имя, ППайп режПайп, ППайп типПайп, бцел максЭкз, бцел размВыхБуф, бцел размВхБуф, бцел дефТаймаут, БЕЗАТРЫ *ба)		;
	/**
	* CreateNamedPipeW
	*/
    ук СоздайИменованныйПайп(ткст имя, ППайп режПайп, ППайп типПайп, бцел максЭкз, бцел размВыхБуф, бцел размВхБуф, бцел дефТаймаут, БЕЗАТРЫ *ба)		;
	/**
	* CreatePipe
	*/
    бул СоздайПайп(ук *пайпЧтен, ук *пайпЗап, БЕЗАТРЫ *баПайпа, бцел размБайтБуф);
	/**
	* CreateRemoteThread
	*/
    ук СоздайУдалённуюНить(ук процесс, БЕЗАТРЫ *баНити, т_мера размСтека, ПРОЦ_СТАРТА_НИТИ стартАдрНити, ук параметр, ПСозданиеПроцесса флагиСозд, убцел идНити );
	/**
	* CreateSemaphoreA
	*/
    ук СоздайСемафорА(БЕЗАТРЫ *ба, цел начСчёт, цел максСчёт, ткст имя);
	/**
	* CreateSemaphoreW
	*/
    ук СоздайСемафор(БЕЗАТРЫ *ба, цел начСчёт, цел максСчёт, ткст *имя);
	/**
	* CreateTapePartition
	*/
    ПОшибка СоздайТейпОтдел(ук устр, ПТейп мсо, бцел чло, бцел размер);
	/**
	* CreateTimerQueue
	*/
    ук СоздайОчередьТаймеров();
	/**
	* CreateTimerQueueTimer
	*/
    бул СоздайТаймерОчередиТаймеров(ук* новТаймер, ук очТайм, ПРОЦ_ОТВЕТА_ТАЙМЕРА проц, ук парам, бцел назнВремя, бцел период, ПТаймер флаги );
	/**
	* CreateToolhelp32Snapshot
	*/
    ук СоздайСнимокТулхэлп32(ПТулхэлп32 флаги, бцел идПроцесса32);
	/**
	* CreateWaitableTimerA
	*/
    ук СоздайОжидающийТаймерА(БЕЗАТРЫ *баТаймера, бул ручнСброс, ткст имя)	;
	/**
	* CreateWaitableTimerW
	*/
    ук СоздайОжидающийТаймер(БЕЗАТРЫ *баТаймера, бул ручнСброс, ткст имя)	;
	/**
	* DeactivateActCtx
	*/
    бул ДеактивируйАктКткс(ПАктКткс флаги, бцел куки);
	/**
	* DebugActiveProcess
	*/
    бул ОтладкаАктивногоПроцесса(бцел идПроцесса);
	/**
	* DebugActiveProcessStop
	*/
    бул ОстановитьОтладкуАктивногоПроцесса(бцел идПроцесса);
	/**
	* DebugBreak
	*/
    проц ПрерватьОтладку();
	/**
	* DebugBreakProcess
	*/
    бул ПрерватьОтладкуПроцесса(ук процесс);
	/**
	* DefineDosDeviceA
	*/
    бул ОпределиУстройствоДосА(ПДосУстройство флаги, ткст имяУстр, ткст целПуть );
	/**
	* DefineDosDeviceW
	*/
    бул ОпределиУстройствоДос(ПДосУстройство флаги, ткст имяУстр, ткст целПуть );
	/**
	* DeleteAtom
	*/
    АТОМ УдалитьАтом(АТОМ а);
	/**
	* DeleteCriticalSection
	*/
    проц УдалиКритическуюСекцию(КРИТСЕКЦ *критСекц)	;
	/**
	* DeleteFiber
	*/
    проц УдалиФибру(ук фиб);
	/**
	* DeleteFileA
	*/
    бул УдалиФайлА(in ткст фимя);
	/**
	* DeleteFileW
	*/
    бул УдалиФайл(in ткст фимя);
	/**
	* DeleteTimerQueue
	*/
    бул УдалиОчередьТаймеров(ук от );
	/**
	* DeleteTimerQueueEx
	*/
    бул УдалиОчередьТаймеровДоп(ук от, ук событиеЗавершения);
	/**
	* DeleteTimerQueueTimer
	*/
    бул УдалиТаймерОчередиТаймеров(ук от, ук т, ук собЗав ) ;
	/**
	* DeleteVolumeMountPointA
	*/
    бул УдалиМонтажнуюТочкуТомаА(ткст монтТчк);
	/**
	* DeleteVolumeMountPointW
	*/
    бул УдалиМонтажнуюТочкуТома(ткст монтТчк);
	/**
	* DeviceIoControl
	*/
    бул УправляйВВУстройства(ук устр, бцел кодУпрВВ /*см. win32.winioctl*/, ук вхБуф, т_мера размВхБуф, ук выхБуф, т_мера размВыхБуф, бцел *возвращеноБайт, АСИНХРОН *ас);
	/**
	* DisableThreadLibraryCalls
	*/
    бул ОтключиВызовыБиблиотекиИзНити(ук модуль);
	/**
	* DisconnectNamedPipe
	*/
    бул ОтключиИменованныйПайп(ук пайп);
	/**
	* HIWORD
	*/
    бкрат СТАРШСЛОВО(цел l);
	/**
	* LOWORD
	*/
    бкрат МЛАДШСЛОВО(цел l);
	/**
	* xxxxxxxxxx
	*/
    ббайт СТАРШБАЙТ(бкрат w);
	/**
	* xxxxxxxxxx
	*/
    ббайт МЛАДШБАЙТ(бкрат w);

//ЯЗЫК
	/**
	* MAKELANGID
	*/
    цел СДЕЛАЙИДЪЯЗ(ПЯзык p, ППодъяз s);
	/**
	* PRIMARYLANGID
	*/
    бкрат ПЕРВИЧНИДЪЯЗ(цел язид) ;
	/**
	* SUBLANGID
	*/
    бкрат ИДПОДЪЯЗА(цел язид);
	
	/**
	*GetVersionExA
	*/
	бул ДайВерсиюДопА(ИНФОВЕРСИИОС_А* иовос);	
	/**
	*GetVersionExW
	*/
	бул ДайВерсиюДоп(ИНФОВЕРСИИОС* иовос);
    /**
   *  GetVersion
    */
    бцел ДайВерсию();
	
//СКУ
/**
* GetCommState
*/
бул ДайСостояниеКомм(ук укз, СКУ* ску);
/**
* SetCommState
*/
бул УстановиСостояниеКомм(ук укз, СКУ* ску);
	
//ОБРАБОТКА ИСКЛЮЧЕНИЙ
	/**
	*SetLastError
	*/
	проц УстановиПоследнОшибку(ПОшибка номош);
	/**
	*SetLastErrorEx
	*/
	проц УстановиПоследнОшибкуДоп(ПОшибка номош, бцел ош);


//ФАЙЛЫ И ПАПКИ
	/**
	* SetFileAttributesW
	*/
		бул УстановиАтрибутыФайла(ткст файл, бцел атры);
	/**
	* GetFileAttributesExW
	*/
	бул ДайАтрибутыФайлаДоп(ткст файл, бцел атры, ФАЙЛ_АТР_ДАН_ВИН32* фад);	
	/**
	* GetFileAttributesExA
	*/
	бул ДайАтрибутыФайлаДопА(ткст файл, бцел атры, ФАЙЛ_АТР_ДАН_ВИН32* фад);

	/**
	*MoveFileExA
	*/
	бул ПереместиФайлДопА(ткст откуда, ткст куда, бцел флаг);

	/**
	*MoveFileExW
	*/
	бул ПереместиФайлДоп(ткст откуда, ткст куда, бцел флаг);

	/**
	*GetTempPathA
	*/
	бцел ДайВремПутьА(бцел ц, ткст0 ткт);

	/**
	*GetTempPathW
	*/
	бцел ДайВремПуть(бцел ц, шткст0 ткт);

	/**
	* SetEndOfFile
	*/

	бул УстановиКонецФайла(ук кон);

    /**
    * SetCurrentDirectoryA
    */
    бул УстановиТекущуюПапкуА(ткст путь);
    /**
    * SetCurrentDirectoryW
    */
    бул УстановиТекущуюПапку(ткст путь);
    /**
    * GetCurrentDirectoryA
    */
    ткст ДайТекущуюПапкуА();
    /**
    * GetCurrentDirectoryW
    */
    ткст ДайТекущуюПапку();
    /**
    * CreateDirectoryA
    */
    бул СоздайПапкуА(ткст путь, БЕЗАТРЫ *безАтры );
    /**
    * CreateDirectoryW
    */
    бул СоздайПапку(ткст путь, БЕЗАТРЫ *безАтры );
    /**
    * CreateDirectoryExA
    */
    бул СоздайПапкуДопА(ткст папкаШаблон, ткст новаяПапка, БЕЗАТРЫ *безАтры );
    /**
    * CreateDirectoryExW
    */
    бул СоздайПапкуДоп(ткст папкаШаблон, ткст новаяПапка, БЕЗАТРЫ *безАтры );
    /**
    * RemoveDirectoryA
    */
    бул УдалиПапкуА(ткст путь);
    /**
   *  RemoveDirectoryW
    */
    бул УдалиПапку(ткст путь);
    /**
    * CloseHandle
    */
    бул ЗакройДескр(ук дОбъект);
    /**
   *  CreateFileA
    */
    ук СоздайФайлА(in ткст фимя, ППраваДоступа доступ, ПСовмИспФайла режСовмест,
                                АТРИБУТЫ_БЕЗОПАСНОСТИ *безАтры, ПРежСоздФайла диспозицияСозд, ПФайл фФайлАтр, ук файлШаблон);
    /**
    * CreateFileW
    */
    ук СоздайФайл(in ткст фимя, ППраваДоступа доступ, ПСовмИспФайла режСовмест,
                              АТРИБУТЫ_БЕЗОПАСНОСТИ *безАтры, ПРежСоздФайла диспозицияСозд, ПФайл флагиИАтры, ук файлШаблон);

    /**
    * FindClose
    */
    бул НайдиЗакрой(ук найдиФайл);
    /**
    * FindFirstFileA
    */
    ук НайдиПервыйФайлА(in ткст фимя, ПДАН_А* данныеПоискаФайла);
    /**
    * FindFirstFileW
    */
    ук НайдиПервыйФайл(in ткст фимя, ПДАН* данныеПоискаФайла);
    /**
    * FindNextFileA
    */
    бул НайдиСледующийФайлА(ук найдиФайл, ПДАН_А* данныеПоискаФайла);
    /**
    * FindNextFileW
    */
    бул НайдиСледующийФайл(ук найдиФайл, ПДАН* данныеПоискаФайла);
    /**
    * GetFileAttributesA
    */
    бцел ДайАтрибутыФайлаА(in ткст фимя);
    /**
    * GetFileAttributesW
    */
    бцел ДайАтрибутыФайла(in ткст фимя);
    /**
    * CopyFileA
    */
    бул КопируйФайлА(ткст имяСущФайла, ткст новФимя, бул ошЕслиСуществует);
    /**
    * CopyFileW
    */
    бул КопируйФайл(ткст имяСущФайла, ткст новФимя, бул ошЕслиСуществует);
    /**
    * MoveFileA
    */
    бул ПереместиФайлА(in ткст откуда, in ткст куда);
    /**
    * MoveFileW
    */
    бул ПереместиФайл(in ткст откуда, in ткст куда);
    /**
    * ReadFile
    */
    бул ЧитайФайл(ук файл, ук буфер, бцел члоБайтДляЧит, бцел *члоСчитБайт, АСИНХРОН* асинхрон);
    /**
    * SetFilePointer
    */
    бцел УстановиУказательФайла(ук файл, цел дистанцияПереноса,  цел * дистанцияПереносаВ,ППозКурсора как);
	alias УстановиУказательФайла УстФайлУк;
    /**
    * WriteFile
    */
    бул ПишиФайл(ук файл, in ук буфер, бцел члоБайтДляЗаписи, убцел члоЗаписанБайт, АСИНХРОН* асинхрон);
    /**
    * GetModuleFileNameA
    */
    бцел ДайИмяФайлаМодуляА(экз модуль, ткст *фимя, бцел размер);

    /**
    * GetModuleFileName
    */
    бцел ДайИмяФайлаМодуля(экз модуль, ткст *фимя, бцел размер);
    /**
    * GetStdHandle
    */
    ук ДайСтдДескр(ПСтд стдДескр);
    /**
    * SetStdHandle
    */
    бул УстановиСтдДескр(ПСтд стдДескр, ук дескр);
    /**
    * GetModuleHandleA
    */
    экз ДайДескрМодуляА(ткст имя);
    /**
    * GetModuleHandleW
    */
    экз ДайДескрМодуля(ткст имя);
    /**
	* FlushFileBuffers
    */
    бул СлейБуферыФайла(ук файлУк);
    /**
	* GetFileType
    */
    бцел ДайТипФайла(ук файлУк);

//ДИНАМИЧЕСКАЯ БИБЛИОТЕКА КОДА (ДБК)
    /**
   *  LoadLibraryA
    */
    ук ЗагрузиБиблиотекуА(ткст имяФайлаБибл);
    /**
    * LoadLibraryW
    */
    ук ЗагрузиБиблиотеку(ткст фимя);
    /**
    * LoadLibraryExA
    */
    ук ЗагрузиБиблиотекуДопА(ткст фимя, ук файл, ПЗагрФлаг флаги);
    /**
    * LoadLibraryExW
    */
    ук ЗагрузиБиблиотекуДоп(ткст фимя, ук файл, ПЗагрФлаг флаги);
    /**
    * GetProcAddress
    */
    ук ДайАдресПроц(ук модуль, ткст имяПроц);

    /**
   *  FreeLibrary
    */
    бул ОсвободиБиблиотеку(ук библМодуль);
    /**
   *  FreeLibraryAndExitThread
    */
    проц ОсвободиБиблиотекуИВыйдиИзНити(ук библМодуль, бцел кодВыхода);

    /**
   * DisableThreadLibraryCalls
    */
    бул ОтключиВызовыБиблиотекиИзНити(ук модуль);

//ОКНО СООБЩЕНИЯ
    /**
   * MessageBoxA
    */
    цел ОкноСообА(ук окно, ткст текст, ткст заголовок, ПСооб тип);
    /**
   *  MessageBoxW
    */
    цел ОкноСооб(ук окно, ткст текст, ткст заголовок, ПСооб тип);
    /**
   *  MessageBoxExA
    */
    цел ОкноСообДопА(ук окно, ткст текст, ткст заголовок, ПСооб тип, бкрат идЯзыка);
    /**
   *  MessageBoxExW
    */
    цел ОкноСообДоп(ук окно, ткст текст, ткст заголовок, ПСооб тип, бкрат идЯзыка);

//РЕЕСТР
    /**
    * RegDeleteKeyA
    */
    цел УдалиКлючРегА(ПКлючРег ключ, ткст подключ);
    /**
    * RegDeleteValueA
    */
    цел УдалиЗначениеРегА(ПКлючРег ключ, ткст имяЗнач);
    /**
    * RegEnumKeyExA
    */
    цел ПеречислиКлючиРегДопА(ПКлючРег ключ, бцел индекс, ткст имя, убцел пкбИмя, убцел резерв, ткст класс, убцел пкбКласс, ФВРЕМЯ *времяПоследнейЗаписи);
    /**
    * RegEnumValueA
    */
    цел ПеречислиЗначенияРегА(ПКлючРег ключ, бцел индекс, ткст имяЗнач, убцел пкбИмяЗнач, убцел резерв, убцел тип, уббайт данные, убцел пкбДанные);
    /**
    * RegCloseKey
    */
    цел ЗакройКлючРег(ПКлючРег ключ);
    /**
    * RegFlushKey
    */
    цел ПодсветиКлючРег(ПКлючРег ключ);
    /**
    * RegOpenKeyA
    */
    цел ОткройКлючРегА(ПКлючРег ключ, ткст подключ, ук *результат);
    /**
    * RegOpenKeyExA
    */
    цел ОткройКлючРегДопА(ПКлючРег ключ, ткст подключ, ПРеестр опции, бцел желательно, ук *результат);
    /**
    * RegQueryInfoKeyA
    */
    цел ЗапросиИнфОКлючеРегА(ПКлючРег ключ, ткст класс, убцел пкбКласс, убцел резерв, убцел подключи, убцел максДлинаПодключа, убцел пкбМаксДлинаКласса, убцел значения, убцел пкбМаксДлинаИмениЗначения, убцел пкбМаксДлинаЗначения, убцел пкбДескрБезоп, ФВРЕМЯ *времяПоследнейЗаписи);
    /**
    * RegQueryValueA
    */
    цел ЗапросиЗначениеРегА(ПКлючРег ключ, ткст подключ, ткст значение,  цел* пкбЗначение);
    /**
    * RegCreateKeyExA
    */
    цел СоздайКлючРегДопА(ПКлючРег ключ, ткст подключ, бцел резерв, ткст класс, ПРеестр опции, бцел желательно, БЕЗАТРЫ *безАтры, ук *результат, убцел расположение);
    /**
    * RegSetValueExA
    */
    цел УстановиЗначениеРегДопА(ПКлючРег ключ, ткст имяЗначения, бцел резерв, ПРеестр тип, уббайт данные, бцел кбДанные);

//ВРЕМЯ
    /**
    * GetSystemTime
    */
    проц ДайСистВремя(СИСТВРЕМЯ* систВрем);
    /**
    * GetFileTime
    */
    бул ДайФВремя(ук файл, ФВРЕМЯ *времяСоздания, ФВРЕМЯ *времяПоследнегоДоступа, ФВРЕМЯ *времяПоследнейЗаписи);
    /**
    * GetSystemTimeAsFileTime
    */
    проц ДайСистВремяКакФВремя(ФВРЕМЯ* сисВремКакФВрем);
    /**
    * SetSystemTime
    */
    бул УстановиСистВремя(СИСТВРЕМЯ* систВрем);
    /**
    * SetFileTime
    */
    бул УстановиФВремя(ук файл, in ФВРЕМЯ *времяСоздания, in ФВРЕМЯ *времяПоследнДоступа, in ФВРЕМЯ *времяПоследнЗаписи);
    /**
    * GetLocalTime
    */
    проц ДайМестнВремя(СИСТВРЕМЯ *систВремя);
    /**
    * SetLocalTime
    */
    бул УстановиМестнВремя(СИСТВРЕМЯ *систВремя);
    /**
    * SystemTimeToTzSpecificLocalTime
    */
    бул СистВремяВМестнВремяЧП(ИНФОЧП *инфОЧасПоясе, СИСТВРЕМЯ *мировВремя, СИСТВРЕМЯ *местнВремя);
    /**
    * GetTimeZoneInformation
    */
    бцел ДайИнфОЧП(ИНФОЧП *инфОЧП);
    /**
    * SetTimeZoneInformation
    */
    бул УстановиИнфОЧП(ИНФОЧП *инфОЧП);
    /**
    * SystemTimeToFileTime
    */
    бул СистВремяВФВремя(in СИСТВРЕМЯ *систВрем, ФВРЕМЯ *фВрем);
    /**
    * FileTimeToLocalFileTime
    */
    бул ФВремяВМестнФВремя(in ФВРЕМЯ *фВрем, ФВРЕМЯ *местнФВрем);
    /**
   *  LocalFileTimeToFileTime
    */
    бул МестнФВремяВФВремя(in ФВРЕМЯ *локФВрем, ФВРЕМЯ *фВрем);
    /**
   *  FileTimeToSystemTime
    */
    бул ФВремяВСистВремя(in ФВРЕМЯ *фВрем, СИСТВРЕМЯ *систВрем);
    /**
    * CompareFileTime
    */
    цел СравниФВремя(in ФВРЕМЯ *фвр1, in ФВРЕМЯ *фвр2);
    /**
    * FileTimeToDosDateTime
    */
    бул ФВремяВДатВремяДОС(in ФВРЕМЯ *фвр, убкрат фатДата, убкрат фатВремя);
    /**
    * DosDateTimeToFileTime
    */
    бул ДатВремяДОСВФВремя(бкрат фатДата,  бкрат фатВремя, ФВРЕМЯ *фвр);
    /**
    * GetTickCount
    */
    бцел ДайСчётТиков();
    /**
   *  SetSystemTimeAdjustment
    */
    бул УстановиНастрСистВремени(бцел настройкаВрем, бул настВремОтключена);
    /**
   *  GetSystemTimeAdjustment
    */
    бул ДайНастрСистВремени(убцел настрВрем, убцел инкВрем, бул* настрВремОтключена);
    /**
    * FormatMessageA
    */
    бцел ФорматируйСообА(ПФорматСооб флаги, ук исток, бцел идСооб, бцел идЯз, ткст буф, бцел разм, ук* арги);
    /**
    * FormatMessageW
    */
    бцел ФорматируйСооб(ПФорматСооб флаги, ук исток, бцел идСооб, бцел идЯз, ткст буф, бцел разм, ук* арги);

//ПРОЦЕСС

    /**
    * CreateProcessA
    * Создаёт новый процесс и его первичную нить.
    */
    бул СоздайПроцессА(ткст назвПриложения, ткст комСтр, БЕЗАТРЫ* атрыПроц, БЕЗАТРЫ* атрыНити, бул наследоватьДескр, ПСозданиеПроцесса флаги, ук среда, ткст текПап, ИНФОСТАРТА* ис, ИНФОПРОЦ* пи);	//АСКИ
    /**
    * CreateProcessW
    */
    бул СоздайПроцесс(ткст назвПриложения, ткст комСтр, БЕЗАТРЫ* атрыПроц, БЕЗАТРЫ* атрыНити, бул наследоватьДескр, ПСозданиеПроцесса флаги, ук среда, ткст текПап, ИНФОСТАРТА* ис, ИНФОПРОЦ* пи);   //ЮНИКОД

    /**
    * CreateProcessAsUserA
   *  Создаёт новый процесс и его первичную нить. Новый процесс выполняется в контексте безопасности указанного пользователя.
    */
    бул СоздайПроцессПользователяА(ук токен, ткст назвПрил, ткст комСтр, БЕЗАТРЫ* атрыПроц, БЕЗАТРЫ* атрыНити, бул наследоватьДескрипторы, ПСозданиеПроцесса создПроцФлаги, ук блокСреды, ткст текПап, ИНФОСТАРТА* стартИнф, ИНФОПРОЦ* инфОПроц);
    /**
    * CreateProcessAsUserW
    */
    бул СоздайПроцессПользователя(ук токен, ткст назвПрил, ткст комСтр, БЕЗАТРЫ* атрыПроц, БЕЗАТРЫ* атрыНити, бул наследоватьДескрипторы, ПСозданиеПроцесса создПроцФлаги, ук блокСреды, ткст текПап, ИНФОСТАРТА* стартИнф, ИНФОПРОЦ* инфОПроц);

    /**
    * ExitProcess
   *  Завершает процесс и все его нити.
    */
    проц ПокиньПроцесс(бцел кодВыхода);

    /**
    * GetExitCodeProcess
   *  Получает статус завершения указанного процесса.
    */
    бул ДайКодВыходаПроцесса( ук процесс, out бцел* код);

    /**
    * GetProcessTimes
    * Получает временную информацию для данного процесса.
    */
    бул ДайВременаПроцесса(ук процесс, ФВРЕМЯ *времяСозд, ФВРЕМЯ *времяВыхода, ФВРЕМЯ *времяЯдра, ФВРЕМЯ *времяПользователя);

    /**
    * GetCurrentProcess
    * Получает псевдохэндл текущего процесса.
    */
    ук ДайТекущийПроцесс();

    /**
    * GetCurrentProcessId
    * Получает идентификатор вызывающего процесса.
    */
    бцел ДайИдТекущегоПроцесса();

    /**
    * GetCommandLine
    * Получает командную строку для текущего процесса.
    */
    шткст0 ДайКомСтроку();

    /**
   *  CommandLineToArgvW
    */
    шткст0* КомСтрокаВАрги(шткст0 ш, уцел н);

    /**
    * OpenProcess
    * Открывает существующий объект процесса.
    */
    ук ОткройПроцесс(ППраваПроцесса желДоступ, бул наследоватьДескр, бцел идПроцесса);

    /**
    * TerminateProcess
    * Прерывает указанный процесс и все его нити.
    */
    бул ПрервиПроцесс(ук процесс, бцел кодВыхода);

    /**
    * GetProcessAffinityMask
    * Возвращает маску сходства указанного процесса и маску сходства для системы.
    */
    бул ДайМаскуСходстваПроцесса(ук процесс,out бцел* маскаПроц, out бцел* маскаСис );

//НИТЬ

    /**
    * CreateThread
    * Создаёт нить для выполнения в виртуальном адресном пространстве вызывающего её процесса.
    */
    ук СоздайНить(БЕЗАТРЫ* атрыНити, т_мера размСтэка, ПРОЦ_СТАРТА_НИТИ стартАдр, ук парам, ПСозданиеПроцесса флагиСозд, убцел идНити);

    /**
    * GetCurrentThread
    * Получает псевдохэндл текущей нити.
    */
    ук ДайТекущуюНить();

    /**
    * GetThreadLocale
    */
    бцел ДайЛокальНити();

    /**
    * DuplicateHandle
    */
    бул ДублируйДескр(ук исходнПроц, ук исходнНить, ук хендлПроцЦели, ук *цхендл, ППраваДоступа доступ, бул наследоватьДескр, бцел опции);

    /**
    * GetCurrentThreadId
    * Получает идентификатор вызывающей нити.
    */
    бцел ДайИдТекущейНити();

    /**
   *  SetThreadPriority
    * Устанавливает значение приоритета для указанной нити.
    */
    бул УстановиПриоритетНити(ук нить, цел приоритет);

    /**
    * SetThreadPriorityBoost
     * Управляет способностью системы временно увеличивать или понижать приоритет нити.
    */
    бул УстановиПовышениеПриоритетаНити(ук нить, бул отклПовышениеПриоритета);

    /**
    * GetThreadPriorityBoost
   *  Выводит для указанной нити состояние повышения приоритета.
    */
    бул ДайПовышениеПриоритетаНити(ук нить, бул *отклПовышениеПриоритета);

    /**
    * GetThreadTimes
   * Выводит временную информацию для указанной нити.
    */
    бул ДайВременаНити(ук нить, ФВРЕМЯ *времяСозд, ФВРЕМЯ *времяВыхода, ФВРЕМЯ *времяЯдра, ФВРЕМЯ *времяПользователя);

    /**
    * GetThreadPriority
    * Выводит значение приоритета для указанной нити.
    */
    цел ДайПриоритетНити(ук нить);

    /**
    * GetThreadContext
    */
    бул ДайКонтекстНити(ук нить, КОНТЕКСТ *контекст);

    /**
    * SetThreadContext
    */
    бул УстановиКонтекстНити(ук нить, КОНТЕКСТ *контекст);

    /**
    * GetExitCodeThread
   *  Получает статус завершения указанной нити.
    */
    бул ДайКодВыходаНити(ук нить, убцел кодВыхода);

    /**
    * SuspendThread
    * Замораживает указанную нить.
    */
    бцел ЗаморозьНить(ук нить);

    /**
    * ResumeThread
    * Уменьшает счётчик замороженных нитей.
    */
    бцел  РазморозьНить(ук нить);

    /**
    * WaitForSingleObject
    */
    бцел ЖдиОдинОбъект(ук хендл, бцел миллисекк);

    /**
   *  WaitForMultipleObjects
    */
    бцел ЖдиНесколькоОбъектов(бцел счёт, ук *хендлы, бул ждатьВсе, бцел миллисекк);

    /**
    * Sleep
   *  Замораживает выполнение текущей нити на указанный интервал.
    */
    проц Спи(бцел миллисекк);

//НИТЕЛОКАЛЬНОЕ ХРАНИЛИЩЕ (НЛХ)

    /**
   *  TlsAlloc
   *  Размещает индекс НЛХ.
    */
    бцел РазместиНлх();

    /**
    * TlsGetValue
    *  Выводит значение указанного индекса НЛХ в слоте НЛХ вызывающей нити.
    */
    ук ДайЗначениеНлх(бцел индНлх);

    /**
    * TlsSetValue
    * Сохраняет значение для указанного индекса НЛХ в слоте НЛХ вызывающей нити.
    */
    бул УстановиЗначениеНлх(бцел индНлх, ук лок);

    /**
    * TlsFree
    * Освобождает индекс НЛХ.
    */
    бул ОсвободиНлх(бцел индНлх);

//ИНКРЕМЕНТ
    /**
   *  InterlockedIncrement
    */
    цел БлокированныйИнкремент( цел* увеличиваемое);
    /**
    * InterlockedDecrement
    */
    цел БлокированныйДекремент( цел* уменьшаемое);
    /**
    * InterlockedExchange
    */
    цел БлокированныйОбмен( цел * цель, цел значение);
    /**
   *  InterlockedExchangeAdd
    */
    цел БлокированныйОбменДобавка( цел * добавляемое, цел значение);
    /**
   *  InterlockedCompareExchange
    */
    ук БлокированныйОбменСравнение(ук *цель, ук обмен, ук сравниваемое);

//КРИТИЧЕСКАЯ СЕКЦИЯ
    /**
    * InitializeCriticalSection
    */
    проц ИнициализуйКритическуюСекцию(КРИТСЕКЦ *критСекц);
    /**
   *  EnterCriticalSection
    */
    проц ВойдиВКритическуюСекцию(КРИТСЕКЦ *критСекц);
    /**
   * TryEnterCriticalSection
    */
    бул ПробуйВойтиВКритическуюСекцию(КРИТСЕКЦ *критСекц);
    /**
   * LeaveCriticalSection
    */
    проц ПокиньКритическуюСекцию(КРИТСЕКЦ *критСекц);
    /**
    * DeleteCriticalSection
    */
    проц УдалиКритическуюСекцию(КРИТСЕКЦ *критСекц);

//ПРОИЗВОДИТЕЛЬНОСТЬ
    /**
   *  QueryPerformanceCounter
    */
    бул ОпросиСчётчикПроизводительности(дол *счПроизв);
    /**
    * QueryPerformanceFrequency
    */
    бул ОпросиЧастотуПроизводительности(дол *частота);

//РЕСУРСЫ
    /**
   *  FreeResource
    */
    бул ОсвободиРес(гук данныеРес);
    /**
    * LockResource
    */
    гук БлокируйРес(гук данныеРес);

//ГЛОБАЛЬНЫЕ ПЕРЕМЕННЫЕ
    /**
    * GlobalLock
    */
    ук БлокируйГлоб(гук укз);
    /**
   *  GlobalUnlock
    */
    бул  РазблокируйГлоб(гук пам);
    /**
    * GlobalFree
    */
    гук  ОсвободиГлоб(гук пам);
    /**
   *  GlobalCompact
    */
    бцел СожмиГлоб(бцел минОсвоб);
    /**
    * GlobalFix
    */
    проц ФиксируйГлоб(гук пам);
    /**
   *  GlobalUnfix
    */
    проц РасфиксируйГлоб(гук пам);
    /**
   *  GlobalWire
    */
    ук ВяжиГлоб(гук пам);
    /**
    * GlobalUnWire
    */
    бул ОтвяжиГлоб(гук пам);
    /**
    * GlobalMemoryStatus
    */
    проц СтатусГлобПамяти(СТАТПАМ *буф);
    /**
    * GlobalAlloc
    */
    гук РазместиГлоб(ППамять флаги, бцел байты);
    /**
    * GlobalReAlloc
    */
    гук ПереместиГлоб(гук укз, т_мера байты, ППамять флаги);
    /**
    * GlobalSize
    */
    т_мера РазмерГлоб(гук укз);
    /**
   *  GlobalFlags
    */
    бцел ФлагиГлоб(гук укз);
    /**
   *  GlobalHandle
    */
    гук ХэндлГлоб(ук пам);

//ЛОКАЛЬНЫЕ ПЕРЕМЕННЫЕ
    /**
   *  LocalAlloc
    */
    лук РазместиЛок(ППамять флаги, бцел байты);
    /**
   *  LocalReAlloc
    */
    лук ПереместиЛок(лук пам, бцел байты, ППамять флаги);
    /**
    * LocalHandle
    */
    лук ХэндлЛок(ук пам);
    /**
    * LocalLock
    */
    ук БлокируйЛок(лук пам);
    /**
    * LocalUnlock
    */
    бул РазблокируйЛок(лук пам);
    /**
   *  LocalSize
    */
    т_мера РазмерЛок(лук пам);
    /**
   *  LocalFlags
    */
    бцел ФлагиЛок(лук пам);
    /**
    * LocalFree
    */
    лук ОсвободиЛок(лук пам);
    /**
    * LocalShrink
    */
    бцел РасширьЛок(лук пам, бцел новРазм);
    /**
   *  LocalCompact
    */
    бцел СожмиЛок(бцел минОсв);

//ВИРТУАЛЬН ПАМ
    /**
    * VirtualAlloc
    */
    ук РазместиВирт(ук адрес, бцел разм, ППамять типРазмещения, бцел защита);
    /**
    * VirtualFree
    */
    бул ОсвободиВирт(ук адрес, бцел разм, ППамять типОсвобождения);
    /**
   *  VirtualProtect
    */
    бул ЗащитиВирт(ук адр, бцел разм, бцел новЗащ, убцел старЗащ);
    /**
    * VirtualQuery
    */
    бцел ОпросиВирт(ук адр, sys.WinStructs.БАЗИОП *буф, бцел длина);
    /**
    * VirtualAllocEx
    */
    ук РазместиВиртДоп(ук процесс, ук адрес, бцел разм, ППамять типРазмещ, бцел защита);
    /**
    * VirtualFreeEx
    */
    бул ОсвободиВиртДоп(ук процесс, ук адр, бцел разм, ППамять типОсвоб);
    /**
    * VirtualProtectEx
    */
    бул ЗащитиВиртДоп(ук процесс, ук адр, бцел разм, бцел новЗащ, убцел старЗащ);
    /**
    * VirtualQueryEx
    */
    бцел ОпросиВиртДоп(ук процесс, ук адр, sys.WinStructs.БАЗИОП *буф, бцел длина);

//КУЧА
    /**
    * FlushInstructionCache
    */
    бул СлейКэшИнструкций(ук процесс, ук адрБаз, бцел разм);
    /**
    * GetProcessHeap
    */
    ук ДайКучуПроцесса();
    /**
    * GetProcessHeaps
    */
    бцел ДайКучиПроцесса(бцел члоКуч, ук *укз);
    /**
    * HeapCreate
    */
    ук СоздайКучу(ППамять опц, т_мера начРазм, т_мера максРазм);
    /**
    * HeapDestroy
    */
    бул УдалиКучу(ук укз);
    /**
    * HeapAlloc
    */
    ук РазместиКучу(ук куча, ППамять флаги, т_мера байты);
    /**
    * HeapReAlloc
    */
    ук ПереместиКучу(ук куча, ППамять флаги, ук блок, т_мера байты);
    /**
    * HeapFree
    */
    бул ОсвободиКучу(ук куча, ППамять флаги, ук блок);
    /**
    * HeapSize
    */
    бцел РазмерКучи(ук укз, ППамять флаги, ук блок );
    /**
    * HeapValidate
    */
    бул ПроверьКучу(ук укз, ППамять флаги, ук блок );
    /**
    * HeapCompact
    */
    бцел СожмиКучу(ук укз, ППамять флаги);
    /**
    * HeapLock
    */
    бул БлокируйКучу(ук укз);
    /**
    * HeapUnlock
    */
    бул РазблокируйКучу(ук укз);
    /**
    * HeapWalk
    */
    бул ОбойдиКучу(ук укз, ЗАППРОЦКУЧ* зап);
    /**
   *  HeapQueryInformation
    */
    бул ЗапросиИнфОКуче (ук куча, бцел клинф, out ук инф, т_мера длинаклинф, т_мера* длвозвр);
    /**
   *  HeapSetInformation
    */
    бул УстановиИнфОКуче(ук куча, бцел клинф, ук кинф, т_мера длкинф);

//ПАМЯТЬ
    /**
    * RtlCopyMemory
    */
    //проц КопируйПамять(ук куда, ук откуда, т_мера длина);
    /**
    * RtlFillMemory
    */
    проц ЗаполниПамять(ук куда, т_мера длина, ббайт зап);
    /**
    * GetLargePageMinimum
    */
    //т_мера ДайМинимумБСтраницы();
    /**
    * GetWriteWatch
    */
    бцел ДайОбзорЗаписи(ППамять флаги, in ук базАдр, in т_мера размРег, ук* адры, inout бцел* счёт, out бцел* гранулярность);
    /**
    * ResetWriteWatch
    */
    бцел СбросьОбзорЗаписи(ук базАдр, т_мера размРег);
    /**
    * IsBadCodePtr
    */
    бул ПлохойУкНаКод(ук проц);
    /**
    * IsBadReadPtr
    */
    бул ПлохойЧтенУк(ук первБайтБлока, бцел размБлока);
    /**
    * IsBadWritePtr
    */
    бул ПлохойЗапУк(ук первБайтБлока, бцел размБлока);
    /**
    * IsBadStringPtrA
    */
    бул ПлохойСтрУк(ткст0 т, бцел разм);
    /**
    * IsBadStringPtrW
    */
    бул ПлохойШСтрУк(шткст0 т, бцел разм);
    /**
   * RtlMoveMemory
    */
    проц ПереместиПамять(ук куда, ук откуда, т_мера длина);
    /**
    * RtlSecureZeroMemory
    */
    //ук ОбнулиПамятьБезоп(ук укз, т_мера разм);
    /**
   *  RtlZeroMemory
    */
    проц ОбнулиПамять(ук где, т_мера разм);

//МАППИНГ
    /**
    * OpenFileMappingA
    */
    ук ОткройМаппингФайлаА(ППамять желДоступ, бул наследовать, ткст имяМаппинга);
    /**
    * OpenFileMappingW
    */
    ук ОткройМаппингФайла(ППамять желДоступ, бул наследовать, ткст имяМаппинга);
    /**
    * MapViewOfFile
    */
    ук ВидФайлаВКарту(ук объектФМап, ППамять желатДоступ, бцел фСмещВ, бцел фСмещН, бцел члоБайтовДляМап);
    /**
    * MapViewOfFileEx
    */
    ук ВидФайлаВКартуДоп(ук объектФМап, ППамять желатДоступ, бцел фСмещВ, бцел фСмещН, бцел члоБайтовДляМап, ук адрОвы);
    /**
    * FlushViewOfFile
    */
    бул СлейВидФайла(ук адрОвы, бцел члоСливБайт);
    /**
    * UnmapViewOfFile
    */
    бул ВидФайлаИзКарты(ук адрОвы);

//ОКНА
    /**
    * UpdateWindow
    */
    бул ОбновиОкно(ук ок);
    /**
    * SetActiveWindow
    */
    ук УстановиАктивноеОкно(ук ок);
    /**
    * GetForegroundWindow
    */
    ук ДайФоновоеОкно();
    /**
    * PaintDesktop
    */
    бул РисуйРабСтол(ук ку);
    /**
    * SetForegroundWindow
    */
    бул УстановиФоновоеОкно(ук ок);
    /**
    * WindowFromDC
    */
    ук ОкноИзКУ(ук ку);
    /**
    * GetDC
    */
    ук ДайКУ(ук ок);
    /**
    * GetDCEx
    */
    ук ДайКУДоп(ук ок, ук регКлип, ПКУДопФ флаги);
    /**
    * GetWindowDC
    */
    ук ДайКУОкна(ук ок);
    /**
    * ReleaseDC
    */
    цел ОтпустиКУ(ук ок, ук ку);
    /**
    * BeginPaint
    */
    ук НачниРис(ук ок, РИССТРУКТ* рис);
    /**
    * EndPaint
    */
    бул ЗавершиРис(ук ок, РИССТРУКТ * рис);
    /**
    * GetUpdateRect
    */
    бул ДайПрямОбнова(ук ок, ПРЯМ *пр, бул стереть);
    /**
    * GetUpdateRgn
    */
    цел ДайРгнОбнова(ук ок, ук ргн, бул стереть);
    /**
    * SetWindowRgn
    */
    цел УстановиРгнОкна(ук ок, ук рг, бул перерисовать);
    /**
    * GetWindowRgn
    */
    цел ДайРгнОкна(ук ок, ук ргн);
    /**
    * ExcludeUpdateRgn
    */
    цел ИсключиРгнОбнова(ук ку, ук ок);
    /**
    * InvalidateRect
    */
    бул ИнвалидируйПрям(ук ок, ПРЯМ *пр, бул стереть);
    /**
    * ValidateRect
    */
    бул ВалидируйПрям(ук ок, ПРЯМ *пр);
    /**
    * InvalidateRgn
    */
    бул ИнвалидируйРгн(ук ок, ук ргн, бул стереть);
    /**
    * ValidateRgn
    */
    бул ВалидируйРгн(ук ок, ук ргн);
    /**
    * RedrawWindow
    */
    бул ПерерисуйОкно(ук ок, ПРЯМ *обн, ук ргнОб, ПОкПерерис фОкПерерис);

//СОКЕТ

    /**
    * htons
    */
    бкрат х8сбк(бкрат x);
    /**
    * htonl
    */
    бцел х8сбц(бцел x);
    /**
    * ntohs
    */
    бкрат с8хбк(бкрат x);
    /**
    * ntohl
    */
    бцел с8хбц(бцел x);
    /**
    * ххххххххххххх
    */
    проц УД_УДАЛИ(СОКЕТ уд, набор_уд* набор);
    /**
    * ххххххххххххх
    */
    цел УД_УСТАНОВЛЕН(СОКЕТ уд, набор_уд* набор);
    /**
    * ххххххххххххх
    */
    проц УД_УСТАНОВИ(СОКЕТ уд, набор_уд* набор);
    /**
    * ххххххххххххх
    */
    проц УД_ОБНУЛИ(набор_уд* набор);
    /**
    * WSAStartup
    */
    цел ВСАСтарт(крат требВерсия, ВИНСОКДАН* всадан);
    /**
    * WSACleanup
    */
    цел ВСАЧистка();
    /**
    * WSAGetLastError
    */
    цел ВСАДайПоследнююОшибку();
    /**
    * socket
    */
    СОКЕТ сокет(ПСемействоАдресов са, ПТипСок тип, ППротокол протокол);
    /**
    * ioctlsocket
    */
    цел ввктлсок(СОКЕТ с, цел кмд, бцел* аргук);
    /**
    * bind
    */
    цел свяжисок(СОКЕТ с, адрессок* имя, цел длинаим);
    /**
    * connect
    */
    цел подключи(СОКЕТ с, адрессок* имя, цел длиннаим);
    /**
    * listen
    */
    цел слушай(СОКЕТ с, цел бэклог);
    /**
    * accept
    */
    СОКЕТ пусти(СОКЕТ с, адрессок* адр, цел *длинадр);
    /**
    * closesocket
    */
    цел закройсок(СОКЕТ с);
    /**
    * shutdown
    */
    цел экстрзак(СОКЕТ с, ПЭкстрЗакрытиеСокета как);
    /**
    * getpeername
    */
    цел дайимяпира(СОКЕТ с, адрессок* имя,  цел * длинаим);
    /**
    * getsockname
    */
    цел дайимясок(СОКЕТ с, адрессок* адр,  цел * длинаим);
    /**
    * send
    */
    цел шли(СОКЕТ с, ук буф, цел длин, ПФлагиСокета флаги);
    /**
    * sendto
    */
    цел шли_на(СОКЕТ с, ук буф, цел длин, ПФлагиСокета флаги, адрессок* кому, цел длинаприём);
    /**
    * recv
    */
    цел прими(СОКЕТ с, ук буф, цел длин, ПФлагиСокета флаги);
    /**
    * recvfrom
    */
    цел прими_от(СОКЕТ с, ук буф, цел длин, ПФлагиСокета флаги, адрессок* от_кого,  цел * длинаистока);
    /**
    * getsockopt
    */
    цел дайопцсок(СОКЕТ с, цел уровень, цел имяопц, ук значопц,  цел * длинаопц);
    /**
    * setsockopt
    */
    цел установиопцсок(СОКЕТ с, цел уровень, цел имяопц, ук значопц, цел длинаопц);
    /**
    * inet_addr
    */
    бцел адр_инет(ткст т);
    /**
    * select
    */
    цел выбери(цел нуд, набор_уд* читнуд, набор_уд* запнуд, набор_уд* ошнуд, значврем* таймаут);
    /**
    * inet_ntoa
    */
    ткст инетс8а(адрес_ин иа);
    /**
    * gethostbyname
    */
    хостзап* дайхостпоимени(ткст имя);
    /**
    * gethostbyaddr
    */
    хостзап* дайхостпоадресу(ук адр, цел длин, цел тип);
    /**
    * getprotobyname
    */
    протзап* дайпротпоимени(ткст имя);
    /**
    * getprotobynumber
    */
    протзап* дайпротпономеру(цел номер);
    /**
    * getservbyname
    */
    служзап* дайслужбупоимени(ткст имя, ткст протокол);
    /**
    * getservbyport
    */
    служзап* дайслужбупопорту(цел порт, ткст протокол);
    /**
    * gethostname
    */
    цел дайимяхоста(ткст имя, цел длинаим);
    /**
    * getaddrinfo
    */
    цел дайадринфо(ткст имяузла, ткст имяслуж, адринфо* хинты, адринфо** рез);
    /**
    * freeaddrinfo
    */
    проц высвободиадринфо(адринфо* аи);
    /**
    * getnameinfo
    */
    цел дайинфобимени(адрессок* ас, т_длинсок длинсок, ткст хост, бцел длинхост, ткст серв, бцел длинсерв, ПИмИнфо флаги);


///КОМ
    /**
    * FAILED
    */
    бул НЕУД(цел статус);
    /**
    * SUCCEEDED
    */
    бул УД(цел статус);
    /**
    * CoBuildVersion
    */
    бцел ВерсияПостройкиКо();
    /**
    * StringFromGUID2
    */
    цел ТкстИзГУИД2(ГУИД *удгуид, ткст уш, цел кбМакс);
    /**
    * CoInitialize
    */
    цел ИнициализуйКо(ук резерв);
    /**
    * CoInitializeEx
    */
    цел ИнициализуйКоДоп(ук резерв, ПИницКо флаг);
    /**
    * CoUninitialize
    */
    проц ДеинициализуйКо();
    /**
    * CoGetCurrentProcess
    */
    бцел ДайТекущийПроцессКо();
    /**
    * CoCreateGuid
    */
    цел СоздайГуидКо(out ГУИД уГуид);
    /**
    * ProgIDFromCLSID
    */
    цел ПрогИДИзКЛСИД(ref ГУИД клсид, out шим* прогИд);
    /**
    * CLSIDFromProgID
    */
    цел КЛСИДИзПрогИД(in шим* прогИд, out ГУИД клсид);
    /**
    * CLSIDFromProgIDEx
    */
    цел КЛСИДИзПрогИДДоп(in шим* прогИд, out ГУИД клсид);
    /**
    * CoCreateInstance
    */
    цел СоздайЭкземплярКо(ref ГУИД рклсид, Инкогнито анонВнешн, бцел контекстКл, ref ГУИД риид, ук* ув);
    /**
    * CoCreateInstanceEx
    */
    цел СоздайЭкземплярКоДоп(ref ГУИД рклсид, Инкогнито анонВнешн, бцел контекстКл, КОСЕРВЕРИНФО* сервИнф, бцел счёт, МУЛЬТИ_ОИ* результы);
    /**
    * CoGetClassObject
    */
    цел ДайОбъектКлассаКо(ref ГУИД рклсид, бцел контекстКл, ук резерв, ref ГУИД риид, ук* ув);
    /**
    * CoTaskMemAlloc
    */
    ук РазместиПамЗадачиКо(т_мера разм);
    /**
    * CoTaskMemRealloc
    */
    ук ПереместиПамЗадачиКо(ук вв, т_мера разм);
    /**
    * CoTaskMemFree
    */
    проц ОсвободиПамЗадачиКо(ук в);
    /**
    * RegisterActiveObject
    */
    цел РегистрируйАктивныйОбъект(Инкогнито инк, ref ГУИД клсид, бцел флаги, out бцел рег);
    /**
    * RevokeActiveObject
    */
    цел РевоцируйАктивныйОбъект(бцел рег, ук резерв);
    /**
    * GetActiveObject
    */
    цел ДайАктивныйОбъект(ref ГУИД клсид, ук резерв, out Инкогнито инк);

///БЕЗОПМАС
    /**
    * SafeArrayAllocDescriptor
    */
    цел РазместиДескрипторБезопмаса(бцел члоИзм, out БЕЗОПМАС* укнаВыв);
    /**
    * SafeArrayAllocDescriptorEx
    */
    цел РазместиДескрипторБезопмасаДоп(бкрат вт, бцел члоИзм, out БЕЗОПМАС* укнаВыв);
    /**
    * SafeArrayAllocData
    */
    цел РазместиДанныеБезопмаса(БЕЗОПМАС* бм);
    /**
    * SafeArrayCreate
    */
    БЕЗОПМАС* СоздайБезопмас(бкрат вт, бцел члоИзм, ГРАНБЕЗОПМАСА* бмГран);
    /**
    * SafeArrayCreateEx
    */
    БЕЗОПМАС* СоздайБезопмасДоп(бкрат вт, бцел члоИзм, ГРАНБЕЗОПМАСА* бмГран, ук вЭкстра);
    /**
    * SafeArrayCopyData
    */
    цел КопируйДанныеБезопмаса(БЕЗОПМАС* бмИсх, БЕЗОПМАС* бмПрий);
    /**
    * SafeArrayDestroyDescriptor
    */
    цел УничтожьДескрипторБезопмаса(БЕЗОПМАС* бм);
    /**
    * SafeArrayDestroyData
    */
    цел УничтожьДанныеБезопмаса(БЕЗОПМАС* бм);
	/**
    *SafeArrayDestroy
    */
    цел УничтожьБезопмас(БЕЗОПМАС* бм);
	/**
    *SafeArrayRedim
    */
    цел ИзмениГраницуБезопмаса(БЕЗОПМАС* бм, ГРАНБЕЗОПМАСА* бмНовГран);
	/**
    *SafeArrayGetDim
    */
    бцел ДайЧлоИзмеренийБезопмаса(БЕЗОПМАС* бм);
	/**
    *SafeArrayGetElemsize
    */
    бцел ДайРазмерЭлементовБезопмаса(БЕЗОПМАС* бм);
	/**
    *SafeArrayGetUBound
    */
    цел ДайВПределБезопмаса(БЕЗОПМАС* бм, бцел члоИзм, out цел вПредел);
	/**
    *SafeArrayGetLBound
    */
    цел ДайНПределБезопмаса(БЕЗОПМАС* бм, бцел члоИзм, out цел нПредел);
	/**
    *SafeArrayLock
    */
    цел БлокируйБезопмас(БЕЗОПМАС* бм);
	/**
    *SafeArrayUnlock
    */
    цел РазблокируйБезопмас(БЕЗОПМАС* бм);
	/**
    *SafeArrayAccessData
    */
    цел ДоступКДаннымБезопмаса(БЕЗОПМАС* бм, ук* данные);
	/**
    *SafeArrayUnaccessData
    */
    цел ОтступОтДаныхБезопмаса(БЕЗОПМАС* бм);
	/**
    *SafeArrayGetElement
    */
    цел ДайЭлементБезопмаса(БЕЗОПМАС* бм,  цел * индексы, ук в);
	/**
    *SafeArrayPutElement
    */
    цел ПоместиЭлементВБезопмас(БЕЗОПМАС* бм,  цел * индексы, ук в);
	/**
    *SafeArrayCopy
    */
    цел КопируйБезопмас(БЕЗОПМАС* бм, out БЕЗОПМАС* бмВыв);
	/**
    *SafeArrayPtrOfIndex
    */
    цел УкНаИндексБезопмаса(БЕЗОПМАС* бм,  цел * индексы, ук* данные);
	/**
    *SafeArraySetRecordInfo
    */	
	цел УстИнфОЗаписиБезопмаса(sys.WinStructs.БЕЗОПМАС* бм, sys.WinIfaces.ИИнфОЗаписи инфоз);
	/**
    *SafeArrayGetRecordInfo
    */
    цел ДайИнфОЗаписиБезопмаса(БЕЗОПМАС* бм, out ИИнфОЗаписи инфоз);
	/**
    *SafeArraySetIID
    */
    цел УстановиИИДБезопмаса(БЕЗОПМАС* бм, ref ГУИД гуид);
	/**
    *SafeArrayGetIID
    */
    цел ДайИИДБезопмаса(БЕЗОПМАС* бм, out ГУИД гуид);
	/**
    *SafeArrayGetVartype
    */
    цел ДайВартипБезопмаса(БЕЗОПМАС* бм, бкрат вт);
	/**
    *SafeArrayCreateVector
    */
    БЕЗОПМАС* СоздайВекторБезопмаса(бкрат вт, цел нПредел, бцел элементы);
	/**
    *SafeArrayCreateVectorEx
    */
    БЕЗОПМАС* СоздайВекторБезопмасаДоп(бкрат вт, цел нПредел, бцел элементы, ук экстра);

///ДЕСЯТОК
	/**
    * VarDecFromUI4
    */
    цел ДесВарИзБцел(бцел бцВхо, out ДЕСЯТОК десВых);
	/**
    * VarDecFromI4
    */
    цел ДесВарИзЦел(цел цВхо, out ДЕСЯТОК десВых);
	/**
    * VarDecFromUI8
    */
    цел ДесВарИзБдол(бдол бдВхо, out ДЕСЯТОК десВых);
	/**
    * VarDecFromI8
    */
    цел ДесВарИзДол(дол дВхо, out ДЕСЯТОК десВых);
	/**
    * VarDecFromR4
    */
    цел ДесВарИзПлав(плав вх, out ДЕСЯТОК дес);
	/**
    * VarDecFromR8
    */
    цел ДесВарИзДво(дво вх,out ДЕСЯТОК дес);
	/**
    * VarDecFromStr
    */
    цел ДесВарИзТкстш0(in шим* ткс, бцел лкид, бцел флаги, out ДЕСЯТОК дес);
	/**
    * VarBstrFromDec
    */
    цел БткстВарИзДес(ДЕСЯТОК *дес, бцел лкид, бцел флаги, out шим* стр);
	/**
    * VarUI4FromDec
    */
    цел БцелВарИзДес(ref ДЕСЯТОК дес, out бцел ц);
	/**
    * VarI4FromDec
    */
    цел ЦелВарИзДес(ref ДЕСЯТОК дес, out цел зн );
	/**
    * VarUI8FromDec
    */
    цел БдолВарИзДес(ref ДЕСЯТОК дес, out бдол зн);
	/**
    * VarI8FromDec
    */
    цел ДолВарИзДес(ref ДЕСЯТОК дес, out дол зн);
	/**
    * VarR4FromDec
    */
    цел ПлавВарИзДес(ref ДЕСЯТОК дес, out плав зн);
	/**
    * VarR8FromDec
    */
    цел ДвоВарИзДес(ДЕСЯТОК *дес, out дво зн);
	/**
    * VarDecAdd
    */
    цел ДесВарСложи(ref ДЕСЯТОК дес1, ref ДЕСЯТОК дес2, out ДЕСЯТОК рез);
	/**
    * VarDecSub
    */
    цел ДесВарОтними(ref ДЕСЯТОК дес1, ref ДЕСЯТОК дес2, out ДЕСЯТОК рез);
	/**
    * VarDecMul
    */
    цел ДесВарУмножь(ref ДЕСЯТОК дес1, ref ДЕСЯТОК дес2, out ДЕСЯТОК рез);
	/**
    * VarDecDiv
    */
    цел ДесВарДели(ref ДЕСЯТОК дес1, ref ДЕСЯТОК дес2, out ДЕСЯТОК рез);
	/**
    * VarDecRound
    */
    цел ДесВарОкругли(ref ДЕСЯТОК дес1, цел дес, out ДЕСЯТОК рез);
	/**
    * VarDecAbs
    */
    цел ДесВарАбс(ref ДЕСЯТОК дес1,  out ДЕСЯТОК рез);
	/**
    * VarDecFix
    */
    цел  ДесВарФиксируй(ref ДЕСЯТОК дес1,  out ДЕСЯТОК рез);
	/**
    * VarDecInt
    */
    цел ДесВарИнт(ref ДЕСЯТОК дес1,  out ДЕСЯТОК рез);
	/**
    * VarDecNeg
    */
    цел  ДесВарОтриц(ДЕСЯТОК *дес1, ДЕСЯТОК рез);
	/**
    * VarDecCmp
    */
    цел ДесВарСравни(ref ДЕСЯТОК дес1, out ДЕСЯТОК рез);

///ВАРИАНТ
	/**
    * VariantInit
    */
    проц ИницВариант(ref ВАРИАНТ вар);
	/**
    * VariantClear
    */
    цел СотриВариант(ref ВАРИАНТ вар);
	/**
    * VariantCopy
    */
    цел КопируйВариант(ref ВАРИАНТ варгЦель, ref ВАРИАНТ варгИст);
	/**
    * VarAdd
    */
    цел СложиВар(ref ВАРИАНТ варЛев, ref ВАРИАНТ варПрав, out ВАРИАНТ варРез);
	/**
    * VarAnd
    */
    цел ИВар(ref ВАРИАНТ варЛев, ref ВАРИАНТ варПрав, out ВАРИАНТ варРез);
	/**
    * VarCat
    */
    цел СоединиВар(ref ВАРИАНТ варЛев, ref ВАРИАНТ варПрав, out ВАРИАНТ варРез);
	/**
    * VarDiv
    */
    цел ДелиВар(ref ВАРИАНТ варЛев, ref ВАРИАНТ варПрав, out ВАРИАНТ варРез);
	/**
    * VarMul
    */
    цел УмножьВар(ref ВАРИАНТ варЛев, ref ВАРИАНТ варПрав, out ВАРИАНТ варРез);
	/**
    * VarOr
    */
    цел ИлиВар(ref ВАРИАНТ варЛев, ref ВАРИАНТ варПрав, out ВАРИАНТ варРез);
	/**
    * VarSub
    */
    цел ОтнимиВар(ref ВАРИАНТ варЛев, ref ВАРИАНТ варПрав, out ВАРИАНТ варРез);
	/**
    * VarXor
    */
    цел ИИлиВар(ref ВАРИАНТ варЛев, ref ВАРИАНТ варПрав, out ВАРИАНТ варРез);
	/**
    * VarCmp
    */
    цел СравниВар(ref ВАРИАНТ варЛев, ref ВАРИАНТ варПрав, бцел лкид, бцел флаги);
	/**
    * VarMod
    */
    цел МодВар(ref ВАРИАНТ варЛев, ref ВАРИАНТ варПрав, out ВАРИАНТ варРез);
	/**
    * VariantChangeType
    */
    цел ИзмениТипВарианта(ref ВАРИАНТ приёмник, ref ВАРИАНТ источник, ПВар флаги, бкрат вт );
	/**
    * VariantChangeTypeEx
    */
    цел ИзмениТипВариантаДоп(ref ВАРИАНТ приёмник, ref ВАРИАНТ источник, бцел лкид, ПВар флаги, бкрат вт);

///ТЕКСТ
	/**
    * SysAllocString
    */
    шим* СисРазместиТкст(in шим* ш);
	/**
    * SysReAllocString
    */
    цел СисПереместиТкст(шим* а, in шим* ш);
	/**
    * SysAllocStringLen
    */
    шим* СисРазместиТкстДлин(in шим* ш, бцел длин);
	/**
    * SysReAllocStringLen
    */
    цел СисПереместиТкстДлин(шим* а, in шим* ш, бцел длин);
	/**
    * SysFreeString
    */
    проц СисОсвободиТкст(шим* т);
	/**
    * SysStringLen
    */
    бцел СисТкстДлин(шим* ш);
	/**
    * SysStringByteLen
    */
    бцел СисТкстБайтДлин(шим* т);
	/**
    * SysAllocStringByteLen
    */
    шим* СисРазместиТкстБайтДлин(in ббайт* ш, бцел длин);
	/**
    * WideCharToMultiByte
    */
    цел ШирСимВМультиБайт(ПКодСтр кодСтр, ПШирСим флаги, шткст0 укШирСим, цел члоСимШир, ткст0 укНовСтрБуф, цел размНовСтрБуф, ткст0 симНекартДефАдр, бул адрФлага);
	/**
    * MultiByteToWideChar
    */
	цел МультиБайтВШирСим(ПКодСтр кодСтр, бцел флаги, ткст0 укМультиБайт, цел члоСим, шткст0 укНовСтрБуф, цел размНовСтрБуф);

///ОШИБКИ
	/**
    * SetErrorInfo
    */
    цел УстановиИнфОбОш(бцел резерв, ИИнфОбОш ошинф);
	/**
    * GetErrorInfo
    */
    цел ДайИнфОбОш(бцел резерв, ИИнфОбОш ошинф);
	/**
    * CreateErrorInfo
    */
    цел СоздайИнфОбОш(out ИИнфОбОш ошинф);
	/**
    * GetLastError
    */
    бцел ДайПоследнююОшибку();

///КОНСОЛЬ

	/**
	*ReadConsoleA
	*/
	бул ЧитайКонсольА(ук консввод, ук буф, бцел члоЧитаемСим, бцел* члоСчитСим, ук резерв);
	/**
	*ReadConsoleW
	*/
	бул ЧитайКонсоль(ук консввод, ук буф, бцел члоЧитаемСим, бцел* члоСчитСим, ук резерв);
	/**
	*WriteConsoleA
	*/
	бул ПишиКонсольА(ук консвыв, in  ук буф, бцел члоЗаписываемАтров, бцел* члоЗаписанАтров, ук резерв);
	/**
	*WriteConsoleW
	*/
	бул ПишиКонсоль(ук консвыв, in  ук буф, бцел члоЗаписываемАтров, бцел* члоЗаписанАтров, ук резерв);
	/**
    * SetConsoleMode
    */
    бул УстановиРежимКонсоли(ук конс, ПРежимКонсоли режим);
	/**
    * GetConsoleMode
    */
    бул ДайРежимКонсоли(ук конс, ПРежимКонсоли режим);
	/**
    * AttachConsole
    */
    бул ПрикрепиКонсоль(бцел идПроц);
	/**
    * PeekConsoleInputA
    */
    бул ВозьмиВводВКонсольА(ук ввод, ЗАПВВОДА* буф, бцел длина, бцел* члоСчитанныхСобытий);
	/**
    * PeekConsoleInputW
    */
    бул ВозьмиВводВКонсоль(ук ввод, ЗАПВВОДА* буф, бцел длина, бцел* члоСчитанныхСобытий);
	/**
    * ReadConsoleInputA
    */
    бул ЧитайВводВКонсольА(ук ввод, ЗАПВВОДА* буф, бцел длина, бцел* члоСчитанныхСобытий);
	/**
    * ReadConsoleInputW
    */
    бул ЧитайВводВКонсоль(ук ввод, ЗАПВВОДА* буф, бцел длина, бцел* члоСчитанныхСобытий);
	/**
    * WriteConsoleInputA
    */
    бул ПишиВводВКонсольА(ук ввод, ЗАПВВОДА* буф, бцел длина, бцел* члоСчитанныхСобытий);
	/**
    * WriteConsoleInputW
    */
    бул ПишиВводВКонсоль(ук ввод, ЗАПВВОДА* буф, бцел длина, бцел* члоСчитанныхСобытий);
	/**
    * GetConsoleScreenBufferInfo
    */
    бул ДайИнфОБуфЭкранаКонсоли(ук консВывод, ИНФОКОНСЭКРБУФ *консЭкрБуфИнфо) ;
	/**
    * SetConsoleTextAttribute
    */
    бул УстановиАтрибутыТекстаКонсоли(ук конс, ПТекстКонсоли атр );
	/**
    * SetConsoleCursorPosition
    */
    бул УстановиПозициюКурсораКонсоли(ук конс, КООРД поз);
	/**
    * ScrollConsoleScreenBufferA
    */
    бул ПрокрутиБуферЭкранаКонсолиА(ук конс, in МПРЯМ *прокрПрям, in МПРЯМ *обрПрям, КООРД начПриём, in ИНФОСИМ *зап);
	/**
    * ScrollConsoleScreenBufferW
    */
    бул ПрокрутиБуферЭкранаКонсоли(ук конс, in МПРЯМ *прокрПрям, in МПРЯМ *обрПрям, КООРД начПриём, in ИНФОСИМ *зап) ;
	/**
    * SetConsoleCP
    */
    бул УстановиКСКонсоли(ПКодСтр кодСтр);
	/**
    * SetConsoleActiveScreenBuffer
    */
    бул УстановиАктивныйБуферКонсоли(ук консВывод);
	/**
    * GetConsoleCP
    */
    ПКодСтр ДайКСКонсоли();
	/**
    * GetConsoleOutputCP
    */
    ПКодСтр ДайКСВыводаКонсоли();
	/**
    * SetConsoleOutputCP
    */
    бул УстановиКСВыводаКонсоли(ПКодСтр кстр);
	/**
    * FreeConsole
    */
    бул ОсвободиКонсоль();
	/**
    * SetConsoleTitleA
    */
    бул УстановиЗагКонсолиА(ткст загКонсоли);
	/**
    * SetConsoleTitleW
    */
    бул УстановиЗагКонсоли(ткст загКонсоли);
	/**
    * FlushConsoleInputBuffer
    */
    бул ОчистиБуферВводаКонсоли(ук консВвод);
	/**
    * SetConsoleScreenBufferSize
    */
    бул УстановиРазмерБуфераЭкранаКонсоли(ук вывод, КООРД размер) ;
	/**
    * SetConsoleCursorInfo
    */
    бул УстановиИнфОКурсореКонсоли(ук вывод, in ИНФОКОНСКУРСОР *инфо);
	/**
    * SetConsoleWindowInfo
    */
    бул УстановиИнфОбОкнеКонсоли(ук вывод, бул абс, in МПРЯМ *разм);
	/**
    * ЧитайКонсольныйВыводА
    */
    бул  ЧитайКонсольныйВыводА(ук КОНСВЫВОД, ИНФОСИМ* буф, КООРД буфРазм, КООРД буфКоорд, МПРЯМ* регЧтен);
	/**
    * ReadConsoleOutputW
    */
    бул  ЧитайКонсольныйВывод(ук КОНСВЫВОД, ИНФОСИМ* буф, КООРД буфРазм, КООРД буфКоорд, МПРЯМ* регЧтен);
    
	/**
    * WriteConsoleOutputA
    */
	бул ПишиНаВыводКонсолиА(ук КОНСВЫВОД, in ИНФОСИМ *буф, КООРД буфРазм, КООРД буфКоорд, МПРЯМ *регЗап);
	/**
    * WriteConsoleOutputW
    */
	бул ПишиНаВыводКонсоли(ук КОНСВЫВОД, in ИНФОСИМ *буф, КООРД буфРазм, КООРД буфКоорд, МПРЯМ *регЗап);
    
	/**
    * ReadConsoleOutputCharacterA
    */
    бул ЧитайСимИзВыводаКонсолиА(ук КОНСВЫВОД, сим *симв, бцел длина, КООРД коордЧтен, бцел *члоСчитСим);
	/**
    * ReadConsoleOutputCharacterW
    */
    бул ЧитайСимИзВыводаКонсоли(ук КОНСВЫВОД, шим *симв, бцел длина, КООРД коордЧтен, бцел *члоСчитСим);
    
	/**
    * ReadConsoleOutputAttribute
    */
	бул ЧитайАтрибутВыводаКонсоли(ук КОНСВЫВОД, бкрат *атр, бцел длина, КООРД коордЧтен, бцел *члоСчитАтров);
	/+
	/**
    * WriteConsoleOutputAttribute
    */
	бул ПишиАтрибутВыводаКонсоли(ук КОНСВЫВОД, сим *симв, бцел длина, КООРД коордЗап, бцел *члоЗаписанАтров;
	/**
    * FillConsoleOutputAttribute
    */
	бул АтрибутЗаливкиВыводаКонсоли(ук конс, ПТекстКонсоли атр, бцел длин, КООРД коорд, бцел* члоЗапАтров);
	+/
//////////////////////////////////
 	/**
    * GetStartupInfoW
    */   
    проц ДайИнфоСтарта(ИНФОСТАРТА* ис);
/////////////////////////////////	
	/**
	*GetLocaleInfoW
	*/
	цел ДайИнфОЛокале(ЛКИД лок, т_локаль л , шткст0 имя, цел ттт);
	/**
	*SetLocaleInfoW
	*/
	бул УстановиИнфОЛокале(ЛКИД лок, т_локаль л, ткст ткт);
	/**
	*GetEnvironmentVariableA
	*/
	бцел ДайПеременнуюСредыА(ткст0 перм, ткст0 знач, бцел разм);
	/**
	*GetEnvironmentVariableW
	*/
	бцел ДайПеременнуюСреды(шткст0 перм, шткст0 знач, бцел разм);
	/**
	*SetEnvironmentVariableA
	*/
	бул УстановиПеременнуюСредыА(ткст перм, ткст знач);		
	/**
	*SetEnvironmentVariableW
	*/
	бул УстановиПеременнуюСреды(ткст перм, ткст знач);
	/**
	*GetEnvironmentStringsW
	*/
	шткст0 ДайСтрокуСреды();
	/**
	*FreeEnvironmentStringsW
	*/
	бул ОсвободиСтрокуСреды(шткст0 ткст);
