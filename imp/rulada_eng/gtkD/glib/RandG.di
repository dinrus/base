
module gtkD.glib.RandG;

public  import gtkD.gtkc.glibtypes;

private import gtkD.gtkc.glib;
private import gtkD.glib.ConstructionException;






/**
 * Description
 * The following functions allow you to use a portable, fast and good
 * pseudo-random number generator (PRNG). It uses the Mersenne Twister
 * PRNG, which was originally developed by Makoto Matsumoto and Takuji
 * Nishimura. Further information can be found at www.math.keio.ac.jp/~matumoto/emt.html.
 * If you just need a random number, you simply call the
 * g_random_* functions, which will create a globally
 * used GRand and use the according g_rand_* functions
 * internally. Whenever you need a stream of reproducible random numbers, you
 * better create a GRand yourself and use the g_rand_*
 * functions directly, which will also be slightly faster. Initializing a GRand
 * with a certain seed will produce exactly the same series of random numbers
 * on all platforms. This can thus be used as a seed for e.g. games.
 * The g_rand*_range functions will return high quality
 * equally distributed random numbers, whereas for example the
 * (g_random_int()%max) approach often doesn't
 * yield equally distributed numbers.
 * GLib changed the seeding algorithm for the pseudo-random number
 * generator Mersenne Twister, as used by GRand
 * and GRandom. This was necessary, because some
 * seeds would yield very bad pseudo-random streams. Also the
 * pseudo-random integers generated by
 * g_rand*_int_range() will have a
 * slightly better equal distribution with the new version of GLib.
 * The original seeding and generation algorithms, as found in GLib 2.0.x,
 * can be used instead of the new ones by setting the environment variable
 * G_RANDOM_VERSION to the value of '2.0'. Use the
 * GLib-2.0 algorithms only if you have sequences of numbers generated
 * with Glib-2.0 that you need to reproduce exactly.
 */
public class RandG
{
	
	/** the main Gtk struct */
	protected GRand* gRand;
	
	
	public GRand* getRandGStruct();
	
	
	/** the main Gtk struct as a void* */
	protected void* getStruct();
	
	/**
	 * Sets our main struct and passes it to the parent class
	 */
	public this (GRand* gRand);
	
	/**
	 */
	
	/**
	 * Creates a new random number generator initialized with seed.
	 * Params:
	 * seed =  a value to initialize the random number generator.
	 * Throws: ConstructionException GTK+ fails to create the object.
	 */
	public this (uint seed);
	
	/**
	 * Creates a new random number generator initialized with seed.
	 * Since 2.4
	 * Params:
	 * seed =  an array of seeds to initialize the random number generator.
	 * Throws: ConstructionException GTK+ fails to create the object.
	 */
	public this (uint[] seed);
	
	/**
	 * Creates a new random number generator initialized with a seed taken
	 * either from /dev/urandom (if existing) or from
	 * the current time (as a fallback).
	 * Throws: ConstructionException GTK+ fails to create the object.
	 */
	public this ();
	
	/**
	 * Copies a GRand into a new one with the same exact state as before.
	 * This way you can take a snapshot of the random number generator for
	 * replaying later.
	 * Since 2.4
	 * Returns: the new GRand.
	 */
	public RandG copy();
	
	/**
	 * Frees the memory allocated for the GRand.
	 */
	public void free();
	
	/**
	 * Sets the seed for the random number generator GRand to seed.
	 * Params:
	 * seed =  a value to reinitialize the random number generator.
	 */
	public void setSeed(uint seed);
	
	/**
	 * Initializes the random number generator by an array of
	 * longs. Array can be of arbitrary size, though only the
	 * first 624 values are taken. This function is useful
	 * if you have many low entropy seeds, or if you require more then
	 * 32bits of actual entropy for your application.
	 * Since 2.4
	 * Params:
	 * seed =  array to initialize with
	 */
	public void setSeedArray(uint[] seed);
	
	/**
	 * Returns the next random guint32 from rand_ equally distributed over
	 * the range [0..2^32-1].
	 * Returns: A random number.
	 */
	public uint randInt();
	
	/**
	 * Returns the next random gint32 from rand_ equally distributed over
	 * the range [begin..end-1].
	 * Params:
	 * begin =  lower closed bound of the interval.
	 * end =  upper open bound of the interval.
	 * Returns: A random number.
	 */
	public int randIntRange(int begin, int end);

	/**
	 * Returns the next random gdouble from rand_ equally distributed over
	 * the range [0..1).
	 * Returns: A random number.
	 */
	public double randDouble();
	
	/**
	 * Returns the next random gdouble from rand_ equally distributed over
	 * the range [begin..end).
	 * Params:
	 * begin =  lower closed bound of the interval.
	 * end =  upper open bound of the interval.
	 * Returns: A random number.
	 */
	public double randDoubleRange(double begin, double end);
	
	/**
	 * Sets the seed for the global random number generator, which is used
	 * by the g_random_* functions, to seed.
	 * Params:
	 * seed =  a value to reinitialize the global random number generator.
	 */
	public static void randomSetSeed(uint seed);
	
	/**
	 * Return a random guint32 equally distributed over the range
	 * [0..2^32-1].
	 * Returns: A random number.
	 */
	public static uint randomInt();
	
	/**
	 * Returns a random gint32 equally distributed over the range
	 * [begin..end-1].
	 * Params:
	 * begin =  lower closed bound of the interval.
	 * end =  upper open bound of the interval.
	 * Returns: A random number.
	 */
	public static int randomIntRange(int begin, int end);
	
	/**
	 * Returns a random gdouble equally distributed over the range [0..1).
	 * Returns: A random number.
	 */
	public static double randomDouble();
	
	/**
	 * Returns a random gdouble equally distributed over the range [begin..end).
	 * Params:
	 * begin =  lower closed bound of the interval.
	 * end =  upper open bound of the interval.
	 * Returns: A random number.
	 */
	public static double randomDoubleRange(double begin, double end);
}
