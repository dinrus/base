DCC = dmd
CC = gcc
AR  = ar
OBJS = kong/internal/mine.o kong/internal/image_interface.o kong/process.o kong/win32/DSO.o kong/PE/PE.o kong/hooking.o kong/internal/memory_region.o kong/internal/stdlib.o kong/internal/dynamic_object.o kong/ELF/hook_api.o kong/ELF/ELF.o kong/internal/hook_interface.o kong/linux/DSO.o kong/linux/memory_layout.o kong/linux/memory_protect.o kong/IA32/X86IL.o kong/IA32/hook_code.o kong/internal/image_reflect.o kong/PE/dummy.o kong/ELF/dummy.o 

RELEASE_LIB = kong.a
DEBUG_LIB   = kong_debug.a
THIS = makefile.linux.dmd

all: release

obj:
	$(DCC) $(FLAGS) -c kong/process.d -ofkong/process.o
	$(DCC) $(FLAGS) -c kong/hooking.d -ofkong/hooking.o
	$(DCC) $(FLAGS) -c kong/internal/image_reflect.d -ofkong/internal/image_reflect.o
	$(DCC) $(FLAGS) -c kong/internal/stdlib.d -ofkong/internal/stdlib.o
	$(DCC) $(FLAGS) -c kong/internal/memory_region.d -ofkong/internal/memory_region.o
	$(DCC) $(FLAGS) -c kong/internal/hook_interface.d -ofkong/internal/hook_interface.o
	$(DCC) $(FLAGS) -c kong/internal/dynamic_object.d -ofkong/internal/dynamic_object.o
	$(DCC) $(FLAGS) -c kong/internal/image_interface.d -ofkong/internal/image_interface.o
	$(DCC) $(FLAGS) -c kong/ELF/hook_api.d -ofkong/ELF/hook_api.o
	$(DCC) $(FLAGS) -c kong/ELF/ELF.d -ofkong/ELF/ELF.o
	$(DCC) $(FLAGS) -c kong/PE/PE.d -ofkong/PE/PE.o
	$(DCC) $(FLAGS) -c kong/linux/DSO.d -ofkong/linux/DSO.o
	$(DCC) $(FLAGS) -c kong/linux/memory_layout.d  -ofkong/linux/memory_layout.o
	$(DCC) $(FLAGS) -c kong/linux/memory_protect.d -ofkong/linux/memory_protect.o
	$(DCC) $(FLAGS) -c kong/win32/DSO.d -ofkong/win32/DSO.o
	$(DCC) $(FLAGS) -c kong/IA32/hook_code.d -ofkong/IA32/hook_code.o
	$(DCC) $(FLAGS) -c kong/IA32/X86IL.d -ofkong/IA32/X86IL.o
	$(DCC) $(FLAGS) -c kong/internal/mine.d -ofkong/internal/mine.o
	$(DCC) $(FLAGS) -c kong/ELF/dummy.d -ofkong/ELF/dummy.o
	$(DCC) $(FLAGS) -c kong/PE/dummy.d -ofkong/PE/dummy.o


unit:
	make -f $(THIS) obj FLAGS=-g
	$(DCC) -g -L-ldl $(OBJS) kong/unit_test.d -ofunit_test


release:
	make -f $(THIS) obj FLAGS=-release
	$(AR) rcs $(RELEASE_LIB) $(OBJS)
	size kong.a
	
debug: 
	make -f $(THIS) obj FLAGS=-g
	$(AR) rcs $(DEBUG_LIB) $(OBJS)

$(RELEASE_LIB): release
$(DEBUG_LIB): debug

example: $(RELEASE_LIB)
	$(DCC) -release kong/examples/import_dephook.d $(RELEASE_LIB) -ofimport_dephook
	$(DCC) -release kong/examples/import_dump.d $(RELEASE_LIB) -ofimport_dump
	$(DCC) -release kong/examples/elf_dump.d $(RELEASE_LIB) -ofelf_dump

clean:
	rm -f $(OBJS) elf_dump import_dump import_dephook unit_test $(RELEASE_LIB) $(DEBUG_LIB)
