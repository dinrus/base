/** Арифметика арбитральной точности ('bignum') для процессоров без поддержки ассемблера
 *
 * Все функции оперируют над массивами единиц, первым сохраняетмя МЗБ (менее значимый бит).
 * Если есть целевой массив, он будет первым параметром.
 * На данный момент все эти функции подвержены изменению, и предназначены
 * только для внутреннего использования.
 * Этот модуль предназначени только для помощи в разработке высокоскоростных процедур
 * на на данный момент неподдерживаемых процессорах.
 * Версия X86 asm быстрее примерно в 30 раз, чем версия Ди(DMD).
 *
 */

module math.internal.BignumNoAsm;

public:
alias бцел БольшЦифра; // A Bignum is an array of BigDigits.

// Limits for when to switch between multИПlication algorithms.
enum : цел { KARATSUBALIMIT = 10 }; // Minimum value for which Karatsuba is worthwhile.
enum : цел { KARATSUBASQUARELIMIT=12 }; // Minimum value for which square Karatsuba is worthwhile


/** Multi-byte addition or subtraction
 *    приёмник[] = ист1[] + ист2[] + перенос (0 or 1).
 * or приёмник[] = ист1[] - ист2[] - перенос (0 or 1).
 * Возвращаетs перенос or borrow (0 or 1).
 * Набор op == '+' for addition, '-' for subtraction.
 */
бцел многобайтПрибавОтним(сим op)(бцел[] приёмник, бцел [] ист1, бцел [] ист2, бцел перенос);
/** приёмник[] += перенос, либо приёмник[] -= перенос.
 *  op must be '+' or '-'
 *  Returns final перенос or borrow (0 or 1)
 */
бцел многобайтИнкрПрисвой(сим op)(бцел[] приёмник, бцел перенос);

/** приёмник[] = ист[] << члобит
 *  члобит must be in the range 1..31
 */
бцел многобайтСдвигЛ(бцел [] приёмник, бцел [] ист, бцел члобит);

/** приёмник[] = ист[] >> члобит
 *  члобит must be in the range 1..31
 */
проц многобайтСдвигП(бцел [] приёмник, бцел [] ист, бцел члобит);

/** приёмник[] = ист[] * множитель + перенос.
 * Возвращаетs перенос.
 */
бцел многобайтУмнож(бцел[] приёмник, бцел[] ист, бцел множитель, бцел перенос);

/**
 * приёмник[] += ист[] * множитель + перенос(0..FFFF_FFFF).
 * Возвращаетs перенос out of MSB (0..FFFF_FFFF).
 */
бцел многобайтУмножПрибавь(сим op)(бцел [] приёмник, бцел[] ист, бцел множитель, бцел перенос);

/***
   Sets result = result[0..лев.length] + лев * прав

   It is defined in this way to allow cache-efficient multИПlication.
   This function is equivalent to:
    ----
    for (цел i = 0; i< прав.length; ++i) {
        приёмник[лев.length + i] = многобайтУмножПрибавь(приёмник[i..лев.length+i],
                лев, прав[i], 0);
    }
    ----
 */
проц многобайтУмножАккум(бцел [] приёмник, бцел[] лев, бцел [] прав);

/**  приёмник[] /= делитель.
 * переполнение is the начальное остаток, and must be in the range 0..делитель-1.
 */
бцел многобайтПрисвойДеление(бцел [] приёмник, бцел делитель, бцел переполнение);

// Набор приёмник[2*i..2*i+1]+=ист[i]*ист[i]
проц многобайтПрибавьДиагПлощ(бцел[] приёмник, бцел[] ист);

// Does half a square multИПly. (square = diagonal + 2*triangle)
проц многобайтПрямоугАккум(бцел[] приёмник, бцел[] x);

проц многобайтПлощадь(БольшЦифра[] результат, БольшЦифра [] x);
