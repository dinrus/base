module col.model.Keyed;

public import col.model.Iterator;

/**
 * Интефейс, определяющий объект, получающий доступ к значениям по ключу.
 */
interface СКлючом(К, З) : Ключник!(К, З), ЧистящийКлючи!(К, З)
{
    /**
     * Удалить значение по положению указанного ключа.
     *
     * Возвращает this.
     */
    СКлючом!(К, З) удалиПо(К ключ);

    /**
     * Удалить значение по положению указанного ключа.
     *
     * Возвращает this.
     *
     * былУдалён установлен в да, если этот элемент существовал и был удалён.
     */
    СКлючом!(К, З) удалиПо(К ключ, ref бул былУдалён);

    /**
     * Получить доступ к значению на основе ключа.
     */
    З opIndex(К ключ);

    /**
     * Присвоить значение на основе ключа.
     *
     * Используйте this, чтобы вставить пару ключ/значение в эту коллекцию.
     *
     * Помните, что некоторые контейнеры не используют ключи, определённые пользователем.
     * для таких контейнеров ключ должен существовать уже перед установкой.
     */
    З opIndexAssign(З значение, К ключ);

    /**
     * Установить пару ключ/значение. Это похоже на opIndexAssign, но возвращает
     * this, поэтому эту функцию можно сцеплять в цепочку (so the function can be chained).
     */
    СКлючом!(К, З) установи(К ключ, З значение);

    /**
     * То же, что и установи, но имеет булево былДобавлен, которое сообщает вызывающему,
     * было ли значение добавленно или нет.
     */
    СКлючом!(К, З) установи(К ключ, З значение, ref бул былДобавлен);

    /**
     * Возвращает да, если эта коллекция содержит этот ключ.
     */
    бул имеетКлюч(К ключ);
}
