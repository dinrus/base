module col.Stack;

private import exception:
ГранМасИскл;

/******************************************************************************

        Стэк заданного значения-типа З, с максимальной глубиной = Размер. Обратите
        внимание, что размещение в собственную память не происходит, если Размер != 0,
        и происходит размещение в  кучу, если Размер == 0. Поэтому получается
        экземпляр с фиксированным размером и низким избытком(low-overhead),
		либо экземпляр, ориентирующийся на кучу.

******************************************************************************/

struct Стэк (З, цел Размер = 0)
{
    alias н_ый              opIndex;
    alias срез            opSlice;
    alias вращайВправо      opShrAssign;
    alias вращайВлево       opShlAssign;
    alias сунь             opCatAssign;


    static if (Размер == 0)
    {
        private бцел глубина;
        private З[]  стэк;
    }
    else
    {
        private бцел     глубина;
        private З[Размер]  стэк;
    }

    /***********************************************************************

            Очистит стэк.

    ***********************************************************************/

    Стэк* очисть ()
    {
        глубина = 0;
        return this;
    }

    /***********************************************************************

            Возвращает глубину стэка.

    ***********************************************************************/

    бцел размер ()
    {
        return глубина;
    }

    /***********************************************************************

            Вернуть свободные неиспользованнные ячейки.

    ***********************************************************************/

    бцел неиспользовано ()
    {
        return стэк.length - глубина;
    }

    /***********************************************************************

            Возвращает неглубокий (shallow) клон данного стэка.

    ***********************************************************************/

    Стэк клонируй ()
    {
        Стэк s =void;
        static if (Размер == 0)
            s.стэк.length = стэк.length;
        s.стэк[] = стэк;
        s.глубина = глубина;
        return s;
    }

    /***********************************************************************

            Вталкивает и возвращает (shallow) копию самого верхнего элемента.

    ***********************************************************************/

    З dup ()
    {
        auto знач = верх;
        сунь (знач);
        return знач;
    }

    /**********************************************************************

           Втолкнуть значение на стэк.

            Выводит исключение, если стэк полон.

    **********************************************************************/

    Стэк* сунь (З значение)
    {
        static if (Размер == 0)
        {
            if (глубина >= стэк.length)
                стэк.length = стэк.length + 64;
            стэк[глубина++] = значение;
        }
        else
        {
            if (глубина < стэк.length)
                стэк[глубина++] = значение;
            else
                ошибка (__LINE__);
        }
        return this;
    }

    /**********************************************************************

            Поместить в стэк ряд значений.

            Выводит исключение, если стэк полон.

    **********************************************************************/

    Стэк* добавь (З[] значение...)
    {
        foreach (знач; значение)
        сунь (знач);
        return this;
    }

    /**********************************************************************

            Удаляет и возвращает на стэк последнюю добавку.

            Выводит исключение, если стэк пуст.

    **********************************************************************/

    З вынь ()
    {
        if (глубина)
            return стэк[--глубина];

        return ошибка (__LINE__);
    }

    /**********************************************************************

            Удаляет и возвращает на стэк последнюю добавку.

            Выводит исключение, если стэк пуст.

    **********************************************************************/

    З верх ()
    {
        if (глубина)
            return стэк[глубина-1];

        return ошибка (__LINE__);
    }

    /**********************************************************************

            Меняет местами две верхних записи и возвращает верхнюю.

            Выводит исключение, если в стэке  недостаточно записей.

    **********************************************************************/

    З обменяй ()
    {
        auto p = стэк.ptr + глубина;
        if ((p -= 2) >= стэк.ptr)
        {
            auto знач = p[0];
            p[0] = p[1];
            return p[1] = знач;
        }

        return ошибка (__LINE__);
    }

    /**********************************************************************

            Index стэк записи, where a zero индекс represents the
            newest стэк Запись (the верх).

            Выводит исключение an исключение when the given индекс is out of range

    **********************************************************************/

    З н_ый (бцел i)
    {
        if (i < глубина)
            return стэк [глубина-i-1];

        return ошибка (__LINE__);
    }

    /**********************************************************************

            Rotate the given число of стэк записи

            Выводит исключение an исключение when the число is out of range

    **********************************************************************/

    Стэк* вращайВлево (бцел d)
    {
        if (d <= глубина)
        {
            auto p = &стэк[глубина-d];
            auto t = *p;
            while (--d)
                *p++ = *(p+1);
            *p = t;
        }
        else
            ошибка (__LINE__);
        return this;
    }

    /**********************************************************************

            Rotate the given число of стэк записи

            Выводит исключение an исключение when the число is out of range

    **********************************************************************/

    Стэк* вращайВправо (бцел d)
    {
        if (d <= глубина)
        {
            auto p = &стэк[глубина-1];
            auto t = *p;
            while (--d)
                *p-- = *(p-1);
            *p = t;
        }
        else
            ошибка (__LINE__);
        return this;
    }

    /**********************************************************************

            Return the стэк as an Массив of значения, where the первый
            Массив Запись represents the oldest значение.

            Doing a foreach() on the returned Массив will traverse in
            the opposite direction of foreach() upon a стэк

    **********************************************************************/

    З[] срез ()
    {
        return стэк [0 .. глубина];
    }

    /**********************************************************************

            Throw an исключение

    **********************************************************************/

    private З ошибка (т_мера строка)
    {
        throw new ГранМасИскл (__FILE__, строка);
    }

    /***********************************************************************

            Iterate из_ the most recent в_ the oldest стэк записи

    ***********************************************************************/

    цел opApply (цел delegate(ref З значение) дг)
    {
        цел результат;

        for (цел i=глубина; i-- && результат is 0;)
            результат = дг (стэк[i]);
        return результат;
    }
}

/+
/*******************************************************************************

*******************************************************************************/
import io.Stdout;
unittest
{


    проц main()
    {
        Стэк!(цел) знач;
        знач.сунь(1);

        Стэк!(цел, 10) s;

        Стдвыв.форматнс ("сунь four");
        s.сунь (1);
        s.сунь (2);
        s.сунь (3);
        s.сунь (4);
        foreach (знач; s)
        Стдвыв.форматнс ("{}", знач);
        s <<= 4;
        s >>= 4;
        foreach (знач; s)
        Стдвыв.форматнс ("{}", знач);

        s = s.клонируй;
        Стдвыв.форматнс ("вынь one: {}", s.вынь);
        foreach (знач; s)
        Стдвыв.форматнс ("{}", знач);
        Стдвыв.форматнс ("верх: {}", s.верх);

        Стдвыв.форматнс ("вынь three");
        s.вынь;
        s.вынь;
        s.вынь;
        foreach (знач; s)
        Стдвыв.форматнс ("> {}", знач);
    }
}

+/
