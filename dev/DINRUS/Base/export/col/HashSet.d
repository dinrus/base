module col.HashSet;

public import col.model.Set;
public import col.Functions;
private import col.Hash;

/+ ИНТЕРФЕЙС:

class ХэшНабор(З, alias ШаблРеализац=ХэшБезОбновлений, alias хэшФункц=ДефХэш) : Набор!(З)
{

    alias ШаблРеализац!(З, хэшФункц) Реализ;

    struct курсор
    {
        З значение();
        курсор opPostInc();
        курсор opPostDec();
        курсор opAddAssign(цел прир);
        курсор opSubAssign(цел прир);
        бул opEquals(курсор обх);
    }


    final цел очистить(цел delegate(ref бул чистить_ли, ref З з) дг);
    цел opApply(цел delegate(ref З з) дг);
    this();
    private this(ref Реализ дубИз);
    ХэшНабор зачисть();
    бцел длина();
	alias длина length;
    курсор начало();
    курсор конец();
    курсор удали(курсор обх);
    курсор найди(З з);
    бул содержит(З з);
    ХэшНабор удали(З з);
    ХэшНабор удали(З з, ref бул былУдалён);
    ХэшНабор удали(Обходчик!(З) обх);
    ХэшНабор удали(Обходчик!(З) обх, ref бцел члоУдалённых);
    ХэшНабор добавь(З з);
    ХэшНабор добавь(З з, ref бул былДобавлен);
    ХэшНабор добавь(Обходчик!(З) обх);
    ХэшНабор добавь(Обходчик!(З) обх, ref бцел члоДобавленных);
    ХэшНабор добавь(З[] массив);
    ХэшНабор добавь(З[] массив, ref бцел члоДобавленных);
    ХэшНабор накладка(Обходчик!(З) поднабор);
    ХэшНабор накладка(Обходчик!(З) поднабор, ref бцел члоУдалённых);
    ХэшНабор dup();
    цел opEquals(Объект o);
    З дай();
    З изыми();
}

+/

/**
 * Реализация набора, использующая Хэш, чтобы сделать время вставки, удаления
 * и поиска равным примерно O(1).
 *
 * Добавка элемента может делать курсоры недействительными, в зависимости от
 * реализации.
 *
 * Удаление элемент делает недействительными только курсоры, которые указывали на
 * этот элемент.
 *
 * Можно заменить реализацию Хэш своей кастомной, при этом Хэш должен быть
 * шаблоном структуры, который может быть инстанциирован единственным аргументом
 * З, и должен реализовывать следующие члены (члены-нефункции могут быть
 * свойствами, если не указано иного):
 *
 *
 * параметры -> должно быть структурос с, как минимум, следующими членами:
 *   хэшФункц -> используемая хэш-функция (должно быть ХэшФунк!(З))
 *   обновлФункц -> используемая функция обновления (должно быть
 *                     ФункцОбновления!(З))
 * 
 * проц установка(параметры p) -> инициализует хэш с указанными параметрами.
 *
 * бцел счёт -> счёт элементов в хэше
 *
 * позиция -> должно быть структурой со следующим членом:
 *   укз -> должно определять следующий член:
 *     З значение -> значение,на которое указывает эта позиция (не может быть
 *                свойством)
 *   позиция следщ -> должно быть следующим значением в хэше
 *   позиция предш -> должно быть предыдущим значением в хэше
 *
 * бул добавь(З з) -> добавить заданное значение в хэш. Хэш этого значение
 * даёт функция хэшФункц(з).  Если значение уже имеется в хэше,
 * должен вызываться обновлФункц(з) и не инкрементироваться счёт.
 *
 * позиция начало -> должно быть позицией, указывающей на самый первый действительный
 * элемент в хэше, или конец, если элементы отсутствуют.
 *
 * позиция конец -> должно быть позицией, которая указывает сразу за самым последним
 * действительным элементом.
 *
 * позиция найди(З з) -> возвращает позицию, указывающую на элемент, который
 * содержит з, или конец, если этого элемента не существует.
 *
 * позиция удали(позиция p) -> удаляет указанный элемент из хэша,
 * возвращает следующий действительный элемент или конец, если p было последним в хэше.
 *
 * проц зачисть() -> удаляет все элементы из хэша, устанавливает счёт в 0.
 */
class ХэшНабор(З, alias ШаблРеализац=ХэшБезОбновлений, alias хэшФункц=ДефХэш) : Набор!(З)
{
    /**
     * Псевдоним экземпляра шаблонной реализации.
     */
    alias ШаблРеализац!(З, хэшФункц) Реализ;

    private Реализ _хэш;

    /**
     * Курсор для хэш-набора.
     */
    struct курсор
    {
        private Реализ.Позиция позиция;

        /**
         * Даёт значение по текущей позиции.
         */
        З значение()
        {
            return позиция.ptr.значение;
        }

        /**
         * Наращивает этот курсор, возвращает курсор перед
         * инкрементированием.
         */
        курсор opPostInc()
        {
            курсор врм = *this;
            позиция = позиция.следщ;
            return врм;
        }

        /**
         * Уменьшает этот курсор, возвращает курсор перед
         * декрементированием.
         */
        курсор opPostDec()
        {
            курсор врм = *this;
            позиция = позиция.предш;
            return врм;
        }

        /**
         * Наращивает этот курсор на заданное количество.
         *
         * Это операция  O(прир)! Следует использовать
         * этот оператор только в форме:
         *
         * ++i;
         */
        курсор opAddAssign(цел прир)
        {
            if(прир < 0)
                return opSubAssign(-прир);
            while(прир--)
                позиция = позиция.следщ;
            return *this;
        }

        /**
         * Уменьшает этот курсор на заданное количество.
         *
         * Это операция  O(прир)! Следует использовать
         * этот оператор только в форме:
         *
         * --i;
         */
        курсор opSubAssign(цел прир)
        {
            if(прир < 0)
                return opAddAssign(-прир);
            while(прир--)
                позиция = позиция.предш;
            return *this;
        }

        /**
         * Сравнивает два курсора на равенство.
         */
        бул opEquals(курсор обх)
        {
            return обх.позиция == позиция;
        }
    }

    /**
     * Итерирует через все элементы в наборе, указывает,
     * какие элементы следует удалить.
     *
     *
     * Используйте так:
     * ----------
     * // удалить все нечётные элементы
     * foreach(ref чистить_ли, з; &hashSet.очистить)
     * {
     *   чистить_ли = ((з & 1) == 1);
     * }
     */
    final цел очистить(цел delegate(ref бул чистить_ли, ref З з) дг)
    {
        return _примени(дг);
    }

    private цел _примени(цел delegate(ref бул чистить_ли, ref З з) дг)
    {
        курсор обх = начало;
        бул чистить_ли;
        цел возврдг = 0;
        курсор _конец = конец; // кэшируем конец, чтобы обходчик не всегда генерировался.
        while(!возврдг && обх != _конец)
        {
            //
           // не позволяем пользователю менять значение.
            //
            З врмзначение = обх.значение;
            чистить_ли = false;
            if((возврдг = дг(чистить_ли, врмзначение)) != 0)
                break;
            if(чистить_ли)
                обх = удали(обх);
            else
                обх++;
        }
        return возврдг;
    }

    /**
     * Итерирует по значениям коллекции.
     */
    цел opApply(цел delegate(ref З з) дг)
    {
        цел _дг(ref бул чистить_ли, ref З з)
        {
            return дг(з);
        }
        return _примени(&_дг);
    }

    /**
     * Создаёт экземпляр, используя дефолтные параметры.
     */
    this()
    {
        _хэш.установка();
    }

    //
    // private constructor for dup
    //
    private this(ref Реализ дубИз)
    {
        дубИз.копируйВ(_хэш);
    }

    /**
    * Очищает эту коллекцию от всех элементов.
     */
    ХэшНабор зачисть()
    {
        _хэш.зачисть();
        return this;
    }

    /**
     * Возвращает число элементов в этой коллекции.
     */
    бцел длина()
    {
        return _хэш.счёт;
    }
	alias длина length;

    /**
     * Возвращает курсор на первый элемент в этой коллекции.
     */
    курсор начало()
    {
        курсор обх;
        обх.позиция = _хэш.начало();
        return обх;
    }

    /**
     * Возвращает курсор, указывающий сразу за последним элементом в
     * этой коллекции.
     */
    курсор конец()
    {
        курсор обх;
        обх.позиция = _хэш.конец();
        return обх;
    }

    /**
     * Удаляет элемент, перед которым показывает данный курсор, возвращая
     * курсор, указывающий на следующий элемент в этой коллекции.
     *
     * В среднем выполняется за время O(1).
     */
    курсор удали(курсор обх)
    {
        обх.позиция = _хэш.удали(обх.позиция);
        return обх;
    }

    /**
     * Находит экземпляр значения в этой коллекции.  Возвращает конец,
     * если значение отсутствует.
     *
     * В среднем выполняется за время O(1).
     */
    курсор найди(З з)
    {
        курсор обх;
        обх.позиция = _хэш.найди(з);
        return обх;
    }

    /**
     * Возвращает да, если данное значение существует в этой коллекции.
     *
     * В среднем выполняется за время O(1).
     */
    бул содержит(З з)
    {
        return найди(з) != конец;
    }

    /**
     * Удаляет первый элемент со значением з. Возвращает да, если
     * значение имелось и было удалено.
     *
     * Выполняется за время O(n).
     */
    ХэшНабор удали(З з)
    {
        курсор обх = найди(з);
        if(обх != конец)
            удали(обх);
        return this;
    }

    /**
     * Удаляет первый элемент со значением з. Возвращает да, если
     * значение имелось и было удалено.
     *
     * Выполняется за время O(n).
     */
    ХэшНабор удали(З з, ref бул былУдалён)
    {
        курсор обх = найди(з);
        if(обх == конец)
        {
            былУдалён = false;
        }
        else
        {
            былУдалён = true;
            удали(обх);
        }
        return this;
    }

    ХэшНабор удали(Обходчик!(З) обх)
    {
        foreach(з; обх)
            удали(з);
        return this;
    }

    /**
     * Удаляет все элементы, которые появляются в обходчике.
     * Устанавливает члоУдалённых в число удалённых элементов.
     *
     * Возвращает this.
     */
    ХэшНабор удали(Обходчик!(З) обх, ref бцел члоУдалённых)
    {
        бцел исхдлина = длина;
        удали(обх);
        члоУдалённых = исхдлина - длина;
        return this;
    }

    /**
     * Добавляет элемент в набор. Возвращает да, если элемента
     * до этого не существовало.
     *
     * В среднем выполняется за время O(1).
     */
    ХэшНабор добавь(З з)
    {
        _хэш.добавь(з);
        return this;
    }

    /**
     * Добавляет элемент в набор. Возвращает да, если элемента
     * до этого не существовало.
     *
     * В среднем выполняется за время O(1).
     */
    ХэшНабор добавь(З з, ref бул былДобавлен)
    {
        былДобавлен = _хэш.добавь(з);
        return this;
    }

    /**
     * Добавляет все элементы из обходчика в набор. Возвращает число
     * добавленных элементов.
     *
     * Выполняется в среднем за время O(1) + O(m), где m - число элементов
     * в этом обходчике.
     */
    ХэшНабор добавь(Обходчик!(З) обх)
    {
        foreach(з; обх)
            _хэш.добавь(з);
        return this;
    }

    /**
     * Добавляет все элементы из обходчика в набор. Возвращает число
     * добавленных элементов.
     *
     * Выполняется в среднем за время O(1) + O(m), где m - число элементов
     * в этом обходчике.
     */
    ХэшНабор добавь(Обходчик!(З) обх, ref бцел члоДобавленных)
    {
        бцел исхдлина = длина;
        добавь(обх);
        члоДобавленных = длина - исхдлина;
        return this;
    }

    /**
     * Добавляет все элементы из массива в набор. Возвращает число
     * добавленных элементов.
     *
     * Выполняется в среднем за время O(1) * O(m), где m - длина массива.
     */
    ХэшНабор добавь(З[] массив)
    {
        foreach(з; массив)
            _хэш.добавь(з);
        return this;
    }

    /**
     * Добавляет все элементы из массива в набор. Возвращает число
     * добавленных элементов.
     *
     * Выполняется в среднем за время O(1) * O(m), где m - длина массива.
     */
    ХэшНабор добавь(З[] массив, ref бцел члоДобавленных)
    {
        бцел исхдлина = длина;
        добавь(массив);
        члоДобавленных = длина - исхдлина;
        return this;
    }

    /**
     * Удаляет все значения из этого набора, которых нет в заданном поднаборе.
     *
     * Возвращает this.
     */
    ХэшНабор накладка(Обходчик!(З) поднабор)
    {
        //
        // intersection is more difficult than removal, because we do not have
        // insight into the implementation details.  Therefore, make the
        // implementation do обх.
        //
        _хэш.накладка(поднабор);
        return this;
    }

    /**
    * Удаляет все значения из этого набора, которых нет в заданном поднаборе.
     * Устанавливает члоУдалённых в число удалённых элементов.
     *
     * Возвращает this.
     */
    ХэшНабор накладка(Обходчик!(З) поднабор, ref бцел члоУдалённых)
    {
        //
        // Интерсекция труднее удаления, так как неясны детали реализации.
        // Следовательно, реализация должна заниматься и итерацией.
        //
        члоУдалённых = _хэш.накладка(поднабор);
        return this;
    }

    /**
     * Дублирует этот хэш-набор.
     */
    ХэшНабор dup()
    {
        return new ХэшНабор(_хэш);
    }

    цел opEquals(Объект o)
    {
        if(o !is null)
        {
            auto s = cast(Набор!(З))o;
            if(s !is null && s.length == длина)
            {
                foreach(элт; s)
                {
                    if(!содержит(элт))
                        return 0;
                }

                //
                // равны
                //
                return 1;
            }
        }
        //
        // сравнение невозможно.
        //
        return 0;
    }

    /**
     * Выдаёт наиболее удобный элемент в набора. Это элемент, который
     * итерируется первым. Следовательно, вызов удали(дай()) гарантированно
     * длится менеее, чем операция O(n).
     */
    З дай()
    {
        return начало.значение;
    }

    /**
     * Удаляет наиболее удобный элемент в наборе, и возвращает его значение.
     * Это равнозначно удали(дай()), за исключением того, что выполняется лишь
     * один поиск элемента.
     */
    З изыми()
    {
        auto c = начало;
        auto возврзнач = c.значение;
        удали(c);
        return возврзнач;
    }
}

version(UnitTest)
{
    unittest
    {
        auto hs = new ХэшНабор!(бцел);
        Набор!(бцел) s = hs;
        s.добавь([0U, 1, 2, 3, 4, 5, 5]);
        assert(s.length == 6);
        foreach(ref чистить_ли, i; &s.очистить)
            чистить_ли = (i % 2 == 1);
        assert(s.length == 3);
        assert(s.содержит(4));
    }
}
