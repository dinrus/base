
module io.device.File;

private import io.device.Device, io.device.Conduit, io.Stdout;
/*******************************************************************************

        Реализует средство чтения и записи в генерный файл. Провода -
        это первичное средство доступа к внешним данным; Файл
        расширяет базовый образец, предоставляя файл-специфичные методы для
        установки размера файла, смещения на заданную файловую позицию и т.п.

        Серийный ввод и вывод непосредственен. В этом примере мы
        копируем файл прямо на консоль:
        ---
        // открыть файл для чтения
        auto из_ = new Файл ("тест.txt");

        // залить прямо в консоль
        Стдвыв.копируй (из_);
        ---

        А здесь копируем один файл в другой:
        ---
        // открыть файл для чтения
        auto из_ = new Файл ("тест.txt");

        // открыть другой для записи
        auto в_ = new Файл ("копия.txt", Файл.ЗапСозд);

        // скопировать файл и закрыть
        в_.копируй.закрой;
        из_.закрой;
        ---

        Можно использовать ИПотокВвода.загрузи() для загрузки файла прямо в память:
        ---
        auto файл = new Файл ("тест.txt");
        auto контент = файл.загрузи;
        файл.закрой;
        ---

        Или использовать удобную статическую функцию из Файл:
        ---
        auto контент = Файл.получи ("тест.txt");
        ---

        Другой способ для получения такого же результата:
        ---
        // открыть файл для чтения
        auto файл = new Файл ("тест.txt");

        // создать Массив, вмещающий весь файл
        auto контент = new сим [файл.length];

        // считать содержимое файла. Возвращаемое значение представляет собой число считанных байтов.
        auto байты = файл.читай (контент);
        файл.закрой;
        ---

        Можно прямо записывать в Файл таким методом:
        ---
        // откроем файл для записи
        auto в_ = new Файл ("текст.txt", Файл.ЗапСозд);

        // запишим Массив контента в него
        auto байты = в_.пиши (контент);
        ---

        Имеются эквивалентные статические функции, Файл.установи() и
        Файл.добавь(), которые устанавливают или добавляют файловый контент, соответственно.

        Файл отлично обрабатывает случайный I/O. Используем сместись() для
        перемещения файлового указателя:
        ---
        // откроем файл для чтения и записи
        auto файл = new Файл ("random.bin", Файл.ЧитЗапСозд);

        // запишим какие-либо данные
        файл.пиши ("testing");

        // перейдём на начало файла
        файл.сместись (0);

        // считаем данные ещё раз
        сим[10] врем;
        auto байты = файл.читай (врем);

        файл.закрой;
        ---

        Заметьте, что по умолчанию Файл не буферирован - обмотка экземпляра внутри
        io.stream.Buffered для буферированного I/O.

        Компилируется с -version=Win32SansUnicode, чтобы активировать Win95 & Win32s файл
        суппорт.

*******************************************************************************/

extern(D)
 class Файл : Устройство
{
    public alias Устройство.читай  читай;
    public alias Устройство.пиши пиши;

    /***********************************************************************

            32 бит ...

    ***********************************************************************/

    align(1) struct Стиль
    {
        Доступ          доступ;                 /// права доступа
        Откр            откр;                   /// как открыть
        Общ           совместно;                  /// в совместном режиме
        Кэш           кэш;                  ///  в кэш
    }

    /***********************************************************************

    ***********************************************************************/

    enum Доступ : ббайт
    {
        Чит      = 0x01,       /// читаемый ли
        Зап     = 0x02,       /// записываемый ли
        ЧитЗап = 0x03,       /// все
    }

    /***********************************************************************

    ***********************************************************************/

    enum Откр : ббайт
    {
        Сущ=0,               /// должен существовать
        Созд,                 /// создать или упростить
        Sedate,                 /// создать при необходимости
        Доб,                 /// создать при необходимости
        Нов,                    /// не может существовать
    };

    /***********************************************************************

    ***********************************************************************/

    enum Общ : ббайт
    {
        Нет=0,                 /// без совместного использования
        Чит,                   ///  совместное чтение
        ЧитЗап,              /// открыть для любых действий
    };

    /***********************************************************************

    ***********************************************************************/

    enum Кэш : ббайт
    {
        Нет      = 0x00,       /// не оптимизировать
        Случай    = 0x01,       /// оптимизировать для случайного
        Поток    = 0x02,       /// оптимизировать для потока
        WriteThru = 0x04,       /// поддерживающего-кэша флаг
    };

    /***********************************************************************

        Читать существующий файл.

    ***********************************************************************/

    const Стиль ЧитСущ = {Доступ.Чит, Откр.Сущ};

    /***********************************************************************

        Читать существующий файл.

    ***********************************************************************/

    const Стиль ЧитОбщ = {Доступ.Чит, Откр.Сущ, Общ.Чит};

    /***********************************************************************

            Записать существующий файл. Не создавать.

    ***********************************************************************/

    const Стиль ЗапСущ = {Доступ.Зап, Откр.Сущ};

    /***********************************************************************

            Записать в чистый файл. Создать при необходимости.

    ***********************************************************************/

    const Стиль ЗапСозд = {Доступ.Зап, Откр.Созд};

    /***********************************************************************

            Записать в конец файла.

    ***********************************************************************/

    const Стиль ЧитДоб = {Доступ.Зап, Откр.Доб};

    /***********************************************************************

            Чтение и запись в существующий файл.

    ***********************************************************************/

    const Стиль ЧитЗапСущ = {Доступ.ЧитЗап, Откр.Сущ};

    /***********************************************************************

            Чтение и запись в чистый файл. Создать при необходимости.

    ***********************************************************************/

    const Стиль ЧитЗапСозд = {Доступ.ЧитЗап, Откр.Созд};

    /***********************************************************************

            Чит и Зап. Используется - при его наличии - существующий файл.

    ***********************************************************************/

    const Стиль ЧитЗапОткр = {Доступ.ЧитЗап, Откр.Sedate};

    /***********************************************************************

            Создать Файл для использования с открой().

            Заметьте, что Файл не буферирован по умолчанию - обмотка экземпляра
            внутри io.stream.Buffered для буферированного I/O.

    ***********************************************************************/

    this ();

    /***********************************************************************

            Создаёт Файл с заданными путь и стиль.

            Заметьте, что Файл не буферирован по умолчанию - обмотка экземпляра
            внутри io.stream.Buffered для буферированного I/O.

    ***********************************************************************/

    this (ткст путь, Стиль стиль = ЧитСущ);

    /***********************************************************************

            Возвращает Стиль, используемый для этого файла.

    ***********************************************************************/

    Стиль стиль ();

    /***********************************************************************

            Возвращает путь, используемый для этого файла.

    ***********************************************************************/

    override ткст вТкст ();

    /***********************************************************************

            Вспомогательная функция для возврата контента файла.
            Возвращает срез предоставленного буфера вывода, где
            есть достаточная ёмкость, и размещает из кучи,
            в которой файловый контент больше.

            Размер контента определяется через файловую систему, по
            Файл.length, хотя может быть неверным для некоторых систем
            *nix. Альтернатива - использовать Файл.загрузи, который
            грузит контент, пока не натолкнётся на Кф.

    ***********************************************************************/

    static проц[] получи (ткст путь, проц[] приёмн = пусто);

    /***********************************************************************

            Вспомогательная функция для установки файлового контента и длины,
            отражающей данный Массив.

    ***********************************************************************/

    static проц установи (ткст путь, проц[] контент);

    /***********************************************************************

            Вспомогательная функция для добавки контента в файл.

    ***********************************************************************/

    static проц добавь (ткст путь, проц[] контент);

    /***********************************************************************

            Windows-специфичный код

    ***********************************************************************/

    version(Win32)
    {
        /***************************************************************

            Низкоуровневая функция открой для подклассов, к которым нужно применять
            особые атрибуты.

            Возвращает: нет в случае неудачи

        ***************************************************************/

        //protected бул открой (ткст путь, Стиль стиль, бцел добатр);

        /***************************************************************

                Открыть файл с указанием стиля.

        ***************************************************************/

        проц открой (ткст путь, Стиль стиль = ЧитСущ);

        /***************************************************************

                Установит размер файла в текущ сместись
                позиция. Файл должен быть записываемый, чтобы это
                прощло успешно.

        ***************************************************************/

        проц упрости ();

        /***************************************************************

                Установить размер файла в указанную длину.
                Файл должен быть записываемый, чтобы это
                прощло успешно.
        ***************************************************************/

        проц упрости (дол размер);

        /***************************************************************

                Устанавливает файл сместись позиция в_ the specified смещение
                из_ the given якорь.

        ***************************************************************/

        override дол сместись (дол смещение, Якорь якорь = Якорь.Нач);

        /***************************************************************

                Возвращает текущ файл позиция.

        ***************************************************************/

        дол позиция ();

        /***************************************************************

                Возвращает total length of this файл.

        ***************************************************************/

        дол длина ();

        /***************************************************************

            Instructs the OS в_ слей it's internal buffers в_
                    the disk устройство.

                    NOTE: due в_ OS and hardware design, данные flushed
                    cannot be guaranteed в_ be actually on disk-platters.
                    Actual durability of данные depends on пиши-caches,
                    barriers, presence of battery-backup, filesystem and
                    OS-support.

            ***************************************************************/

        проц синх ();
    }


    /***********************************************************************

             Unix-specific код. Note that some methods are 32bit only

    ***********************************************************************/

    version (Posix)
    {
        /***************************************************************

            Low уровень открой for подст-classes that need в_ apply specific
            атрибуты.

            Return:
                нет in case of failure

        ***************************************************************/

        protected бул открой (ткст путь, Стиль стиль,
                                       цел добфлаги, цел доступ = 0666);

        /***************************************************************

                Откр a файл with the предоставленный стиль.

                Note that файлы default в_ no-sharing. That is,
                they are locked exclusively в_ the хост process
                unless иначе снИПulated. We do this in order
                в_ expose the same default behaviour as Win32

                NO FILE LOCKING FOR BORKED POSIX

        ***************************************************************/

        проц открой (ткст путь, Стиль стиль = ЧитСущ);

        /***************************************************************

                Устанавливает файл размер в_ be that of the текущ сместись
                позиция. The файл must be записываемый для этого в_
                succeed.

        ***************************************************************/

        проц упрости ();

        /***************************************************************

                Устанавливает файл размер в_ be the specified length. The
                файл must be записываемый для этого в_ succeed.

        ***************************************************************/

        override проц упрости (дол размер);

        /***************************************************************

                Устанавливает файл сместись позиция в_ the specified смещение
                из_ the given якорь.

        ***************************************************************/

        override дол сместись (дол смещение, Якорь якорь = Якорь.Нач);

        /***************************************************************

                Возвращает текущ файл позиция.

        ***************************************************************/

        дол позиция ();

        /***************************************************************

                Возвращает total length of this файл.

        ***************************************************************/

        дол длина ();

        /***************************************************************

            Instructs the OS в_ слей it's internal buffers в_
                    the disk устройство.

                    NOTE: due в_ OS and hardware design, данные flushed
                    cannot be guaranteed в_ be actually on disk-platters.
                    Actual durability of данные depends on пиши-caches,
                    barriers, presence of battery-backup, filesystem and
                    OS-support.

            ***************************************************************/

        проц синх ();
    }
}
alias Файл ФВвод, ФВывод;