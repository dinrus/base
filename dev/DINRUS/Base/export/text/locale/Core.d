module text.locale.Core;

private import  text.locale.Data;
private import  time.Time;

/**
 * Определяет типы культур, к-е м.б. получены от Культура.дайКультуры.
 */
public enum ТипыКультур
{
    Нейтральный = 1,
    Особый = 2,
    Все = Нейтральный | Особый
}

public interface ИСлужбаФормата
{

    Объект дайФормат(ИнфОТипе тип);

}

public class Культура : ИСлужбаФормата
{
    public this(ткст названиеКультуры);
    public this(цел идКультуры = 0x0419) ;
    public Объект дайФормат(ИнфОТипе тип);

    version (Clone)
    {
        public Объект клонируй() ;
    }

    public static Культура дайКультуру(цел идКультуры) ;
    public static Культура дайКультуру(ткст названиеКультуры) ;
    public static Культура дайКультуруПоТегуЯзыкаИЕТФ(ткст имя) ;
    public static Культура[] дайКультуры(ТипыКультур типы) ;
    public override ткст вТкст() ;
    public override цел opEquals(Объект об) ;
    public static Культура текущ() ;
    public static проц текущ(Культура значение);
    public static Культура инвариантнаяКультура() ;
    public цел ид() ;
    public ткст имя() ;
    public ткст англИмя() ;
    public ткст исконноеИмя() ;
    public ткст имяЯзыкаИз2Букв() ;
    public ткст имяЯзыкаИз3Букв() ;
    public final ткст тэгЯзыкаИЕТФ() ;
    public Культура предок() ;
    public бул нейтрален_ли() ;
    public final бул толькоЧтен_ли() ;
    public Календарь календарь();
    public Календарь[] опциональныеКалендари();
    public ФорматЧисла форматЧисла() ;
    public проц форматЧисла(ФорматЧисла значение) ;
    public ФорматДатыВремени форматДатыВремени();
    public проц форматДатыВремени(ФорматДатыВремени значение) ;

}

public class Регион
{
    public this(цел идКультуры) ;
    public this(ткст имя) ;
    public static Регион текущ() ;
    public цел геоИД() ;
    public ткст имя();
    public ткст англИмя();
    public ткст исконноеИмя() ;
    public ткст имяРегионаИз2Букв() ;
    public ткст имяРегионаИз3Букв();
    public ткст символВалюты() ;
    public ткст символВалютыИЗО() ;
    public ткст англИмяВалюты() ;
    public ткст исконноеИмяВалюты();
    public бул метрическ_ли() ;
    public override ткст вТкст() ;

}

public class ФорматЧисла : ИСлужбаФормата
{
    public this() ;
    public Объект дайФормат(ИнфОТипе тип);

    version (Clone)
    {
        public Объект клонируй();
    }

    public static ФорматЧисла дайЭкземпляр(ИСлужбаФормата службаФормата);
    public static ФорматЧисла текущ() ;
    public static ФорматЧисла инвариантныйФормат();
    public final бул толькоЧтен_ли();
    public final цел члоДесятичнЦифр() ;
    public final проц члоДесятичнЦифр(цел значение);
    public final цел члоОтрицатОбразцов();
    public final проц члоОтрицатОбразцов(цел значение);
    public final цел валютнДесятичнЦифры();
    public final проц валютнДесятичнЦифры(цел значение);
    public final цел валютнОтрицатОбразец() ;
    public final проц валютнОтрицатОбразец(цел значение) ;
    public final цел валютнПоложитОбразец() ;
    public final проц валютнПоложитОбразец(цел значение);
    public final цел[] размерыЧисловыхГрупп() ;
    public final проц размерыЧисловыхГрупп(цел[] значение);
    public final цел[] размерыВалютныхГрупп();
    public final проц размерыВалютныхГрупп(цел[] значение) ;
    public final ткст разделительЧисловыхГрупп() ;
    public final проц разделительЧисловыхГрупп(ткст значение) ;
    public final ткст разделительЧисловыхДесятков() ;
    public final проц разделительЧисловыхДесятков(ткст значение);
    public final ткст разделительГруппыВалют();
    public final проц разделительГруппыВалют(ткст значение) ;
    public final ткст десятичнРазделительВалюты() ;
    public final проц десятичнРазделительВалюты(ткст значение) ;
    public final ткст символВалюты() ;
    public final проц символВалюты(ткст значение) ;
    public final ткст отрицатЗнак() ;
    public final проц отрицатЗнак(ткст значение);
    public final ткст положитЗнак() ;
    public final проц положитЗнак(ткст значение);
    public final ткст символНЧ() ;
    public final проц символНЧ(ткст значение) ;
    public final ткст отрицатСимволБесконечности() ;
    public final проц отрицатСимволБесконечности(ткст значение) ;
    public final ткст положитСимволБесконечности() ;
    public final проц положитСимволБесконечности(ткст значение);
    public final ткст[] исконныеЦифры() ;
    public final проц исконныеЦифры(ткст[] значение) ;
}

public class ФорматДатыВремени : ИСлужбаФормата
{
   // package this() ;
  //  package this(ДанныеОКультуре* данныеОКультуре, Календарь Календарь) ;
  
    public Объект дайФормат(ИнфОТипе тип) ;

    version(Clone)
    {
        public Объект клонируй() ;
    }

//  package ткст[] shortTimePatterns() ;
// package ткст[] shortDatePatterns() ;
// package ткст[] longTimePatterns() ;
// package ткст[] longDatePatterns() ;
//  package ткст[] yearMonthPatterns() ;
    public final ткст[] дайВсеОбразцыДатыВремени();
    public final ткст[] дайВсеОбразцыДатыВремени(сим форматируй);
    public final ткст дайСокращённоеИмяДня(Календарь.ДеньНедели деньНедели) ;
    public final ткст дайИмяДня(Календарь.ДеньНедели деньНедели) ;
    public final ткст дайСокращённоеИмяМесяца(цел месяц) ;
    public final ткст дайИмяМесяца(цел месяц) ;
    public static ФорматДатыВремени дайЭкземпляр(ИСлужбаФормата службаФормата) ;
    public static ФорматДатыВремени текущ() ;
    public static ФорматДатыВремени инвариантныйФормат();
    public final бул толькоЧтен_ли() ;
    public final Календарь календарь() ;
    public final проц календарь(Календарь значение);
    public final Календарь.ДеньНедели первыйДеньНед() ;
    public final проц первыйДеньНед(Календарь.ДеньНедели значение) ;
    public final Календарь.ПравилоНедели правилоНеделиКалендаря() ;
    public final проц правилоНеделиКалендаря(Календарь.ПравилоНедели значение) ;
    public final ткст исконноеНазваниеКалендаря() ;
    public final ткст разделительДаты() ;
    public final проц разделительДаты(ткст значение);
    public final ткст разделительВремени() ;
    public final проц разделительВремени(ткст значение) ;
    public final ткст определительДоПолудня() ;
    public final проц определительДоПолудня(ткст значение) ;
    public final ткст определительПослеПолудня() ;
    public final проц определительПослеПолудня(ткст значение);
    public final ткст краткийОбразецДаты() ;
    public final проц краткийОбразецДаты(ткст значение) ;
    public final ткст краткийОбразецВремени() ;
    public final проц краткийОбразецВремени(ткст значение) ;
    public final ткст длинныйОбразецДаты() ;
    public final проц длинныйОбразецДаты(ткст значение) ;
    public final ткст длинныйОбразецВремени() ;
    public final проц длинныйОбразецВремени(ткст значение) ;
    public final ткст образецДняМесяца();
    public final проц образецДняМесяца(ткст значение) ;
    public final ткст образецМесяцаГода();
    public final проц образецМесяцаГода(ткст значение) ;
    public final ткст[] сокращённыеИменаДней() ;
    public final проц сокращённыеИменаДней(ткст[] значение) ;
    public final ткст[] именаДней() ;
    public final проц именаДней(ткст[] значение);
    public final ткст[] сокращённыеИменаМесяцев() ;
    public final проц сокращённыеИменаМесяцев(ткст[] значение);
    public final ткст[] именаМесяцев() ;
    public final проц именаМесяцев(ткст[] значение) ;
    public final ткст полныйОбразецДатыВремени();
    public final проц полныйОбразецДатыВремени(ткст значение) ;
    public final ткст образецРФС1123() ;
    public final ткст сортируемыйОбразецДатыВремени() ;
    public final ткст универсальныйСортируемыйОбразецДатыВремени() ;

}


