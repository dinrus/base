 module device;
 import io.Stdout, io.Path: удали;
    import io.device.Array;
	import io.device.BitBucket;
	import io.device.File;
	import io.device.FileMap;
	import io.device.ThreadPipe;
	
	    import thread;

    проц тестПайпНить()
    {
        бцел[] исток = бцелмас(1000);// = new бцел[1000];
        foreach(i, ref x; исток)
            x = i;

        ПайпНить пн = new ПайпНить(16);
        проц нитьА()
        {
            проц[] исхБуф = исток;
            while(исхБуф.length > 0)
            {
                исхБуф = исхБуф[пн.пиши(исхБуф)..$];
            }
            пн.стоп();
        }
        Нить a = new Нить(&нитьА);
        a.старт();
        цел значчтен;
        цел последн = -1;
        т_мера члочтен;
        while((члочтен = пн.читай((&значчтен)[0..1])) == значчтен.sizeof)
        {
            assert(значчтен == последн + 1);
            последн = значчтен;
        }
        assert(члочтен == пн.Кф);
        a.присоедини();
		
		Стдвыв("io.device.ThreadPipe.ПайпНить проходит тест").нс;
    }

    проц тестМассив()
    {
        auto b = new io.device.Array.Массив(6, 10);
        b.сместись (0);
        b.пиши ("fubar");

        Стдвыв.форматнс ("протяженность {}, поз {}, считано {}, размер буфера {}",
                                       b.предел, b.позиция, cast(ткст) b.срез, b.размерБуфера);


        b.пиши ("fubar");
        b.сместись (7);
        Стдвыв.форматнс ("протяженность {}, поз {}, считано {}, размер буфера {}",
                                       b.предел, b.позиция, cast(ткст) b.срез, b.размерБуфера);
									   
		Стдвыв("io.device.Array.Массив проходит тест").нс;
    }
	
	проц тестБитник()
	{
	    auto a=new Битник;
        a.пиши("bla");
        a.слей();
        a.открепи();
        a.пиши("b"); // at the moment it works, disallow?
        бцел[4] b=0;
        a.читай(b);
        foreach (el;b)
            assert(el==0);
		Стдвыв("io.device.BitBucket.Битник проходит тест").нс;
	
	}
	
	проц тестФайл()
	{
        сим[10] ff;

        auto файл = new Файл("device.d");
        auto контент = cast(ткст) файл.загрузи (файл);
        Стдвыв(контент).нс;
        assert (контент.length is файл.длина);
        assert (файл.читай(ff) is файл.Кф);
        assert (файл.позиция is контент.length);
        файл.сместись (0);
        assert (файл.позиция is 0);
        Стдвыв("Позиция при чтении фф = ", файл.читай(ff)).нс;
        assert (файл.читай(ff) is 10);
        assert (файл.позиция is 20);
        assert (файл.сместись(0, файл.Якорь.Тек) is 20);
        assert (файл.сместись(5, файл.Якорь.Тек) is 25);
		
		Стдвыв("io.device.File.Файл проходит тест").нс;
    
	}
	
	        проц тестФайлМап()
        {
                auto файл = new КартированныйФайл ("foo.map");
                auto куча = файл.перемерь (1_000_000);

                auto file1 = new КартированныйФайл ("foo1.map");
                auto heap1 = file1.перемерь (1_000_000);

                файл.закрой;
                удали ("foo.map");

                file1.закрой;
                удали ("foo1.map");
				
			Стдвыв("io.device.FileMap.КартированныйФайл проходит тест").нс;
    
        }
	
	проц main(){
	
	тестМассив();
	тестБитник();
	тестФайлМап();
	тестПайпНить();
	тестФайл();
	
	}