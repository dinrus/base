pragma(lib, "dinrus.lib");
import win, stdrus, json;

бцел MurmurHash2 ( ук key, цел len = 2 , бцел seed = 10 )
{
	бцел m = 0x5bd1e995;
	цел r = 24;


	бцел h = seed ^ len;
	байт *данные = cast(байт*)key;
	while(len >= 4)
	{
		бцел k = *cast(бцел*)данные;

		k *= m; 
		k ^= k >> r; 
		k *= m; 
		
		h *= m; 
		h ^= k;

		данные += 4;
		len -= 4;
	}

	switch(len)
	{
	case 3: h ^= данные[2] << 16;
	case 2: h ^= данные[1] << 8;
	case 1: h ^= данные[0];
	        h *= m;
	};

	h ^= h >> 13;
	h *= m;
	h ^= h >> 15;

	return h;
} 

бул	готовОбработать = false;
бул	хватит = false;
int		рез = 0;
 
 
extern(Windows) бцел нитеваяПроц(ук парам)
{
	while(!хватит)
	{
		if(готовОбработать)
		{
			рез = рез * 100;
			готовОбработать = false;
		}else
		{
			Спи(1);
		}
	}
	return 0;
}
 
void main()
{

Object h = new Object();
_скажинс(фм("Хэш для нового Объекта h равен:\t %s", MurmurHash2(cast(void*) h)));
string g = "проверка";
_скажинс(фм("Хэш для ткст g равен:\t\t %s", MurmurHash2(cast(void*) g)));
Нить k = new Нить();
_скажинс(фм("Хэш for новой Нити k равен:\t %s", MurmurHash2(cast(void*) k)));
_нс;_нс;
Object h1 = new Object();
_скажинс(фм("Хэш для нового Объекта h1 равен: %s", MurmurHash2(cast(void*) h1)));
string g1 = "проверка";
_скажинс(фм("Хэш для ткст g1 равен:\t\t %s", MurmurHash2(cast(void*) g1)));
Нить k1 = new Нить();
_скажинс(фм("Хэш для новой Нити k1 равен:\t %s", MurmurHash2(cast(void*) k1)));
_нс;_нс;_пауза;

	//запускаем поток
	бцел ид;
	ук нить = СоздайНить(пусто, 0, &нитеваяПроц, пусто, cast(ПФлагСоздПроц) 0, &ид);
	ЗакройДескр(нить);				//Нам не нужен дескриптор
 
	for(int i = 0; i < 1000; i++)
	{
		рез = 100;
		готовОбработать = да;			//указываем потоку, что есть данные для обработки
		while(готовОбработать)
			Спи(1);						//Ожидаем завершения обработки
 
		if(10000 != рез)
		{
			скажинс("Ошибка!");
		}
		скажифнс("%s", рез);	//печатаем результат
	}
	
	хватит = да;					//завершить поток
		_нс;_нс;_пауза;
	джейсон();
	_нс;_нс;_пауза;
}