module global;
private import gc, stdrus: скажи;

const ук КОНСВВОД;
const ук КОНСВЫВОД;
const ук КОНСОШ;
const бцел ИДПРОЦЕССА;
const ук   УКНАПРОЦЕСС;
const ук   УКНАНИТЬ;

static ОбработчикСборки сбобр = null;
alias сбобр collectHandler;//нужно для модуля rt.lifetime
static Следопыт следопыт = null;

static	т_см _см;//Рабочий экземпляр сборщика мусора

static	бул задержка_ли = нет;
static	бул ртПущен_ли = нет;	
static	бул смИнициирован = нет;

//Аргументы командной строки:
static ткст[] арги;

//Глобальные переменные
extern(C) ИнфОМодуле[] _moduleinfo_array;

//Консоль
static ук _буфЭкрана;
static ук _вызывающийПроцесс;

ИНФОКОНСЭКРБУФ инфОбКонсБуф;
ИНФОСТАРТА стартИнфо;
КООРД размБуфера ={300, 10000};
МПРЯМ размОкна ={300, 100, 800, 900} ;
БЕЗАТРЫ баБуфЭкрана;
ЗАПВВОДА запвво;
ИНФОКОНСКУРСОР консКурсорИнфо;
		
//Это приятно наблюдать, пока всё так незавершено и неполноценно (!)
//Что-то ведь должно вдохновлять человечье тщеславие и стремление к победе(!)
	
		//auto КОМПИЛИРОВАНО_ПРИ_ПОМОЩИ = __VENDOR__;
		//auto КОМПИЛ_ВЕРСИЯ = фм("%d.%d", __VERSION__/1000, __VERSION__%1000);
		//auto КОМПИЛ_ДАТА = __TIMESTAMP__;

//===========================================================================
			

ткст интро =// фм(
"
	_______________________________________
         Язык Программирования Динруc
	Авторское право 2012-2015 Лицензия GPL3
	     Разработчик Виталий Кулич		      
	Сайт проекта: http://www.dinrus.gixx.ru	
	_______________________________________
	
	
";
//	Компилятор %s версии %s
//	Штамп времени %s
//	________________________________________

//, КОМПИЛИРОВАНО_ПРИ_ПОМОЩИ, КОМПИЛ_ВЕРСИЯ, КОМПИЛ_ДАТА );

//=========================================================================

const ПТекстКонсоли НАЧАТРЫКОНСОЛИ =  ПТекстКонсоли.СинийПП|ПТекстКонсоли.ЗелёныйПП|ПТекстКонсоли.КрасныйПП;

static this()
{
КОНСВВОД =  cast(ук) ДайСтдДескр(ПСтд.Ввод);
КОНСВЫВОД =  cast(ук) ДайСтдДескр(ПСтд.Вывод);
КОНСОШ = cast(ук) ДайСтдДескр(ПСтд.Ошибка);
ИДПРОЦЕССА =  идБазовогоПроцесса();
УКНАПРОЦЕСС = cast(ук) OpenProcess(0x000F0000|0x00100000|0x0FFF,false,ИДПРОЦЕССА);
УКНАНИТЬ  = GetCurrentThread();
}

static ~this(){сбросьЦветКонсоли();}

//++=====================================================================

extern (C) проц установиКонсоль()
{
	
	
version(EmbeddedConsoleDetached)
	{			
	//После такой манипуляции каждая программа становится единоличницей!)))
	//Иногда это может быть полезным, например, если в WinMain выполнить такую команду, то
	//создаваемая здесь консоль будет затёрта, т.е. надпись "интро" перестанет досаждать(!)				
					ОсвободиКонсоль();
					РазместиКонсоль();
	}
	else
	{
				//Это поможет прикрепиться к вызывающей программе консольно.
				//В ExeMain|WinMain|DllMain делается то же самое, таким образом сшивается цепочка
				//между системной консолью, ДЛЛ и Экзешником.
				ПрикрепиКонсоль(-1);			
				
	}	
//=================================================================================
//3.Получим важные данные о  трёх консольных адресах, которые
//далее становятся аналогами стдвхо, стдвых и стдош
// (эти элементы могли бы потеряться, но, получается, что мы их просто меняем на новые,
//конкретные указатели на конкретную область памяти, в которой располагается наша консоль).			

			ДайИнфоСтарта(&стартИнфо);
//============================================================
//4.Функция обратного вызова, используемая в WinMain, может
//устанавливать соответствующий её  имени заголовок, либо выводить в заголовок
//какие=либо сообщения. Для этого мы просто создадим такую возможность:

			//УстановиЗагКонсоли("Язык Программирования ДИНРУС");
//==============================================================			
//5.		
			УстановиРазмерБуфераЭкранаКонсоли(КОНСВЫВОД, размБуфера) ;
			УстановиИнфОКурсореКонсоли(КОНСВЫВОД, &консКурсорИнфо);
			УстановиИнфОбОкнеКонсоли(КОНСВЫВОД, да, &размОкна);	

//============================================================================	
		
		debug	УстановиАтрибутыТекстаКонсоли(КОНСВЫВОД, ПТекстКонсоли.ЗелёныйПП|ПТекстКонсоли.ИнтПП);			
		debug   скажи(интро);
			УстановиАтрибутыТекстаКонсоли(КОНСВЫВОД, ПТекстКонсоли.СинийПП|ПТекстКонсоли.ЗелёныйПП|ПТекстКонсоли.ИнтПП);
//=============================================================================			
			//Будем использовать для ввода и вывода стандарт Виндовс,
			//хотя мечталось бы установить ПКодСтр.УТФ8 вместо ПКодСтр.ОЕМ. 866
			if(ДайКСКонсоли() != cast(бцел)ПКодСтр.ОЕМ) УстановиКСКонсоли(cast(ПКодСтр) ПКодСтр.ОЕМ);
			if(ДайКСВыводаКонсоли() != cast(бцел)ПКодСтр.ОЕМ) УстановиКСВыводаКонсоли(cast(ПКодСтр) ПКодСтр.ОЕМ);
			
			//Это открывает доступ для чтения и записи из консольного буфера.
			баБуфЭкрана.длина = БЕЗАТРЫ.sizeof;
			баБуфЭкрана.дескрБезоп = пусто;
			баБуфЭкрана.наследДескр = да;
			_буфЭкрана = СоздайБуферЭкранаКонсоли(ППраваДоступа.ГенерноеЧтение| ППраваДоступа.ГенернаяЗапись, ПСовмИспФайла.Чтение|ПСовмИспФайла.Запись, &баБуфЭкрана);
			//УстановиАктивныйБуферКонсоли(_буфЭкрана);
}


//==================================================	

const бцел ДУБЛИРУЙ_ПРАВА_ДОСТУПА = 0x00000002;
		
export extern (C) проц укВызывающегоПроцесса(ук процесс){_вызывающийПроцесс = процесс;}

export extern (C)
{

бцел идБазовогоПроцесса(){return GetCurrentProcessId();}

 ук консБуфЭкрана(){  

             ук   hndl;
    if(_вызывающийПроцесс)  ДублируйДескр( УКНАПРОЦЕСС, _буфЭкрана, _вызывающийПроцесс, &hndl, cast(ППраваДоступа) 0, да, ДУБЛИРУЙ_ПРАВА_ДОСТУПА );
		  else return _буфЭкрана;
                return hndl;
 
 }
 
ук консВход(){
// if(!УстановиСтдДескр(ПСтд.Ввод, КОНСВВОД)) ошибка("Установка стандартного дескриптора не удалась"); 
  

                ук    hndl;

   if(_вызывающийПроцесс)    ДублируйДескр( УКНАПРОЦЕСС, КОНСВВОД, _вызывающийПроцесс, &hndl, cast(ППраваДоступа) 0, да, ДУБЛИРУЙ_ПРАВА_ДОСТУПА );
			  else return КОНСВВОД;
                return hndl;
 }
 
ук консВыход(){
  

                ук  hndl;

    if(_вызывающийПроцесс)      ДублируйДескр( УКНАПРОЦЕСС, КОНСВЫВОД, _вызывающийПроцесс, &hndl, cast(ППраваДоступа) 0, да, ДУБЛИРУЙ_ПРАВА_ДОСТУПА );
                else return КОНСВЫВОД;
                return hndl;
 }
 
ук консОш(){
  

                ук   hndl;

              if(_вызывающийПроцесс)   ДублируйДескр( УКНАПРОЦЕСС, КОНСОШ, _вызывающийПроцесс, &hndl, cast(ППраваДоступа) 0, да, ДУБЛИРУЙ_ПРАВА_ДОСТУПА );
                     else return КОНСОШ;
                return hndl;
 
 }
 
 //ИНФОСТАРТА дайСтартИнфо(){assert(стартИнфо.размер != 0, "ИнфоСтартаПроцесса отсутствует"); return стартИнфо;}
}

//======================================================================
//УТИЛИТНЫЕ ФУНКЦИИ

extern(C) ук адаптВыхУкз(ук укз)
{
                  ук    hndl;

    if(_вызывающийПроцесс)  ДублируйДескр( УКНАПРОЦЕСС, укз, _вызывающийПроцесс, &hndl, cast(ППраваДоступа) 0, да, ДУБЛИРУЙ_ПРАВА_ДОСТУПА );
		  else return укз;
                return hndl;
}

extern(C) ук адаптВхоУкз(ук укз)
{
                  ук   hndl;

    if(_вызывающийПроцесс)  ДублируйДескр( _вызывающийПроцесс, укз, УКНАПРОЦЕСС, &hndl, cast(ППраваДоступа) 0, да, ДУБЛИРУЙ_ПРАВА_ДОСТУПА );
		  else return укз;
                return hndl;
}

export extern (C) проц максПриоритетПроцессу()
 {
		SetPriorityClass(УКНАПРОЦЕСС, 0x00000080);
		SetThreadPriority(УКНАНИТЬ,15);
}
//================================================

КООРД верхлево = {0, 0};

export extern (C) проц  перейдиНаТочкуКонсоли( цел aX, цел aY)
{
КООРД коорд;

  коорд.X = aX;
  коорд.Y = aY;
  УстановиПозициюКурсораКонсоли(КОНСВЫВОД,коорд);
}

export extern (C) проц установиАтрыКонсоли(ПТекстКонсоли атр)
{
  УстановиАтрибутыТекстаКонсоли(КОНСВЫВОД,атр);
}

export extern (C) цел гдеИксКонсоли()
{
  ДайИнфОБуфЭкранаКонсоли(КОНСВЫВОД,&инфОбКонсБуф);
  return инфОбКонсБуф.позКурсора.X;
}

export extern (C) цел гдеИгрекКонсоли()
{ 
  ДайИнфОБуфЭкранаКонсоли(КОНСВЫВОД,&инфОбКонсБуф);
  return инфОбКонсБуф.позКурсора.Y;
}

export extern (C) ПТекстКонсоли дайАтрыКонсоли()
{
  ДайИнфОБуфЭкранаКонсоли(КОНСВЫВОД,&инфОбКонсБуф);
  return инфОбКонсБуф.атрибуты;
}

extern(Windows) BOOL FillConsoleOutputCharacter(HANDLE hConsoleOutput, TCHAR cCharacter, DWORD nLength, COORD dwWriteCoord, out  LPDWORD lpNumberOfCharsWritten);

/+
проц очистьЭкран()
{
  ДайИнфОБуфЭкранаКонсоли(КОНСВЫВОД,&инфОбКонсБуф);
  auto заливка = инфОбКонсБуф.размер.X * инфОбКонсБуф.размер.Y;
  FillConsoleOutputCharacter(КОНСВЫВОД, ' ', заливка, cast(COORD) верхлево, cast(LPDWORD) заливка);
  АтрибутЗаливкиВыводаКонсоли(КОНСВЫВОД,инфОбКонсБуф.атрибуты, заливка,  верхлево, заливка);
}
+/

export extern(C) проц сбросьЦветКонсоли(){установиАтрыКонсоли(НАЧАТРЫКОНСОЛИ);}
//++=====================================================================