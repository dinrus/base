module std.zip;
import  std.intrinsic;


class ЗипИскл : Исключение
{
    this(ткст сооб)
    {
	super(сооб,__FILE__,__LINE__);
    }
}

export extern (D)
 struct ЧленАрхиваЗИП //ArchiveMember
{
export:
    бкрат версияСборки = 20;
    бкрат версияИзвлечения = 20;
    бкрат флаги;
    бкрат методСжатия;
    ФВремяДос время;
    бцел цпи32;
    бцел сжатыйРазмер;
    бцел расжатыйРазмер;
    бкрат номерДиска;
    бкрат внутренниеАтрибуты;
    бцел внешниеАтрибуты;
    private бцел смещение;
    ткст имя;
    ббайт[] экстра;
    ткст комментарий;
    ббайт[] сжатыеДанные;
    ббайт[] расжатыеДанные;

    проц выведи()
    {
	win.скажи(фм("имя = '%s'\n", имя));
	win.скажи(фм("\tкомментарий = '%s'\n", комментарий));
	win.скажи(фм("\tверсияСборки = %d\n", версияСборки));
	win.скажи(фм("\tверсияИзвлечения = %d\n", версияИзвлечения));
	win.скажи(фм("\tфлаги = %d\n", флаги));
	win.скажи(фм("\tметодСжатия = %d\n", методСжатия));
	win.скажи(фм("\tвремя = %d\n", время));
	win.скажи(фм("\tцпи32 = %d\n", цпи32));
	win.скажи(фм("\tрасжатыйРазмер = %d\n", расжатыйРазмер));
	win.скажи(фм("\tсжатыйРазмер = %d\n", сжатыйРазмер));
	win.скажи(фм("\tвнутренниеАрибуты = %d\n", внутренниеАтрибуты));
	win.скажи(фм("\tвнешниеАтрибуты = %d\n", внешниеАтрибуты));
    }

}

export extern (D)
 class АрхивЗИП
{
export:

 extern  (C) extern
 {
    ббайт[] данные;
    бцел смещКПоследнЗаписи;

    бцел номерДиска;
    бцел стартПапкаДиска;
    бцел члоЗаписей;
    бцел всегоЗаписей;
    ткст комментарий;
   ЧленАрхиваЗИП[ткст] папка;
}

    проц выведи()
    {
	win.скажи(фм("\tномерДиска = %u\n", номерДиска));
	win.скажи(фм("\tстартПапкаДиска = %u\n", стартПапкаДиска));
	win.скажи(фм("\tчлоЗаписей = %u\n", члоЗаписей));
	win.скажи(фм("\tвсегоЗаписей = %u\n", всегоЗаписей));
	win.скажи(фм("\tкомментарий = '%.*т'\n", комментарий));
    }

     this()
    {
    }


    проц добавьЧлен(ЧленАрхиваЗИП de)
    {
	папка[de.имя] = de;
    }

    проц удалиЧлен(ЧленАрхиваЗИП de)
    {
	папка.remove(de.имя);
    }

     проц[] строй()
    {	бцел i;
	бцел папкаOffset;

	if (комментарий.length > 0xFFFF)
	    throw new ЗипИскл("комментарий архива длиннее 65535");


	бцел размАрхива = 0;
	бцел размПапки = 0;
	foreach (ЧленАрхиваЗИП de; папка)
	{
	    de.расжатыйРазмер = de.расжатыеДанные.length;
	    switch (de.методСжатия)
	    {
		case 0:
		    de.сжатыеДанные = de.расжатыеДанные;
		    break;

		case 8:
		    de.сжатыеДанные = cast(ббайт[])std.zlib.compress(cast(проц[])de.расжатыеДанные);
		    de.сжатыеДанные = de.сжатыеДанные[2 .. de.сжатыеДанные.length - 4];
		    break;

		default:
		    throw new ЗипИскл("неподдерживаемый метод сжатия");
	    }
	    de.сжатыйРазмер = de.сжатыеДанные.length;
	    de.цпи32 = std.zlib.crc32(0, cast(проц[])de.расжатыеДанные);

	    размАрхива += 30 + de.имя.length +
				de.экстра.length +
				de.сжатыйРазмер;
	    размПапки += 46 + de.имя.length +
				de.экстра.length +
				de.комментарий.length;
	}

	данные = new ббайт[размАрхива + размПапки + 22 + комментарий.length];




	i = 0;
	foreach (ЧленАрхиваЗИП de; папка)
	{
	    de.смещение = i;
	    данные[i .. i + 4] = cast(ббайт[])"PK\x03\x04";
	    поставьБкрат(i + 4,  de.версияИзвлечения);
	    поставьБкрат(i + 6,  de.флаги);
	    поставьБкрат(i + 8,  de.методСжатия);
	    поставьБцел  (i + 10, cast(бцел)de.время);
	    поставьБцел  (i + 14, de.цпи32);
	    поставьБцел  (i + 18, de.сжатыйРазмер);
	    поставьБцел  (i + 22, de.расжатыеДанные.length);
	    поставьБкрат(i + 26, cast(бкрат)de.имя.length);
	    поставьБкрат(i + 28, cast(бкрат)de.экстра.length);
	    i += 30;

	    данные[i .. i + de.имя.length] = cast(ббайт[])de.имя[];
	    i += de.имя.length;
	    данные[i .. i + de.экстра.length] = cast(ббайт[])de.экстра[];
	    i += de.экстра.length;
	    данные[i .. i + de.сжатыйРазмер] = de.сжатыеДанные[];
	    i += de.сжатыйРазмер;
	}


	папкаOffset = i;
	члоЗаписей = 0;
	foreach (ЧленАрхиваЗИП de; папка)
	{
	    данные[i .. i + 4] = cast(ббайт[])"PK\x01\x02";
	    поставьБкрат(i + 4,  de.версияСборки);
	    поставьБкрат(i + 6,  de.версияИзвлечения);
	    поставьБкрат(i + 8,  de.флаги);
	    поставьБкрат(i + 10, de.методСжатия);
	    поставьБцел  (i + 12, cast(бцел)de.время);
	    поставьБцел  (i + 16, de.цпи32);
	    поставьБцел  (i + 20, de.сжатыйРазмер);
	    поставьБцел  (i + 24, de.расжатыйРазмер);
	    поставьБкрат(i + 28, cast(бкрат)de.имя.length);
	    поставьБкрат(i + 30, cast(бкрат)de.экстра.length);
	    поставьБкрат(i + 32, cast(бкрат)de.комментарий.length);
	    поставьБкрат(i + 34, de.номерДиска);
	    поставьБкрат(i + 36, de.внутренниеАтрибуты);
	    поставьБцел  (i + 38, de.внешниеАтрибуты);
	    поставьБцел  (i + 42, de.смещение);
	    i += 46;

	    данные[i .. i + de.имя.length] = cast(ббайт[])de.имя[];
	    i += de.имя.length;
	    данные[i .. i + de.экстра.length] = cast(ббайт[])de.экстра[];
	    i += de.экстра.length;
	    данные[i .. i + de.комментарий.length] = cast(ббайт[])de.комментарий[];
	    i += de.комментарий.length;
	    члоЗаписей++;
	}
	всегоЗаписей = члоЗаписей;


	смещКПоследнЗаписи = i;
	данные[i .. i + 4] = cast(ббайт[])"PK\x05\x06";
	поставьБкрат(i + 4,  cast(бкрат)номерДиска);
	поставьБкрат(i + 6,  cast(бкрат)стартПапкаДиска);
	поставьБкрат(i + 8,  cast(бкрат)члоЗаписей);
	поставьБкрат(i + 10, cast(бкрат)всегоЗаписей);
	поставьБцел  (i + 12, размПапки);
	поставьБцел  (i + 16, папкаOffset);
	поставьБкрат(i + 20, cast(бкрат)комментарий.length);
	i += 22;


	assert(i + комментарий.length == данные.length);
	данные[i .. данные.length] = cast(ббайт[])комментарий[];

	return cast(проц[])данные;
    }


    this(проц[] буфер)
    {	цел iend;
	цел i;
	цел endcommentlength;
	бцел размПапки;
	бцел папкаOffset;

	this.данные = cast(ббайт[]) буфер;


	iend = данные.length - 66000;
	if (iend < 0)
	    iend = 0;
	for (i = данные.length - 22; 1; i--)
	{
	    if (i < iend)
		throw new ЗипИскл("нет записи о конце");

	    if (данные[i .. i + 4] == cast(ббайт[])"PK\x05\x06")
	    {
		endcommentlength = ДайБкрат(i + 20);
		if (i + 22 + endcommentlength > данные.length)
		    continue;
		комментарий = cast(ткст)(данные[i + 22 .. i + 22 + endcommentlength]);
		смещКПоследнЗаписи = i;
		break;
	    }
	}


	номерДиска = ДайБкрат(i + 4);
	стартПапкаДиска = ДайБкрат(i + 6);

	члоЗаписей = ДайБкрат(i + 8);
	всегоЗаписей = ДайБкрат(i + 10);

	if (члоЗаписей != всегоЗаписей)
	    throw new ЗипИскл("зип на несколько дисков не поддерживается");

	размПапки = ДайБцел(i + 12);
	папкаOffset = ДайБцел(i + 16);

	if (папкаOffset + размПапки > i)
	    throw new ЗипИскл("повреждённая папка");

	i = папкаOffset;
	for (цел n = 0; n < члоЗаписей; n++)
	{

	    бцел смещение;
	    бцел длинаим;
	    бцел экстрадлин;
	    бцел комментарийlen;

	    if (данные[i .. i + 4] != cast(ббайт[])"PK\x01\x02")
		throw new ЗипИскл("неверная запись папки 1");
	    ЧленАрхиваЗИП de;
	    de.версияСборки = ДайБкрат(i + 4);
	    de.версияИзвлечения = ДайБкрат(i + 6);
	    de.флаги = ДайБкрат(i + 8);
	    de.методСжатия = ДайБкрат(i + 10);
	    de.время = cast(ФВремяДос)ДайБцел(i + 12);
	    de.цпи32 = ДайБцел(i + 16);
	    de.сжатыйРазмер = ДайБцел(i + 20);
	    de.расжатыйРазмер = ДайБцел(i + 24);
	    длинаим = ДайБкрат(i + 28);
	    экстрадлин = ДайБкрат(i + 30);
	    комментарийlen = ДайБкрат(i + 32);
	    de.номерДиска = ДайБкрат(i + 34);
	    de.внутренниеАтрибуты = ДайБкрат(i + 36);
	    de.внешниеАтрибуты = ДайБцел(i + 38);
	    de.смещение = ДайБцел(i + 42);
	    i += 46;

	    if (i + длинаим + экстрадлин + комментарийlen > папкаOffset + размПапки)
		throw new ЗипИскл("неверная запись папки 2");

	    de.имя = cast(ткст)(данные[i .. i + длинаим]);
	    i += длинаим;
	    de.экстра = данные[i .. i + экстрадлин];
	    i += экстрадлин;
	    de.комментарий = cast(ткст)(данные[i .. i + комментарийlen]);
	    i += комментарийlen;

	    папка[de.имя] = de;
	}
	if (i != папкаOffset + размПапки)
	    throw new ЗипИскл("неверная запись папки 3");
    }


    ббайт[]расжать(ЧленАрхиваЗИП de)
    {	бцел длинаим;
	бцел экстрадлин;

	if (данные[de.смещение .. de.смещение + 4] != cast(ббайт[])"PK\x03\x04")
	    throw new ЗипИскл("неверная запись папки 4");


	de.версияИзвлечения = ДайБкрат(de.смещение + 4);
	de.флаги = ДайБкрат(de.смещение + 6);
	de.методСжатия = ДайБкрат(de.смещение + 8);
	de.время = cast(ФВремяДос)ДайБцел(de.смещение + 10);
	de.цпи32 = ДайБцел(de.смещение + 14);
	de.сжатыйРазмер = ДайБцел(de.смещение + 18);
	de.расжатыйРазмер = ДайБцел(de.смещение + 22);
	длинаим = ДайБкрат(de.смещение + 26);
	экстрадлин = ДайБкрат(de.смещение + 28);

	    win.скажи(фм("\t\tрасжатыйРазмер = %d\n", de.расжатыйРазмер));
	    win.скажи(фм("\t\tсжатыйРазмер = %d\n", de.сжатыйРазмер));
	    win.скажи(фм("\t\tдлинаим = %d\n", длинаим));
	    win.скажи(фм("\t\tэкстрадлин = %d\n", экстрадлин));

	if (de.флаги & 1)
	    throw new ЗипИскл("кодирование не поддерживается");

	цел i;
	i = de.смещение + 30 + длинаим + экстрадлин;
	if (i + de.сжатыйРазмер > смещКПоследнЗаписи)
	    throw new ЗипИскл("неверная запись папки 5");

	de.сжатыеДанные = данные[i .. i + de.сжатыйРазмер];
	debug(print) arrayPrint(de.сжатыеДанные);

	switch (de.методСжатия)
		{
			case 0:
			de.расжатыеДанные = de.сжатыеДанные;
			return de.расжатыеДанные;

			case 8:



			de.расжатыеДанные = cast(ббайт[])std.zlib.uncompress(cast(проц[])de.сжатыеДанные, de.расжатыйРазмер, -15);
			return de.расжатыеДанные;

			default:
			throw new ЗипИскл("неподдерживаемый метод сжатия");
		}
    }

    бкрат ДайБкрат(цел i)
    {
	version (LittleEndian)
	{
	    return *cast(бкрат *)&данные[i];
	}
	else
	{
	    ббайт b0 = данные[i];
	    ббайт b1 = данные[i + 1];
	    return (b1 << 8) | b0;
	}
    }

    бцел ДайБцел(цел i)
    {
	version (LittleEndian)
	{
	    return *cast(бцел *)&данные[i];
	}
	else
	{
	    return bswap(*cast(бцел *)&данные[i]);
	}
    }

    проц поставьБкрат(цел i, бкрат us)
    {
	version (LittleEndian)
	{
	    *cast(бкрат *)&данные[i] = us;
	}
	else
	{
	    данные[i] = cast(ббайт)us;
	    данные[i + 1] = cast(ббайт)(us >> 8);
	}
    }

    проц поставьБцел(цел i, бцел ui)
    {
	version (BigEndian)
	{
	    ui = bswap(ui);
	}
	*cast(бцел *)&данные[i] = ui;
    }
}
