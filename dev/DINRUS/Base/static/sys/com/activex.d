module sys.com.activex;
import sys.common, tpl.args, stdrus;

alias sys.WinStructs.ВАРИАНТ АРГВАРИАНТА;
alias sys.WinIfaces.ITypeInfo ИИнфОТипе;
alias sys.WinStructs.ВАРИАНТ Вар, Варарг;

АРГВАРИАНТА вар(...)
{
    АРГВАРИАНТА вариант;

    if (_arguments.length < 1)
        return ВАРИАНТ.init;

    if(_arguments.length == 1)
    {
        /* Ткст */

        if (_arguments[0] == typeid(шим[]))
        {
            вариант.вт = ПТипВарианта.БинТекст;
            вариант.бстрЗнач = cast(шим*) (ва_арг!(ткст)(_argptr) ~ "\0");
        }

        else if (_arguments[0] == typeid(ткст))
        {
            вариант.вт = ПТипВарианта.БинТекст;
            шим[] buf = вЮ16(ва_арг!(ткст)(_argptr) ~ "\0");
            вариант.бстрЗнач = СисРазместиТкст( cast(шим*)(buf.ptr) );
        }

        /* Беззначные Целые */

        else if (_arguments[0] == typeid(бул))
        {
            вариант.вт = ПТипВарианта.Бул;            
            if(ва_арг!(бул)(_argptr) == true)
                вариант.булЗнач = 1;
            else
                вариант.булЗнач = 0;                
        }
        else if (_arguments[0] == typeid(ббайт))
        {
            вариант.вт = ПТипВарианта.Бц1; /* Не уверен. */
            вариант.ббайтЗнач = ва_арг!(ббайт)(_argptr);
        }
        else if (_arguments[0] == typeid(бкрат))
        {
            вариант.вт = ПТипВарианта.Бц2; /* Не уверен. */
            вариант.бкратЗнач = ва_арг!(бкрат)(_argptr);
        }
        else if (_arguments[0] == typeid(бцел))
        {
            вариант.вт = ПТипВарианта.Бц4; /* Не уверен. */
            вариант.бцелЗнач = ва_арг!(бцел)(_argptr);
        }
        else if (_arguments[0] == typeid(бдол)) /* 8 биты */
        {
            вариант.вт = ПТипВарианта.Бц4; /* 4 биты -- дол won't fit! */
            вариант.бдолЗнач = ва_арг!(бдол)(_argptr);
        }


        /* Целые Со Знаком */

        else if (_arguments[0] == typeid(байт))
        {
            вариант.вт = ПТипВарианта.Ц1; /* Не уверен. */
            вариант. байтЗнач = ва_арг!(байт)(_argptr);
        }
        else if (_arguments[0] == typeid(крат))
        {
            вариант.вт = ПТипВарианта.Ц2; 
            вариант.кратЗнач = ва_арг!(крат)(_argptr);
        }
        else if (_arguments[0] == typeid(цел))
        {
            вариант.вт = ПТипВарианта.Ц4; 
            вариант.целЗнач = ва_арг!(цел)(_argptr);
        }
        else if (_arguments[0] == typeid(дол)) /* 8 биты */
        {
            вариант.вт = ПТипВарианта.Ц4; /* 4 биты -- дол might not fit! */
            вариант.долЗнач = cast(цел) ва_арг!(дол)(_argptr);
        }

        /* Плавающая Точка */

        else if (_arguments[0] == typeid(плав))
        {
            вариант.вт = ПТипВарианта.Р4; 
            вариант.плавЗнач = ва_арг!(плав)(_argptr);
        }
        else if (_arguments[0] == typeid(дво))
        {
            вариант.вт = ПТипВарианта.Р8; 
            вариант.двоЗнач = ва_арг!(дво)(_argptr);
        }

        /* Объекты */

		else if (_arguments[0] == typeid(Object)) 
			/* need to be an AXO to work right now */
		{
			вариант.вт = ПТипВарианта.ПоСсылке; //ПТипВарианта.СохранённыйОбъект; /* I doubt this is right. */
			вариант.байреф = cast(ук)( ва_арг!(Object)(_argptr) );
				/* need to дай some kind of pointer from the AXO object */
		}		

        else
            throw new ИсклАктивОбъ("вар не представляет, что с этим делать.");

    }
    else 
        throw new ИсклАктивОбъ("[нереализованно] вар ещё не способен к использованию нескольких аргументов");

    return вариант;
}

extern(D):

class ИсклАктивОбъ: Исключение
{
 this(ткст сооб);
}

class АктивОбъ
{
    this(ткст имяПриложения);
    ~this();
    проц загрузиСостав();
    проц загрузиСостав(ИИнфОТипе иот);
	проц покажиСостав();	
    ВАРИАНТ дай(ткст член);
    проц установи(ткст член, АРГВАРИАНТА арг);
    проц установиПоСсыл(ткст член, АРГВАРИАНТА арг);
    ВАРИАНТ вызови(ткст член,...);
}
АктивОбъ объАктив(ткст арг);


