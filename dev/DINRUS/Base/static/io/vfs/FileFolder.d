module io.vfs.FileFolder;

private import io.device.File;
private import Путь = io.Path;
private import exception;
public import io.vfs.model;
private import io.model;
private import time.Time : Время;

/*******************************************************************************

        Represents a physical папка in a файл system. Use one of these
        в_ адрес specific пути (подст-trees) внутри the файл system.

*******************************************************************************/

class ФайлПапка : ПапкаВфс
{
        private ткст          путь;
        private СтатсВфс        статс;

        /***********************************************************************

                Созд a файл папка with the given путь. 

                Опция 'создай' will создай the путь when установи да, 
                or reference an existing путь иначе

        ***********************************************************************/

        this (ткст путь, бул создать=нет)
        {
                this.путь = открой (Путь.стандарт(путь.dup), создать);
        }

        /***********************************************************************

                создай a ФайлПапка as a Group member

        ***********************************************************************/

        private this (ткст путь, ткст имя)
        {
                this.путь = Путь.объедини (путь, имя);
        }

        /***********************************************************************

                explicitly создай() or открой() a named папка

        ***********************************************************************/

        private this (ФайлПапка родитель, ткст имя, бул создай=нет)
        {
                assert (родитель);
                this.путь = открой (Путь.объедини(родитель.путь, имя), создай);
        }

        /***********************************************************************

                Возвращает крат имя

        ***********************************************************************/

        final ткст имя ()
        {
                return Путь.разбор(путь).имя;
        }

        /***********************************************************************

                Возвращает дол имя

        ***********************************************************************/

        final ткст вТкст ()
        {
                return путь;
        }

        /***********************************************************************

                A папка is being добавьed or removed из_ the иерархия. Use 
                this в_ тест for validity (or whatever) и throw exceptions 
                as necessary

                Here we тест for папка overlap, и bail-out when найдено.

        ***********************************************************************/

        final проц проверь (ПапкаВфс папка, бул mounting)
        {       
                if (mounting && cast(ФайлПапка) папка)
                   {
                   auto ист = Путь.ФС.псеп_в_конце (this.вТкст);
                   auto приёмн = Путь.ФС.псеп_в_конце (папка.вТкст);

                   auto длин = ист.length;
                   if (длин > приёмн.length)
                       длин = приёмн.length;

                   if (ист[0..длин] == приёмн[0..длин])
                       ошибка ("папки '"~приёмн~"' и '"~ист~"' накладываются");
                   }
        }

        /***********************************************************************

                Возвращает contained файл представление 

        ***********************************************************************/

        final ФайлВфс файл (ткст имя)
        {
                return new ХостФайла (Путь.объедини (путь, имя));
        }

        /***********************************************************************

                Возвращает contained папка представление 

        ***********************************************************************/

        final ЗаписьПапкиВфс папка (ткст путь)
        {
                return new ХостПапки (this, путь);
        }

        /***********************************************************************

                Удали the папка subtree. Use with care!

        ***********************************************************************/

        final ПапкаВфс очисть ()
        {
                Путь.удали (Путь.коллируй(путь, "*", да));
                return this;
        }

        /***********************************************************************

                Is папка записываемый?

        ***********************************************************************/

        final бул записываемый ()
        {
                return Путь.записываем_ли (путь);
        }

        /***********************************************************************

                Возвращает контент information about this папка

        ***********************************************************************/

        final ПапкиВфс сам ()
        {
                return new ГруппаПапок (this, нет);
        }

        /***********************************************************************

                Возвращает subtree of папки совпадают the given имя

        ***********************************************************************/

        final ПапкиВфс дерево ()
        {
                return new ГруппаПапок (this, да);
        }

        /***********************************************************************

                Iterate over the установи of immediate ветвь папки. This is 
                useful for reflecting the иерархия

        ***********************************************************************/

        final цел opApply (цел delegate(ref ПапкаВфс) дг)
        {
                цел результат;

                foreach (папка; папки(да))  
                        {
                        ПапкаВфс x = папка;  
                        if ((результат = дг(x)) != 0)
                             break;
                        }
                return результат;
        }

        /***********************************************************************

                Close и/or synchronize changes made в_ this папка. Each
                driver should возьми advantage of this as appropriate, perhaps
                combining multИПle файлы together, либо possibly copying в_ a 
                remote location

        ***********************************************************************/

        ПапкаВфс закрой (бул подай = да)
        {
                return this;
        }

        /***********************************************************************
        
                Sweep owned папки 

        ***********************************************************************/

        private ФайлПапка[] папки (бул собери)
        {
                ФайлПапка[] папки;

                статс = статс.init;
                foreach (инфо; Путь.ветви (путь))
                         if (инфо.папка)
                            {
                            if (собери)
                                папки ~= new ФайлПапка (инфо.путь, инфо.имя);
                            ++статс.папки;
                            }
                         else
                            {
                            статс.байты += инфо.байты; 
                           ++статс.файлы;
                            }

                return папки;         
        }

        /***********************************************************************

                Sweep owned файлы

        ***********************************************************************/

        private ткст[] файлы (ref СтатсВфс статс, ФильтрВфс фильтр = пусто)
        {
                ткст[] файлы;

                foreach (инфо; Путь.ветви (путь))
                         if (инфо.папка is нет)
                             if (фильтр is пусто || фильтр(&инфо))
                                {
                                файлы ~= Путь.объедини (инфо.путь, инфо.имя);
                                статс.байты += инфо.байты; 
                                ++статс.файлы;
                                }

                return файлы;         
        }

        /***********************************************************************

                Throw an исключение

        ***********************************************************************/

        private ткст ошибка (ткст сооб)
        {
                throw new ВфсИскл (сооб);
        }

        /***********************************************************************

                Созд or открой the given путь, и detect путь ошибки

        ***********************************************************************/

        private ткст открой (ткст путь, бул создай)
        {
                if (Путь.есть_ли (путь))
                   {
                   if (! Путь.папка_ли (путь))
                       ошибка ("ФайлПапка.открой :: путь существует, но не из папки: "~путь);
                   }
                else
                   if (создай)
                       Путь.создайПуть (путь);
                   else
                      ошибка ("ФайлПапка.открой :: путь не существует: "~путь);
                return путь;
        }
}


/*******************************************************************************

        Represents a группа of файлы (need this declared here в_ avoопр
        a bunch of bizarre compiler warnings)

*******************************************************************************/

class ГруппаФайлов : ФайлыВфс
{
        private ткст[]        группа;          // установи of filtered filenames
        private ткст[]        хосты;          // установи of containing папки
        private СтатсВфс        статс;          // статс for contained файлы

        /***********************************************************************

        ***********************************************************************/

        this (ГруппаПапок хост, ФильтрВфс фильтр)
        {
                foreach (папка; хост.члены)
                        {
                        auto файлы = папка.файлы (статс, фильтр);
                        if (файлы.length)
                           {
                           группа ~= файлы;
                           //хосты ~= папка.вТкст;
                           }
                        }
        }

        /***********************************************************************

                Iterate over the установи of contained ФайлВфс экземпляры

        ***********************************************************************/

        final цел opApply (цел delegate(ref ФайлВфс) дг)
        {
                цел  результат;
                auto хост = new ХостФайла;

                foreach (файл; группа)    
                        {    
                        ФайлВфс x = хост;
                        хост.путь.разбор (файл);
                        if ((результат = дг(x)) != 0)
                             break;
                        } 
                return результат;
        }

        /***********************************************************************

                Return the total число of записи 

        ***********************************************************************/

        final бцел файлы ()
        {
                return группа.length;
        }

        /***********************************************************************

                Return the total размер of все файлы 

        ***********************************************************************/

        final бдол байты ()
        {
                return статс.байты;
        }
}


/*******************************************************************************

        A установи of папки representing a выделение. This is where файл 
        выделение is made, и образец-matched папка subsets can be
        выкиньed. You need one of these в_ expose statistics (such as
        файл or папка счёт) of a selected папка группа 

*******************************************************************************/

private class ГруппаПапок : ПапкиВфс
{
        private ФайлПапка[] члены;           // папки in группа

        /***********************************************************************

                Созд a поднабор группа

        ***********************************************************************/

        private this () {}

        /***********************************************************************

                Созд a папка группа включая the предоставленный папка и
                (optionally) все ветвь папки

        ***********************************************************************/

        private this (ФайлПапка корень, бул рекурсия)
        {
                члены = корень ~ скан (корень, рекурсия);   
        }

        /***********************************************************************

                Iterate over the установи of contained ПапкаВфс экземпляры

        ***********************************************************************/

        final цел opApply (цел delegate(ref ПапкаВфс) дг)
        {
                цел  результат;

                foreach (папка; члены)  
                        {
                        ПапкаВфс x = папка;  
                        if ((результат = дг(x)) != 0)
                             break;
                        }
                return результат;
        }

        /***********************************************************************

                Return the число of файлы in this группа

        ***********************************************************************/

        final бцел файлы ()
        {
                бцел файлы;
                foreach (папка; члены)
                         файлы += папка.статс.файлы;
                return файлы;
        }

        /***********************************************************************

                Return the total размер of все файлы in this группа

        ***********************************************************************/

        final бдол байты ()
        {
                бдол байты;

                foreach (папка; члены)
                         байты += папка.статс.байты;
                return байты;
        }

        /***********************************************************************

                Return the число of папки in this группа

        ***********************************************************************/

        final бцел папки ()
        {
                if (члены.length is 1)
                    return члены[0].статс.папки;
                return члены.length;
        }

        /***********************************************************************

                Return the total число of записи in this группа

        ***********************************************************************/

        final бцел записи ()
        {
                return файлы + папки;
        }

        /***********************************************************************

                Возвращает поднабор of папки совпадают the given образец

        ***********************************************************************/

        final ПапкиВфс поднабор (ткст образец)
        {  
                Путь.ПутеПарсер парсер;
                auto установи = new ГруппаПапок;

                foreach (папка; члены)    
                         if (Путь.совпадение (парсер.разбор(папка.путь).имя, образец))
                             установи.члены ~= папка; 
                return установи;
        }

        /***********************************************************************

                Возвращает установи of файлы совпадают the given образец

        ***********************************************************************/

        final ГруппаФайлов каталог (ткст образец)
        {
                бул foo (ИнфОВфс инфо)
                {
                        return Путь.совпадение (инфо.имя, образец);
                }

                return каталог (&foo);
        }

        /***********************************************************************

                Возвращает установи of файлы conforming в_ the given фильтр

        ***********************************************************************/

        final ГруппаФайлов каталог (ФильтрВфс фильтр = пусто)
        {       
                return new ГруппаФайлов (this, фильтр);
        }

        /***********************************************************************

                Internal routine в_ traverse the папка дерево

        ***********************************************************************/

        private final ФайлПапка[] скан (ФайлПапка корень, бул рекурсия) 
        {
                auto папки = корень.папки (рекурсия);
                if (рекурсия)
                    foreach (ветвь; папки)
                             папки ~= скан (ветвь, рекурсия);
                return папки;
        }
}


/*******************************************************************************

        A хост for папки, currently использован в_ harbor создай() и открой() 
        methods only

*******************************************************************************/

private class ХостПапки : ЗаписьПапкиВфс
{       
        private ткст          путь;
        private ФайлПапка      родитель;

        /***********************************************************************

        ***********************************************************************/

        private this (ФайлПапка родитель, ткст путь)
        {
                this.путь = путь;
                this.родитель = родитель;
        }

        /***********************************************************************

        ***********************************************************************/

        final ПапкаВфс создай ()
        {
                return new ФайлПапка (родитель, путь, да);
        }

        /***********************************************************************

        ***********************************************************************/

        final ПапкаВфс открой ()
        {
                return new ФайлПапка (родитель, путь, нет);
        }

        /***********************************************************************

                Test в_ see if a папка есть_ли

        ***********************************************************************/

        бул есть_ли ()
        {
                try {
                    открой();
                    return да;
                    } catch (ВВИскл x) {}
                return нет;
        }
}


/*******************************************************************************

        Represents things you can do with a файл 

*******************************************************************************/

private class ХостФайла : ФайлВфс
{
        private Путь.ПутеПарсер путь;

        /***********************************************************************

        ***********************************************************************/

        this (ткст путь = пусто)
        {
                this.путь.разбор (путь);
        }

        /***********************************************************************

                Возвращает крат имя

        ***********************************************************************/

        final ткст имя()
        {
                return путь.файл;
        }

        /***********************************************************************

                Возвращает дол имя

        ***********************************************************************/

        final ткст вТкст ()
        {
                return путь.вТкст;
        }

        /***********************************************************************

                Does this файл exist?

        ***********************************************************************/

        final бул есть_ли()
        {
                return Путь.есть_ли (путь.вТкст);
        }

        /***********************************************************************

                Return the файл размер

        ***********************************************************************/

        final бдол размер()
        {
                return Путь.размерФайла(путь.вТкст);
        }

        /***********************************************************************

                Созд a new файл экземпляр

        ***********************************************************************/

        final ФайлВфс создай ()
        {
                Путь.создайФайл(путь.вТкст);
                return this;
        }

        /***********************************************************************

                Созд a new файл экземпляр и наполни with поток

        ***********************************************************************/

        final ФайлВфс создай (ИПотокВвода ввод)
        {
                создай.вывод.копируй(ввод).закрой;
                return this;
        }

        /***********************************************************************

                Созд и копируй the given исток

        ***********************************************************************/

        ФайлВфс копируй (ФайлВфс исток)
        {
                auto ввод = исток.ввод;
                scope (exit) ввод.закрой;
                return создай (ввод);
        }

        /***********************************************************************

                Созд и копируй the given исток, и удали the исток

        ***********************************************************************/

        final ФайлВфс перемести (ФайлВфс исток)
        {
                копируй (исток);
                исток.удали;
                return this;
        }

        /***********************************************************************

                Return the ввод поток. Don't forget в_ закрой it

        ***********************************************************************/

        final ИПотокВвода ввод ()
        {
                return new Файл (путь.вТкст);
        }

        /***********************************************************************

                Return the вывод поток. Don't forget в_ закрой it

        ***********************************************************************/

        final ИПотокВывода вывод ()
        {
                return new Файл (путь.вТкст, Файл.ЗапСущ);
        }

        /***********************************************************************

                Удали this файл

        ***********************************************************************/

        final ФайлВфс удали ()
        {
                Путь.удали (путь.вТкст);
                return this;
        }

        /***********************************************************************

                Duplicate this Запись

        ***********************************************************************/

        final ФайлВфс dup()
        {
                auto возвр = new ХостФайла;
                возвр.путь = путь.dup;
                return возвр;
        }
        
        /***********************************************************************

                Modified время of the файл

        ***********************************************************************/

        final Время изменён ()
        {
                return Путь.штампыВремени(путь.вТкст).изменён;
        }
}


debug (ФайлПапка)
{

/*******************************************************************************

*******************************************************************************/

import io.Stdout;
import io.device.Array;

проц main()
{
        auto корень = new ФайлПапка ("d:/d/import/temp", да);
        корень.папка("тест").создай;
        корень.файл("тест.txt").создай(new Массив("hello"));
        Стдвыв.форматнс ("тест.txt.length = {}", корень.файл("тест.txt").размер);

        корень = new ФайлПапка ("c:/");
        auto установи = корень.сам;

        Стдвыв.форматнс ("сам.файлы = {}", установи.файлы);
        Стдвыв.форматнс ("сам.байты = {}", установи.байты);
        Стдвыв.форматнс ("сам.папки = {}", установи.папки);
        Стдвыв.форматнс ("сам.записи = {}", установи.записи);
/+
        установи = корень.дерево;
        Стдвыв.форматнс ("дерево.файлы = {}", установи.файлы);
        Стдвыв.форматнс ("дерево.байты = {}", установи.байты);
        Стдвыв.форматнс ("дерево.папки = {}", установи.папки);
        Стдвыв.форматнс ("дерево.записи = {}", установи.записи);

        //foreach (папка; установи)
        //Стдвыв.форматнс ("дерево.папка '{}' имеется {} файлы", папка.имя, папка.сам.файлы);

        auto склей = установи.каталог ("s*");
        Стдвыв.форматнс ("склей.файлы = {}", склей.файлы);
        Стдвыв.форматнс ("склей.байты = {}", склей.байты);
+/
        //foreach (файл; склей)
        //         Стдвыв.форматнс ("склей.имя '{}' '{}'", файл.имя, файл.вТкст);
}
}
