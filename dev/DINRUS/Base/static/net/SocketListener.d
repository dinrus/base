
module net.SocketListener;

private import  thread;

private import         io.model;

/******************************************************************************

        Абстрактный класс для асинхронного прослушивания входящих данных на
        сокете. Может использоваться с Датаграмма & Мультикаст,
        и также может пригодиться вместе с базовым Сокет Проводом.
        Заметьте, что Датаграмма должен первым привязываться к локальному
        сетевому адресу через вяжи(), а Мультикаст  должен первым становиться
        членом мультикастной группы через свой объедини() метод. Также помните,
        что "подлежащая" нить конструктором не запускается;
        это следует делать вручную через старт() метод.

******************************************************************************/

class СокетСлушатель
{
        private бул                    выйти;
        private Нить                  нить;
        private ИБуфер                 буфер;
        private ИПровод                провод;
        private цел                     предел = 3;

        /**********************************************************************

                Конструирует слушатель с реквизитными аргументами. Указанный
                буфер наполняется через предоставленный экземпляр
               ИСокетЧитатель пред его передачей в сообщи()
                метод. Нужны все аргументы.

        **********************************************************************/

        this (ИБуфер буфер)
        {
                assert (буфер);
                this (буфер.ввод, буфер);
        }

        /**********************************************************************

		        Конструирует слушатель с реквизитными аргументами. Указанный
		        буфер наполняется через предоставленный экземпляр
		        ИСокетЧитатель пред его передачей в сообщи()
		        метод. Нужны все аргументы.
        **********************************************************************/

        this (ИПотокВвода поток, ИБуфер буфер)
        {
                assert (поток);
                this.буфер = буфер;
                this.провод = поток.провод;
                нить = new Нить (&пуск);
                нить.демон = да;
        }

        /***********************************************************************

                Обратный уведомительный вызов, происходящий когда слушателю
                есть о чём отчитаться.В буфере содержится контент,
                который был доступен в операции читай().

        ***********************************************************************/

        abstract проц сообщи (ИБуфер буфер);

        /***********************************************************************

                Обрабатывает условия ошибки в потоке прослушивателя.

        ***********************************************************************/

        abstract проц исключение (ткст сооб);

        /**********************************************************************

                Запускает прослушиватель.

        **********************************************************************/

        проц выполни ()
        {
                нить.старт;
        }

        /**********************************************************************

                Останавливает прослушиватель. Эта нить прекращается только после
                ответа на запрос текущ читай(), или прерывается.

        **********************************************************************/

        проц отмена ()
        {
                выйти = да;
        }

        /**********************************************************************

                Установить максимальное получаемое число исключений, которое
                выдерживает этот прослушиватель. Установка нулевого предела
                означает не выдерживание никаких ошибок, в то время как предел два
                позволит пережить две ошибки последовательно.

        **********************************************************************/

        проц устЛимитОшибок (бкрат предел)
        {
                this.предел = предел + 1;
        }

        /**********************************************************************

                Выполнение этой нить, как правило, находится в
                читай() методе, принадлежащему проводу, указываемому при
                конструировании. Можно вызвать отмена(), чтобы запретить
                дальнейшее продолжение выполнения, но это реально не прервёт
                блокированную операцию читай().

                Помните, что все исключения направляются обработчику,
                реализованному в экземпляре класса.

        **********************************************************************/

        private проц пуск ()
        {
                цел lives = предел;

                while (lives > 0)
                       try {
                           // старт with a clean slate
                           буфер.сожми;

                           // жди for incoming контент
                           auto результат = буфер.писатель (&провод.ввод.читай);

                           // время в_ выйти? Note that a v0.95 compiler bug
                           // prohibits 'break' из_ exiting the try{} блок
                           if (выйти ||
                              (результат is провод.Кф && !провод.жив_ли))
                               lives = 0;
                           else
                              {
                              // invoke обрвызов
                              сообщи (буфер);
                              lives = предел;
                              }
                           } catch (Объект x)
                                    // время в_ выйти?
                                    if (выйти || !провод.жив_ли)
                                        break;
                                    else
                                       {
                                       исключение (x.вТкст);
                                       if (--lives is 0)
                                           исключение ("Поток прослушки оборван");
                                       }
        }
}



