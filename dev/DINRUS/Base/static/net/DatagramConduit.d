/*******************************************************************************

        copyright:      Copyright (c) 2004 Kris Bell. Все права защищены

        license:        BSD стиль: $(LICENSE)

        version:        Mar 2004 : Initial release
        version:        Dec 2006 : South Pacific release

        author:         Kris

*******************************************************************************/

module net.DatagramConduit;

public  import  io.device.Conduit;

package import  net.Socket,
        net.SocketConduit;

/*******************************************************************************

        Датаграммы предоставляют low-overhead, non-reliable механизм передачи данных.

        Датаграммы не 'подключен'ы так же точно как ПУТ сокет; не требуется
        слушай() или прими(), чтобы принять датаграмму, кроме того, данные
        могут приходить из разных источников. Но сокет датаграмм однако может
        всё ещё использовать метод подключись() как ПУТ сокет. Когда подключен,
        методы читай() и пиши() будут ограничены до единичного адреса,
        вместо того чтобы быть открытыми. Поэтому применение подключись() сделает
        аргумент адреса, куда всё читай() и пиши() irrelevant. Без
        подключись(), метод пиши() должен быть снабжён адресом, а метод
        читай() тоже адресом, идентифицирующим исток данных.

        При использовании как слушателя сначала следует привязать сокет к
        локальному адаптеру. Этого можно достичь привязкой сокета к
        АдресИнтернета, построенному только по порту (АДР_ЛЮБОЙ), чем
        возникает запрос к ОС на присвоение адреса локального сетевого адаптера.

*******************************************************************************/

class ДатаграммПровод : СокетПровод
{
    /***********************************************************************

            Создаёт сокет датаграмм читай/пиши.

    ***********************************************************************/

    this ()
    {
        super (ПСемействоАдресов.ИНЕТ, ПТипСок.ДГрамма, ППротокол.ИП);
    }

    /***********************************************************************

            Наполняет предоставленный Массив из этого сокета. This will stall,
            пока не получит какие-либо данные, или происходит таймаут. Предполагается,
            что датаграмма была подключена.

            Возвращает число байтов, считанных в вывод, или Кф, если
            сокет не читается.

    ***********************************************************************/

    override т_мера читай (проц[] ист)
    {
        return читай (ист, пусто);
    }

    /***********************************************************************

            Читает байты из доступной датаграммы, преобразуя в заданный Массив.
            When предоставленный, the 'из_' адрес will be populated with the
            origin of the incoming данные. Note that we employ the таймаут
            mechanics exposed via our СокетПровод superclass.

            Возвращает the число of байты читай из_ the ввод, or Кф if
            the сокет cannot читай

    ***********************************************************************/

    т_мера читай (проц[] приёмн, Адрес из_)
    {
        т_мера читатель (проц[] приёмн)
        {
            return (приёмн.length) ? (из_ ? сокет.принять_от(приёмн, из_) : сокет.принять_от(приёмн)) : 0;
        }

        return super.читай (приёмн, &читатель);
    }

    /***********************************************************************

            Зап the предоставленный контент куда the сокет. This will stall
            until the сокет responds in some manner. We assume the
            datagram имеется been подключен.

            Возвращает the число of байты sent куда the вывод, or Кф if
            the сокет cannot пиши

    ***********************************************************************/

    override т_мера пиши (проц[] ист)
    {
        return пиши (ист, пусто);
    }

    /***********************************************************************

            Зап an Массив куда the specified адрес. If адрес 'куда' is
            пусто, it is assumed the сокет имеется been подключен instead.

            Возвращает the число of байты sent куда the вывод, or Кф if
            the сокет cannot пиши

    ***********************************************************************/

    т_мера пиши (проц[] ист, Адрес куда)
    {
        цел счёт = Кф;

        if (ист.length)
        {
            счёт = (куда) ? сокет.отправь_на(ист, куда) : сокет.отправь_на(ист);
            if (счёт <= 0)
                счёт = Кф;
        }
        return счёт;
    }
}



/******************************************************************************

*******************************************************************************/

debug (Dgram)
{
    import io.Console;
    import net.DatagramConduit;

    import net.InternetAddress;

    проц main()
    {
        auto адр = new АдресИнтернета ("127.0.0.1", 8080);

        // слушай for datagrams on the local адрес
        auto gram = new ДатаграммПровод;
        gram.вяжи (cast(Адрес) адр);

        // пиши куда the local адрес
        gram.пиши ("hello", cast(Адрес) адр);

        // we are listening also ...
        сим[8] врем;
        auto x = new АдресИнтернета;
        auto байты = gram.читай (врем, cast(Адрес) x);
        Квывод (x) (врем[0..байты]).нс;
    }
}
