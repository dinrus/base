/*******************************************************************************

        copyright:      Copyright (c) 2007 Kris Bell. Все права защищены

        license:        BSD стиль: $(LICENSE)

        version:        Apr 2007: разбей away из_ utc

        author:         Kris

*******************************************************************************/

module time.WallClock;

public  import  time.Time;

private import  time.Clock;

private import  sys.Common;

/******************************************************************************

        Показывает время относительно  1-го Янв, 1 года н.э. Эти значения
        основаны на часовом тике в 100 наносекунд, что даёт им вринтервал в более чем
        10,000 лет. Эти единицы времени лежат в основании большей части функционала,
        связанного со временем и датой, в Динрусе.

        Заметьте, что преобразование между временем UTC и Wall выполняется
        в соответствии со средствами ОС. В частности, системы Win32 ведут
        себя по иному в Posix, во время вычисления времени daylight-savings
        (Win32 вычислят по времени вызова, а система Posix вычисляет, основываясь на
        предоставленной точке во времени). Система Posix, как правило, должна
        иметь переменную среды ЧП, установленную в валидный дескриптор.

*******************************************************************************/

export struct Куранты
{
        version (Win32)
        {
                /***************************************************************

                        Возвращает текукщее локальное время.

                ***************************************************************/

                export static Время сейчас ()
                {
                        return Часы.сейчас - локальнаяРазница;
                }

                /***************************************************************

                        Возвращает часовой пояс относительно GMT. Это значение 
                        отрицательно к западу от GMT (Гринвичского меридиана).

                ***************************************************************/

              export  static ИнтервалВремени зона ()
                {
                        ИНФОЧП чп =void;

                        auto врем = ДайИнфОЧП (&чп);
                        return ИнтервалВремени.изМин(-чп.Разница);
                }

                /***************************************************************

                        Устанавливает поля, представляющие локальную версию 
                        текущего времени UTC. все значения должны совпадать внутри 
                        домена, поддерживаемого ОС.

                ***************************************************************/

               export static ДатаВремя вДату ()
                {
                        return вДату (Часы.сейчас);
                }

                /***************************************************************

                  Устанавливает поля, представляющие локальную версию 
                  текущего времени UTC. все значения должны совпадать внутри 
                  домена, поддерживаемого ОС.

                ***************************************************************/

               export static ДатаВремя вДату (Время utc)
                {
                        return Часы.вДату (utc - локальнаяРазница);
                }

                /***************************************************************

                        Преобразует поля Даты в локальное время.

                ***************************************************************/

               export static Время изДаты (ref ДатаВремя дата)
                {
                        return (Часы.изДаты(дата) + локальнаяРазница);
                }

                /***************************************************************

                        Получает локальную разницу, включая настройку DST.
                        Заметьте, что win32 вычисляет DST на основе времени вызова,
                        а не точки во времени, представленной аргументом.
                         
                ***************************************************************/

                private static ИнтервалВремени локальнаяРазница () 
                { 
                       цел разница; 
                       ИНФОЧП чп =void; 

                       switch (ДайИнфОЧП (&чп)) 
                              { 
                              default: 
                                   разница = чп.Разница; 
                                   break; 
                              case 1: 
                                   разница = чп.Разница + чп.СтандартнаяРазница; 
                                   break; 
                              case 2: 
                                   разница = чп.Разница + чп.РазницаДейлайт; 
                                   break; 
                              } 

                       return ИнтервалВремени.изМин(разница); 
               }
        }

        version (Posix)
        {
                /***************************************************************

                        Возвращает текущее локальное время.

                ***************************************************************/

              export  static Время сейчас ()
                {
                        tm t = void;
                        значврем tv = void;
                        gettimeofday (&tv, пусто);
                        localtime_r (&tv.сек, &t);
                        tv.сек = timegm (&t);
                        return Часы.преобразуй (tv);
                }

                /***************************************************************

                       Возвращает частовой пояс относительно GMT. Это значение 
                        отрицательно к западу от GMT.

                ***************************************************************/

               export static ИнтервалВремени зона ()
                {
                        version (darwin)
                                {
                                timezone_t чп =void;
                                gettimeofday (пусто, &чп);
                                return ИнтервалВремени.изМин(-чп.tz_minuteswest);
                                }
                             else
                                return ИнтервалВремени.изСек(-timezone);
                }

                /***************************************************************

                        Набор fields в_ represent a local version of the 
                        current UTC время. все значения must fall внутри 
                        the домен supported by the OS

                ***************************************************************/

               export static ДатаВремя вДату ()
                {
                        return вДату (Часы.сейчас);
                }

                /***************************************************************

                        Набор fields в_ represent a local version of the 
                        предоставленный UTC время. все значения must fall внутри 
                        the домен supported by the OS

                ***************************************************************/

               export static ДатаВремя вДату (Время utc)
                {
                        ДатаВремя dt =void;
                        auto значврем = Часы.преобразуй (utc);
                        dt.время.миллисек = значврем.микросек / 1000;

                        tm t =void;
                        localtime_r (&значврем.сек, &t);
        
                        dt.дата.год    = t.tm_year + 1900;
                        dt.дата.месяц   = t.tm_mon + 1;
                        dt.дата.день     = t.tm_mday;
                        dt.дата.деньнед     = t.tm_wday;
                        dt.дата.эра     = 0;
                        dt.время.часы   = t.tm_hour;
                        dt.время.минуты = t.tm_min;
                        dt.время.сек = t.tm_sec;

                        Часы.setDoy(dt);
                        return dt;
                }

                /***************************************************************

                        Преобразовать поля Дата в локальное время

                ***************************************************************/

              export  static Время изДаты (ref ДатаВремя dt)
                {
                        tm t =void;

                        t.tm_year = dt.дата.год - 1900;
                        t.tm_mon  = dt.дата.месяц - 1;
                        t.tm_mday = dt.дата.день;
                        t.tm_hour = dt.время.часы;
                        t.tm_min  = dt.время.минуты;
                        t.tm_sec  = dt.время.сек;

                        auto сек = mktime (&t);
                        return Время.epoch1970 + ИнтервалВремени.изСек(сек) 
                                              + ИнтервалВремени.изМиллисек(dt.время.миллисек);
                }
        }

        /***********************************************************************

        ***********************************************************************/
        
      export  static Время вМестное (Время utc)
        {
                auto mod = utc.тики % ИнтервалВремени.ТиковВМиллисек;
                auto дата=вДату(utc);
                return Часы.изДаты(дата) + ИнтервалВремени(mod);
        }

        /***********************************************************************

        ***********************************************************************/
        
      export  static Время вЮтс (Время wall) //UTC = ВКВ = Всемирное Координированное Время
        {
                auto mod = wall.тики % ИнтервалВремени.ТиковВМиллисек;
                auto дата=Часы.вДату(wall);
                return изДаты(дата) + ИнтервалВремени(mod);
        }
}


version (Posix)
{
    version (darwin) {}
    else
    {
        static this()
        {
            tzset();
        }
    }
}
