/*******************************************************************************
        Содержит классы, предоставляющие информацию о локалях, такую как о
        языке и календарях, а также о культурных соглашениях, используемых
        для форматирования дат, валюты и чисел. Используются эти классы при
        написании приложений для междкнародной аудитории.

******************************************************************************/

/**
 * $(MEMBERTABLE
 * $(TR
 * $(TH Interface)
 * $(TH Описание)
 * )
 * $(TR
 * $(TD $(LINK2 #ИСлужбаФормата, ИСлужбаФормата))
 * $(TD Получает объект для контроля за форматированием.)
 * )
 * )
 *
 * $(MEMBERTABLE
 * $(TR
 * $(TH Класс)
 * $(TH Описание)
 * )
 * $(TR
 * $(TD $(LINK2 #Календарь, Календарь))
 * $(TD Представляет время, разделённое на недели, месяцы и годы.)
 * )
 * $(TR
 * $(TD $(LINK2 #Культура, Культура))
 * $(TD Предоставляет информацию о культуре, такую как её имя, календарь, образцы
 * формата даты и чисел.)
 * )
 * $(TR
 * $(TD $(LINK2 #ФорматДатыВремени, ФорматДатыВремени))
 * $(TD Определяет образ форматирования значений времени $(LINK2 #Время, Время)
 * зависящий от культуры.)
 * )
 * $(TR
 * $(TD $(LINK2 #DaylightSavingTime, DaylightSavingTime))
 * $(TD Представляет период of daylight-saving время.)
 * )
 * $(TR
 * $(TD $(LINK2 #Грегориан, Грегориан))
 * $(TD Представляет Грегорианский календарь.)
 * )
 * $(TR
 * $(TD $(LINK2 #Еврейский, Еврейский))
 * $(TD Представляет Еврейский календарь.)
 * )
 * $(TR
 * $(TD $(LINK2 #Hijri, Hijri))
 * $(TD Представляет календарь Хиджри.)
 * )
 * $(TR
 * $(TD $(LINK2 #Японский, Японский))
 * $(TD Представляет Японский календарь.)
 * )
 * $(TR
 * $(TD $(LINK2 #Корейский, Корейский))
 * $(TD Представляет Корейский календарь.)
 * )
 * $(TR
 * $(TD $(LINK2 #ФорматЧисла, ФорматЧисла))
 * $(TD Определяет форматирование чисел, соответствующее текущей культуре.)
 * )
 * $(TR
 * $(TD $(LINK2 #Регион, Регион))
 * $(TD Предоставляет информацию о регионе.)
 * )
 * $(TR
 * $(TD $(LINK2 #Taiwan, Taiwan))
 * $(TD Представляет Тайваньский календарь.)
 * )
 * $(TR
 * $(TD $(LINK2 #ThaiBuddhist, ThaiBuddhist))
 * $(TD Представляет Thai Buddhist Календарь.)
 * )
 * )
 *
 * $(MEMBERTABLE
 * $(TR
 * $(TH Структура)
 * $(TH Описание)
 * )
 * $(TR
 * $(TD $(LINK2 #Время, Время))
 * $(TD Represents время expressed as a дата и время of день.)
 * )
 * $(TR
 * $(TD $(LINK2 #ИнтервалВремени, ИнтервалВремени))
 * $(TD Represents a время интервал.)
 * )
 * )
 */

module text.locale.Core;

private import  exception;

private import  text.locale.Data;

private import  time.Time;

private import  time.chrono.Hijri,
        time.chrono.Korean,
        time.chrono.Taiwan,
        time.chrono.Hebrew,
        time.chrono.Calendar,
        time.chrono.Japanese,
        time.chrono.Gregorian,
        time.chrono.ThaiBuddhist;
		

version (Windows)
private import нативныеМетоды = text.locale.Win32;

version (Posix)
private import нативныеМетоды = text.locale.Posix;


// Инициализирует Массив.
private template массивИз(T)
{
    private T[] массивИз(T[] парамы ...)
    {
        return парамы.dup;
    }
}

private проц ошибка(ткст сооб)
{
    throw new ИсклЛокали (сооб);
}

/**
 * Определяет типы культур, которые могут быть получены из Культура.дайКультуры.
 */
public enum ТипыКультур
{
    Нейтральный = 1,             /// Относится к культурам, которые связаны с каким-либо языком, но не специфичны для страны или региона.
    Особый = 2,            /// Относится к культурам, которые специфичны для страны или региона.
    Все = Нейтральный | Особый /// Относится ко всем культурам.
}


/**
 * $(ANCHOR _ИСлужбаФормата)
 * Получает объект для контроля за форматированием.
 *
 * Класс реализует $(LINK2 #ИСлужбаФормата_дайФормат, дайФормат) для получения объекта, который предоставляет информацию о формате для реализуемого типа.
 * Примечания: ИСлужбаФормата реализуется в $(LINK2 #Культура, Культура), $(LINK2 #ФорматЧисла, ФорматЧисла) и $(LINK2 #ФорматДатыВремени, ФорматДатыВремени),
 * предоставляя локале-специфичное форматирование чисел и значений времени.
 */
public interface ИСлужбаФормата
{

    /**
     * $(ANCHOR ИСлужбаФормата_дайФормат)
     * Retrieves an объект that supports formatting for the specified _тип.
     * Возвращает: The текущ экземпляр if тип is the same _тип as the текущ экземпляр; иначе, пусто.
     * Параметры: тип = An объект that specifies the _тип of formatting в_ retrieve.
     */
    Объект дайФормат(ИнфОТипе тип);

}

/**
 * $(ANCHOR _Culture)
 * Provопрes information about a культура, such as its имя, Календарь и дата и число форматируй образцы.
 * Примечания: text.locale adopts the RFC 1766 стандарт for культура names in the форматируй &lt;language&gt;"-"&lt;регион&gt;.
 * &lt;language&gt; is a lower-case two-letter код defined by ISO 639-1. &lt;регион&gt; is an upper-case
 * two-letter код defined by ISO 3166. Например, "en-GB" is UK English.
 * $(BR)$(BR)There are three типы of культура: invariant, neutral и specific. The invariant культура is not tied в_
 * any specific регион, although it is associated with the English language. A neutral культура is associated with
 * a language, but not with a регион. A specific культура is associated with a language и a регион. "es" is a neutral
 * культура. "es-MX" is a specific культура.
 * $(BR)$(BR)Instances of $(LINK2 #ФорматДатыВремени, ФорматДатыВремени) и $(LINK2 #ФорматЧисла, ФорматЧисла) cannot be создан for neutral cultures.
 * Примеры:
 * ---
 * import io.Stdout, text.locale.Core;
 *
 * проц main() {
 *   Культура культура = new Культура("it-IT");
 *
 *   Стдвыв.форматнс("англИмя: {}", культура.англИмя);
 *   Стдвыв.форматнс("исконноеИмя: {}", культура.исконноеИмя);
 *   Стдвыв.форматнс("имя: {}", культура.имя);
 *   Стдвыв.форматнс("родитель: {}", культура.родитель.имя);
 *   Стдвыв.форматнс("нейтрален_ли: {}", культура.нейтрален_ли);
 * }
 *
 * // Produces the following вывод:
 * // англИмя: Italian (Italy)
 * // исконноеИмя: italiano (Italia)
 * // имя: it-IT
 * // родитель: it
 * // нейтрален_ли: нет
 * ---
 */
export class Культура : ИСлужбаФормата
{

    private const цел ЛКИД_ИНВАРИАНТ = 0x007F;

    private static Культура[ткст] именованныеКультуры;
    private static Культура[цел] идыКультур;
    private static Культура[ткст] культурыИЕТФ;

    private static Культура текущКультура_;
    private static Культура пользоватДефКультура_; // Дефолтная культура пользователя (GetUserDefaultLCID).
    private static Культура инварКультура_; // Инвариантная культура здесь ассоциирована с английским языком.
    private Календарь календарь_;
    private Культура родитель_;
    private ДанныеОКультуре* данныеКультуры_;
    private бул толькоДляЧтения_;
    private ФорматЧисла форматЧисла_;
    private ФорматДатыВремени форматДатыВремени_;

    static this()
    {
        инварКультура_ = new Культура(ЛКИД_ИНВАРИАНТ);
        инварКультура_.толькоДляЧтения_ = да;

        пользоватДефКультура_ = new Культура(нативныеМетоды.дайКультуруПользователя());
        if (пользоватДефКультура_ is пусто)
            // Fallback
            пользоватДефКультура_ = инвариантнаяКультура;
        else
            пользоватДефКультура_.толькоДляЧтения_ = да;
    }

    static ~this()
    {
        именованныеКультуры = пусто;
        идыКультур = пусто;
        культурыИЕТФ = пусто;
    }

    /**
     * Инициализирует новый экземпляр Культуры по предоставленному имени.
     * Параметры: названиеКультуры = Название Культуры.
     */
    export this(ткст названиеКультуры)
    {
        данныеКультуры_ = дайДанныеИзНазванияКультуры(названиеКультуры);
    }

    /**
     * Инициализует новый экземпляр Культуры по предоставленному идентификатору культуры.
     * Параметры: идКультуры = Идентификатор (ЛКИД) этой Культуры.
     * Примечания: Идентификатору Культуры соответствует определённый Windows LCID.
     */
    export this(цел идКультуры)
    {
        данныеКультуры_ = дайДанныеИзИДКультуры(идКультуры);
    }

    /**
     * Получает объект, определяющий, как форматировать указанный тип.
     * Параметры: тип = ИнфОТипе результирующего объекта форматирования.
     * Возвращает: Если тип является typeid($(LINK2 #ФорматЧисла, ФорматЧисла)), значение $(LINK2 #Культура_форматЧисла, форматЧисла) property. If тип is typeid($(LINK2 #ФорматДатыВремени, ФорматДатыВремени)),
     * значение свойства $(LINK2 #Культура_форматДатыВремени, форматДатыВремени). Иначе - пусто.
     * Примечания: Реализует $(LINK2 #ИСлужбаФормата_дайФормат, ИСлужбаФормата.дайФормат).
     */
    export Объект дайФормат(ИнфОТипе тип)
    {
        if (тип is typeid(ФорматЧисла))
            return форматЧисла;
        else if (тип is typeid(ФорматДатыВремени))
            return форматДатыВремени;
        return пусто;
    }

    version (Clone)
    {
        /**
         * Копирует текущий экземпляр Культуры.
         * Возвращает: Копию текущего экземпляра класса Культура.
         * Примечания: Значения свойств $(LINK2 #Культура_форматЧисла, форматЧисла), $(LINK2 #Культура_форматДатыВремени, форматДатыВремени) и $(LINK2 #Культура_Календарь, Календарь) также копируются.
         */
        export Объект клонируй()
        {
            Культура культура = cast(Культура)клонируйОбъект(this);
            if (!культура.нейтрален_ли)
            {
                if (форматДатыВремени_ !is пусто)
                    культура.форматДатыВремени_ = cast(ФорматДатыВремени)форматДатыВремени_.клонируй();
                if (форматЧисла_ !is пусто)
                    культура.форматЧисла_ = cast(ФорматЧисла)форматЧисла_.клонируй();
            }
            if (календарь_ !is пусто)
                культура.календарь_ = cast(Календарь)календарь_.клонируй();
            return культура;
        }
    }

    /**
     * Возвращает экземпляр только для чтения культуры, используя заданный идентификатор культуры.
     * Параметры: идКультуры = Идентификатор данной культуры.
     * Возвращает: Экземпляр культуры, только для чтения.
     * Примечания: Возвращаемые этим методом экземпляры кэшируются.
     */
    export static Культура дайКультуру(цел идКультуры)
    {
        Культура культура = дайКультуруВнутр(идКультуры, пусто);
            if (культура is пусто)
            ошибка ("Культура не найдена - если приложение не пыталось её установить, "
                          ~ "то требуется локализация установки системы .");
        

        return культура;
    }

    /**
     * Возвращает экземпляр только для чтения культуры, используя заданное имя культуры.
     * Параметры: названиеКультуры = Имя культуры.
     * Возвращает: Экземпляр культуры, только для чтения.
     * Примечания: Возвращаемые этим методом экземпляры кэшируются.
     */
    export static Культура дайКультуру(ткст названиеКультуры)
    {
        if (названиеКультуры is пусто)
            ошибка("Значение не может быть пустым.");
        Культура культура = дайКультуруВнутр(0, названиеКультуры);
        if (культура is пусто)
            ошибка("Культура " ~ названиеКультуры ~ " не поддерживается.");
        return культура;
    }

    /**
      * Возвращает экземпляр только для чтения, используя заданное имя, как определяет стандарт RFC 3066, поддерживаемый IETF.
      * Параметры: имя = Имя языка.
      * Возвращает: Экземпляр культуры, только для чтения.
      */
    export static Культура дайКультуруПоТегуЯзыкаИЕТФ(ткст имя)
    {
        if (имя is пусто)
            ошибка("Значение не может быть пустым.");
        Культура культура = дайКультуруВнутр(-1, имя);
        if (культура is пусто)
            ошибка("Название IETF культуры " ~ имя ~ " неизвестно.");
        return культура;
    }

    private static Культура дайКультуруВнутр(цел идКультуры, ткст имяК)
    {
        // If идКультуры is - 1, имя is an IETF имя; if it's 0, имя is a культура имя; иначе, it's a действителен LCID.
        ткст имя = имяК;
        foreach (i, c; имяК)
        if (c is '_')
        {
            имя = имяК.dup;
            имя[i] = '-';
            break;
        }

        // Look up tables первый.
        if (идКультуры == 0)
        {
            if (Культура* культура = имя in именованныеКультуры)
                return *культура;
        }
        else if (идКультуры > 0)
        {
            if (Культура* культура = идКультуры in идыКультур)
                return *культура;
        }
        else if (идКультуры == -1)
        {
            if (Культура* культура = имя in культурыИЕТФ)
                return *культура;
        }

        // Nothing найдено, создай a new экземпляр.
        Культура культура;

        try
        {
            if (идКультуры == -1)
            {
                имя = дайИмяКультурыИзИмениИЕТФ(имя);
                if (имя is пусто)
                    return пусто;
            }
            else if (идКультуры == 0)
                культура = new Культура(имя);
            else if (пользоватДефКультура_ !is пусто && пользоватДефКультура_.ид == идКультуры)
            {
                культура = пользоватДефКультура_;
            }
            else
                культура = new Культура(идКультуры);
        }
        catch (ИсклЛокали)
        {
            return пусто;
        }

        культура.толькоДляЧтения_ = да;

        // Сейчас кэш the new экземпляр in все tables.
        культурыИЕТФ[культура.тэгЯзыкаИЕТФ] = культура;
        именованныеКультуры[культура.имя] = культура;
        идыКультур[культура.ид] = культура;

        return культура;
    }

    /**
     * Возвращает список культур, оптфильтрованный по заданным $(LINK2 константы.html#ТипыКультур, ТипыКультур).
     * Параметры: типы = Комбинация из ТипыКультур.
     * Возвращает: Массив экземпляров Культуры, содержащий культуры, обозначенные типами.
     */
    export static Культура[] дайКультуры(ТипыКультур типы)
    {
        бул includeSpecific = (типы & ТипыКультур.Особый) != 0;
        бул includeNeutral = (типы & ТипыКультур.Нейтральный) != 0;

        цел[] cultures;
        for (цел i = 0; i < таблицаДанныхКультуры.length; i++)
        {
            if ((таблицаДанныхКультуры[i].нейтрален_ли && includeNeutral) || (!таблицаДанныхКультуры[i].нейтрален_ли && includeSpecific))
                cultures ~= таблицаДанныхКультуры[i].лкид;
        }

        Культура[] результат = new Культура[cultures.length];
        foreach (цел i, цел идКультуры; cultures)
        результат[i] = new Культура(идКультуры);
        return результат;
    }

    /**
     * Возвращает имя Культуры.
     * Возвращает: Ткст, содержащий имя Культуры в формате &lt;язык&gt;"-"&lt;регион&gt;.
     */
    export override ткст вТкст()
    {
        return данныеКультуры_.имя;
    }

    export override цел opEquals(Объект об)
    {
        if (об is this)
            return да;
        Культура другой = cast(Культура)об;
        if (другой is пусто)
            return нет;
        return другой.имя == имя; // This needs в_ be изменён so it's culturally aware.
    }

    /**
     * $(ANCHOR Culture_current)
     * $(I Свойство.) Возвращает культуру текущего пользователя.
     * Возвращает: Экземпляр Культура, представляющий текущую культуру пользователя.
     */
    export static Культура текущ()
    {
        if (текущКультура_ !is пусто)
            return текущКультура_;

        if (пользоватДефКультура_ !is пусто)
        {
            // If the пользователь имеется изменён their локаль настройки since последний we проверьed, invalidate our данные.
            if (пользоватДефКультура_.ид != нативныеМетоды.дайКультуруПользователя())
                пользоватДефКультура_ = пусто;
        }
        if (пользоватДефКультура_ is пусто)
        {
            пользоватДефКультура_ = new Культура(нативныеМетоды.дайКультуруПользователя());
            if (пользоватДефКультура_ is пусто)
                пользоватДефКультура_ = инвариантнаяКультура;
            else
                пользоватДефКультура_.толькоДляЧтения_ = да;
        }

        return пользоватДефКультура_;
    }
    /**
     * $(I Свойство.) Присваивает культуру текущему пользователю.
     * Параметры: значение = Экземпляр Культуры, представляющий культуру текущего пользователя.
     * Примеры:
     * Следующие примеры показывают как изменить текущую культуру.
     * ---
     * import io.stream.Format, text.locale.Common;
     *
     * проц main() {
     *   // Показывает имя текущей культуры.
     *   Println("The текущ культура is %s.", Культура.текущ.англИмя);
     *
     *   // Изменяет текущую культуру в el-GR.
     *   Культура.текущ = new Культура("el-GR");
     *   Println("The текущ культура is сейчас %s.", Культура.текущ.англИмя);
     * }
     *
     * // Produces the following вывод:
     * // The текущ культура is English (United Kingdom).
     * // The текущ культура is сейчас Greek (Greece).
     * ---
     */
    export static проц текущ(Культура значение)
    {
        проверьНейтрал(значение);
        нативныеМетоды.установиКультуруПользователя(значение.ид);
        текущКультура_ = значение;
    }

    /**
     * $(I Свойство.) Retrieves the invariant Культура.
     * Возвращает: The Культура экземпляр that is invariant.
     * Примечания: The invariant культура is культура-independent. It is not tied в_ any specific регион, but is associated
     * with the English language.
     */
    export static Культура инвариантнаяКультура()
    {
        return инварКультура_;
    }

    /**
     * $(I Свойство.) Retrieves the определитель of the Культура.
     * Возвращает: The культура определитель of the текущ экземпляр.
     * Примечания: The культура определитель corresponds в_ the Windows локаль определитель (LCID). It can therefore be использован when
     * interfacing with the Windows NLS functions.
     */
    export цел ид()
    {
        return данныеКультуры_.лкид;
    }

    /**
     * $(ANCHOR Culture_name)
     * $(I Свойство.) Retrieves the имя of the Культура in the форматируй &lt;language&gt;"-"&lt;регион&gt;.
     * Возвращает: The имя of the текущ экземпляр. Например, the имя of the UK English культура is "en-GB".
     */
    export ткст имя()
    {
        return данныеКультуры_.имя;
    }

    /**
     * $(I Свойство.) Retrieves the имя of the Культура in the форматируй &lt;languagename&gt; (&lt;regionname&gt;) in English.
     * Возвращает: The имя of the текущ экземпляр in English. Например, the англИмя of the UK English культура
     * is "English (United Kingdom)".
     */
    export ткст англИмя()
    {
        return данныеКультуры_.англИмя;
    }

    /**
     * $(I Свойство.) Retrieves the имя of the Культура in the форматируй &lt;languagename&gt; (&lt;regionname&gt;) in its исконный language.
     * Возвращает: The имя of the текущ экземпляр in its исконный language. Например, if Культура.имя is "de-DE", исконноеИмя is
     * "Deutsch (Deutschland)".
     */
    export ткст исконноеИмя()
    {
        return данныеКультуры_.исконноеИмя;
    }

    /**
     * $(I Свойство.) Retrieves the two-letter language код of the культура.
     * Возвращает: The two-letter language код of the Культура экземпляр. Например, the имяЯзыкаИз2Букв for English is "en".
     */
    export ткст имяЯзыкаИз2Букв()
    {
        return данныеКультуры_.имяЯзИЗО;
    }

    /**
     * $(I Свойство.) Retrieves the three-letter language код of the культура.
     * Возвращает: The three-letter language код of the Культура экземпляр. Например, the имяЯзыкаИз3Букв for English is "eng".
     */
    export ткст имяЯзыкаИз3Букв()
    {
        return данныеКультуры_.имяЯзИЗО2;
    }

    /**
     * $(I Свойство.) Retrieves the RFC 3066 опрentification for a language.
     * Возвращает: A ткст representing the RFC 3066 language опрentification.
     */
    export final ткст тэгЯзыкаИЕТФ()
    {
        return данныеКультуры_.тегИЕТФ;
    }

    /**
     * $(I Свойство.) Retrieves the Культура representing the родитель of the текущ экземпляр.
     * Возвращает: The Культура representing the родитель of the текущ экземпляр.
     */
    export Культура родитель()
    {
        if (родитель_ is пусто)
        {
            try
            {
                цел культураРодитель = данныеКультуры_.предок;
                if (культураРодитель == ЛКИД_ИНВАРИАНТ)
                    родитель_ = инвариантнаяКультура;
                else
                    родитель_ = new Культура(культураРодитель);
            }
            catch
            {
                родитель_ = инвариантнаяКультура;
            }
        }
        return родитель_;
    }

    /**
     * $(I Свойство.) Retrieves a значение indicating whether the текущ экземпляр is a neutral культура.
     * Возвращает: да is the текущ Культура represents a neutral культура; иначе, нет.
     * Примеры:
     * The following example displays which cultures using Chinese are neutral.
     * ---
     * import io.stream.Format, text.locale.Common;
     *
     * проц main() {
     *   foreach (c; Культура.дайКультуры(ТипыКультур.все)) {
     *     if (c.имяЯзыкаИз2Букв == "zh") {
     *       Print(c.англИмя);
     *       if (c.нейтрален_ли)
     *         Println("neutral");
     *       else
     *         Println("specific");
     *     }
     *   }
     * }
     *
     * // Produces the following вывод:
     * // Chinese (Simplified) - neutral
     * // Chinese (Taiwan) - specific
     * // Chinese (People's Republic of China) - specific
     * // Chinese (Hong Kong S.A.R.) - specific
     * // Chinese (Singapore) - specific
     * // Chinese (Macao S.A.R.) - specific
     * // Chinese (Traditional) - neutral
     * ---
     */
    export бул нейтрален_ли()
    {
        return данныеКультуры_.нейтрален_ли;
    }

    /**
     * $(I Свойство.) Retrieves a значение indicating whether the экземпляр is читай-only.
     * Возвращает: да, если the экземпляр is читай-only; иначе, нет.
     * Примечания: If the культура is читай-only, the $(LINK2 #Культура_форматДатыВремени, форматДатыВремени) и $(LINK2 #Культура_форматЧисла, форматЧисла) свойства return
     * экземпляр только для чтенияы.
     */
    export final бул толькоЧтен_ли()
    {
        return толькоДляЧтения_;
    }

    /**
     * $(ANCHOR Культура_Календарь)
     * $(I Свойство.) Retrieves the Календарь использован by the культура.
     * Возвращает: A Календарь экземпляр respresenting the Календарь использован by the культура.
     */
    export Календарь календарь()
    {
        if (календарь_ is пусто)
        {
            календарь_ = дайЭкземплярКалендаря(данныеКультуры_.типКалендаря, толькоДляЧтения_);
        }
        return календарь_;
    }

    /**
     * $(I Свойство.) Retrieves the список of Календарьs that can be использован by the культура.
     * Возвращает: An Массив of тип Календарь representing the Календарьs that can be использован by the культура.
     */
    export Календарь[] опциональныеКалендари()
    {
        Календарь[] cals = new Календарь[данныеКультуры_.опциональныеКалендари.length];
        foreach (цел i, цел calID; данныеКультуры_.опциональныеКалендари)
        cals[i] = дайЭкземплярКалендаря(calID);
        return cals;
    }

    /**
     * $(ANCHOR Культура_форматЧисла)
     * $(I Свойство.) Retrieves a ФорматЧисла defining the culturally appropriate форматируй for displaying numbers и валюта.
     * Возвращает: A ФорматЧисла defining the culturally appropriate форматируй for displaying numbers и валюта.
    */
    export ФорматЧисла форматЧисла()
    {
        проверьНейтрал(this);
        if (форматЧисла_ is пусто)
        {
            форматЧисла_ = new ФорматЧисла(данныеКультуры_);
            форматЧисла_.толькоДляЧтения_ = толькоДляЧтения_;
        }
        return форматЧисла_;
    }
    /**
     * $(I Свойство.) Assigns a ФорматЧисла defining the culturally appropriate форматируй for displaying numbers и валюта.
     * Параметры: значения = A ФорматЧисла defining the culturally appropriate форматируй for displaying numbers и валюта.
     */
    export проц форматЧисла(ФорматЧисла значение)
    {
        проверьТолькоЧтен();
        форматЧисла_ = значение;
    }

    /**
     * $(ANCHOR Культура_форматДатыВремени)
     * $(I Свойство.) Retrieves a ФорматДатыВремени defining the culturally appropriate форматируй for displaying dates и times.
     * Возвращает: A ФорматДатыВремени defining the culturally appropriate форматируй for displaying dates и times.
     */
    export ФорматДатыВремени форматДатыВремени()
    {
        проверьНейтрал(this);
        if (форматДатыВремени_ is пусто)
        {
            форматДатыВремени_ = new ФорматДатыВремени(данныеКультуры_, календарь_);
            форматДатыВремени_.толькоДляЧтения_ = толькоДляЧтения_;
        }
        return форматДатыВремени_;
    }
    /**
     * $(I Свойство.) Assigns a ФорматДатыВремени defining the culturally appropriate форматируй for displaying dates и times.
     * Параметры: значения = A ФорматДатыВремени defining the culturally appropriate форматируй for displaying dates и times.
     */
    export проц форматДатыВремени(ФорматДатыВремени значение)
    {
        проверьТолькоЧтен();
        форматДатыВремени_ = значение;
    }

    private static проц проверьНейтрал(Культура культура)
    {
        if (культура.нейтрален_ли)
            ошибка("Культура '" ~ культура.имя ~ "' является нейтральной.
                         Её нельзя использовать при форматировании
                         и она не может быть установлена как текущая культура.");
    }

    private проц проверьТолькоЧтен()
    {
        if (толькоДляЧтения_)
            ошибка("Экземпляр только для чтения.");
    }

    private static Календарь дайЭкземплярКалендаря(цел типКалендаря, бул толькоЧтение=нет)
    {
        switch (типКалендаря)
        {
        case Календарь.ЯПОНСКИЙ:
            return new time.chrono.Japanese.Японский();
        case Календарь.ТАЙВАНЬСКИЙ:
            return new Тайваньский();
        case Календарь.КОРЕЙСКИЙ:
            return new Корейский();
        case Календарь.ХИДЖРИ:
         return new Хиджри();
        case Календарь.ТАИ:
            return new ТаиБуддистский();
        case Календарь.ЕВРЕЙСКИЙ:
         return new Еврейский();
        case Календарь.ГРЕГОРИАНСКИЙ_США:
        case Календарь.ГРЕГОРИАН_СВ_ФРАНЦ:
        case Календарь.ГРЕГОРИАН_АРАБ:
        case Календарь.ГРЕГОРИАН_ТРАНСЛИТ_АНГЛ:
        case Календарь.ГРЕГОРИАН_ТРАНСЛИТ_ФРАНЦ:
            return new Грегориан(cast(Грегориан.Тип) типКалендаря);
        default:
            break;
        }
        return new Грегориан();
    }

}

/**
 * $(ANCHOR _Region)
 * Предоставляет информакцию о регионе.
 * Примечания: Регион не представляет собой пользовательские предпочтения. Он не зависит от языка или культуры пользователя.
 * Примеры:
 * Следующий пример показывает некоторые свойства класса Регион:
 * ---
 * import io.stream.Format, text.locale.Common;
 *
 * проц main() {
 *   Регион регион = new Регион("en-GB");
 *   Println("имя:              %s", регион.имя);
 *   Println("англИмя:       %s", регион.англИмя);
 *   Println("метрическ_ли:          %s", регион.метрическ_ли);
 *   Println("символВалюты:    %s", регион.символВалюты);
 *   Println("символВалютыИЗО: %s", регион.символВалютыИЗО);
 * }
 *
 * // Produces the following вывод.
 * // имя:              en-GB
 * // англИмя:       United Kingdom
 * // метрическ_ли:          да
 * // символВалюты:    £
 * // символВалютыИЗО: GBP
 * ---
 */
export class Регион
{

    private ДанныеОКультуре* данныеКультуры_;
    private static Регион текущРегион_;
    private ткст имя_;

    /**
     * Initializes a new Регион экземпляр based on the регион associated with the specified культура определитель.
     * Параметры: идКультуры = A культура indentifier.
     * Примечания: The имя of the Регион экземпляр is установи в_ the ISO 3166 two-letter код for that регион.
     */
    export this(цел идКультуры)
    {
	if(идКультуры == цел.init) идКультуры = 0x0419;
	 if(нативныеМетоды.дайКультуруПользователя != идКультуры) нативныеМетоды.установиКультуруПользователя(идКультуры);
        данныеКультуры_ = дайДанныеИзИДКультуры(идКультуры);
        if (данныеКультуры_.нейтрален_ли)
            ошибка ("Нейтральная культура не может использоваться для создания региона.");
        имя_ = данныеКультуры_.имяРегиона;
    }

    /**
     * $(ANCHOR Region_ctor_name)
     * Initializes a new Регион экземпляр based on the регион specified by имя.
     * Параметры: имя = A two-letter ISO 3166 код for the регион. Or, a культура $(LINK2 #Culture_name, _name) consisting of the language и регион.
     */
    export this(ткст имя)
    {
        данныеКультуры_ = дайДанныеИзИмениРегиона(имя);
        имя_ = имя;
        if (данныеКультуры_.нейтрален_ли)
            ошибка ("Имя региона " ~ имя ~ " соответствует нейтральной культуре и не может
                          использоваться при создании региона.");
    }

    package this(ДанныеОКультуре* данныеОКультуре)
    {
        данныеКультуры_ = данныеОКультуре;
        имя_ = данныеОКультуре.имяРегиона;
    }

    /**
     * $(I Свойство.) Retrieves the Регион использован by the текущ $(LINK2 #Культура, Культура).
     * Возвращает: The Регион экземпляр associated with the текущ Культура.
     */
    export static Регион текущ()
    {
        if (текущРегион_ is пусто)
            текущРегион_ = new Регион(Культура.текущ.данныеКультуры_);
        return текущРегион_;
    }

    /**
     * $(I Свойство.) Retrieves a unique определитель for the geographical location of the регион.
     * Возвращает: An $(B цел) uniquely опрentifying the geographical location.
     */
    export цел геоИД()
    {
        return данныеКультуры_.геоИд;
    }

    /**
     * $(ANCHOR Region_name)
     * $(I Свойство.) Retrieves the ISO 3166 код, либо the имя, of the текущ Регион.
     * Возвращает: The значение specified by the имя parameter of the $(LINK2 #Region_ctor_name, Регион(ткст)) constructor.
     */
    export ткст имя()
    {
        return имя_;
    }

    /**
     * $(I Свойство.) Retrieves the full имя of the регион in English.
     * Возвращает: The full имя of the регион in English.
     */
    export ткст англИмя()
    {
        return данныеКультуры_.странаПоАнглийски;
    }

    /**
     * $(I Свойство.) Retrieves the full имя of the регион in its исконный language.
     * Возвращает: The full имя of the регион in the language associated with the регион код.
     */
    export ткст исконноеИмя()
    {
        return данныеКультуры_.странаНаРодном;
    }

    /**
     * $(I Свойство.) Retrieves the two-letter ISO 3166 код of the регион.
     * Возвращает: The two-letter ISO 3166 код of the регион.
     */
    export ткст имяРегионаИз2Букв()
    {
        return данныеКультуры_.имяРегиона;
    }

    /**
     * $(I Свойство.) Retrieves the three-letter ISO 3166 код of the регион.
     * Возвращает: The three-letter ISO 3166 код of the регион.
     */
    export ткст имяРегионаИз3Букв()
    {
        return данныеКультуры_.имяРегионаИЗО;
    }

    /**
     * $(I Свойство.) Retrieves the валюта symbol of the регион.
     * Возвращает: The валюта symbol of the регион.
     */
    export ткст символВалюты()
    {
        return данныеКультуры_.валюта;
    }

    /**
     * $(I Свойство.) Retrieves the three-character валюта symbol of the регион.
     * Возвращает: The three-character валюта symbol of the регион.
     */
    export ткст символВалютыИЗО()
    {
        return данныеКультуры_.символВалютыВТриБуквы;
    }

    /**
     * $(I Свойство.) Retrieves the имя in English of the валюта использован in the регион.
     * Возвращает: The имя in English of the валюта использован in the регион.
     */
    export ткст англИмяВалюты()
    {
        return данныеКультуры_.валютаПоАнглийски;
    }

    /**
     * $(I Свойство.) Retrieves the имя in the исконный language of the регион of the валюта использован in the регион.
     * Возвращает: The имя in the исконный language of the регион of the валюта использован in the регион.
     */
    export ткст исконноеИмяВалюты()
    {
        return данныеКультуры_.валютаНаРодном;
    }

    /**
     * $(I Свойство.) Retrieves a значение indicating whether the регион uses the metric system for measurements.
     * Возвращает: да is the регион uses the metric system; иначе, нет.
     */
    export бул метрическ_ли()
    {
        return данныеКультуры_.метрическ_ли;
    }

    /**
     * Возвращает ткст containing the ISO 3166 код, либо the $(LINK2 #Region_name, имя), of the текущ Регион.
     * Возвращает: A ткст containing the ISO 3166 код, либо the имя, of the текущ Регион.
     */
    export override ткст вТкст()
    {
        return имя_;
    }

}

/**
 * $(ANCHOR _NumberFormat)
 * Determines как numbers are formatted, according в_ the текущ культура.
 * Примечания: Numbers are formatted using форматируй образцы retrieved из_ a ФорматЧисла экземпляр.
 * This class реализует $(LINK2 #ИСлужбаФормата_дайФормат, ИСлужбаФормата.дайФормат).
 * Примеры:
 * The following example shows как в_ retrieve an экземпляр of ФорматЧисла for a Культура
 * и use it в_ display число formatting information.
 * ---
 * import io.stream.Format, text.locale.Common;
 *
 * проц main(ткст[] арги) {
 *   foreach (c; Культура.дайКультуры(ТипыКультур.Особый)) {
 *     if (c.имяЯзыкаИз2Букв == "en") {
 *       ФорматЧисла фмт = c.форматЧисла;
 *       Println("The валюта symbol for %s is '%s'",
 *         c.англИмя,
 *         фмт.символВалюты);
 *     }
 *   }
 * }
 *
 * // Produces the following вывод:
 * // The валюта symbol for English (United States) is '$'
 * // The валюта symbol for English (United Kingdom) is '£'
 * // The валюта symbol for English (Australia) is '$'
 * // The валюта symbol for English (Canada) is '$'
 * // The валюта symbol for English (Нов Zealand) is '$'
 * // The валюта symbol for English (Ireland) is '€'
 * // The валюта symbol for English (South Africa) is 'R'
 * // The валюта symbol for English (Jamaica) is 'J$'
 * // The валюта symbol for English (Caribbean) is '$'
 * // The валюта symbol for English (Belize) is 'BZ$'
 * // The валюта symbol for English (Trinопрad и Tobago) is 'TT$'
 * // The валюта symbol for English (Zimbabwe) is 'Z$'
 * // The валюта symbol for English (Republic of the PhilИПpines) is 'Php'
 *---
 */
export class ФорматЧисла : ИСлужбаФормата
{

    package бул толькоДляЧтения_;
    private static ФорматЧисла инвариантныйФормат_;

    private цел числоДесятичнЦифр_;
    private цел образецОтрицатЧисла_;
    private цел десятичнЦифрВалюты_;
    private цел отрицатОбразецВалюты_;
    private цел положитОбразецВалюты_;
    private цел[] размерыГруппыЧисел_;
    private цел[] размерыГруппыВалют_;
    private ткст разделительГруппыЧисел_;
    private ткст разделительДесятковЧисел_;
    private ткст разделительГруппВалют_;
    private ткст разделительДесятковВалюты_;
    private ткст символВалюты_;
    private ткст отрицательныйЗнак_;
    private ткст положительныйЗнак_;
    private ткст символНЧ_;
    private ткст символОтрицатБеск_;
    private ткст символПоложитБеск_;
    private ткст[] нативныеЧисла_;

    /**
     * Иициализует новый, культуро-независимый экземпляр.
     *
     * Примечания: Модифицируйте свойства нового экземпляра, чтобы определить кастомное форматирование.
     */
    export this()
    {
        this(пусто);
    }

    package this(ДанныеОКультуре* данныеОКультуре)
    {
        // Инициализация инвариантных данных.
        числоДесятичнЦифр_ = 2;
        образецОтрицатЧисла_ = 1;
        десятичнЦифрВалюты_ = 2;
        размерыГруппыЧисел_ = массивИз!(цел)(3);
        размерыГруппыВалют_ = массивИз!(цел)(3);
        разделительГруппыЧисел_ = ",";
        разделительДесятковЧисел_ = ".";
        разделительГруппВалют_ = ",";
        разделительДесятковВалюты_ = ".";
        символВалюты_ = "\u00A4";
        отрицательныйЗнак_ = "-";
        положительныйЗнак_ = "+";
        символНЧ_ = "НЧ";
        символОтрицатБеск_ = "-Бесконечность";
        символПоложитБеск_ = "Бесконечность";
        нативныеЧисла_ = массивИз!(ткст)("0", "1", "2", "3", "4", "5", "6", "7", "8", "9");

        if (данныеОКультуре !is пусто && данныеОКультуре.лкид != Культура.ЛКИД_ИНВАРИАНТ)
        {
            // Инициализирует культуро-специфичные данные.
            числоДесятичнЦифр_ = данныеОКультуре.цифры;
            образецОтрицатЧисла_ = данныеОКультуре.отрицательноеЧисло;
            десятичнЦифрВалюты_ = данныеОКультуре.цифрыВалюты;
            отрицатОбразецВалюты_ = данныеОКультуре.отрицательнаяВалюта;
            положитОбразецВалюты_ = данныеОКультуре.положительнаяВалюта;
            размерыГруппыЧисел_ = данныеОКультуре.группирование;
            размерыГруппыВалют_ = данныеОКультуре.группированиеМонет;
            разделительГруппыЧисел_ = данныеОКультуре.тысяча;
            разделительДесятковЧисел_ = данныеОКультуре.десяток;
            разделительГруппВалют_ = данныеОКультуре.тысячаМонет;
            разделительДесятковВалюты_ = данныеОКультуре.десятокМонет;
            символВалюты_ = данныеОКультуре.валюта;
            отрицательныйЗнак_ = данныеОКультуре.отрицатЗнак;
            положительныйЗнак_ = данныеОКультуре.положитЗнак;
            символНЧ_ = данныеОКультуре.нч;
            символОтрицатБеск_ = данныеОКультуре.отрицБесконечность;
            символПоложитБеск_ = данныеОКультуре.положитБесконечность;
            нативныеЧисла_ = данныеОКультуре.исконныеЦифры;
        }
    }

    /**
     * Retrieves an объект defining как в_ форматируй the specified тип.
     * Параметры: тип = The ИнфОТипе of the результатing formatting объект.
     * Возвращает: If тип is typeid($(LINK2 #ФорматЧисла, ФорматЧисла)), the текущ ФорматЧисла экземпляр. Otherwise, пусто.
     * Примечания: Реализует $(LINK2 #ИСлужбаФормата_дайФормат, ИСлужбаФормата.дайФормат).
     */
    export Объект дайФормат(ИнфОТипе тип)
    {
        return (тип is typeid(ФорматЧисла)) ? this : пусто;
    }

    version (Clone)
    {
        /**
         * Creates a копируй of the экземпляр.
         */
        export Объект клонируй()
        {
            ФорматЧисла копия = cast(ФорматЧисла)клонируйОбъект(this);
            копия.толькоДляЧтения_ = нет;
            return копия;
        }
    }

    /**
     * Retrieves the ФорматЧисла for the specified $(LINK2 #ИСлужбаФормата, ИСлужбаФормата).
     * Параметры: службаФормата = The ИСлужбаФормата использован в_ retrieve ФорматЧисла.
     * Возвращает: The ФорматЧисла for the specified ИСлужбаФормата.
     * Примечания: The метод calls $(LINK2 #ИСлужбаФормата_дайФормат, ИСлужбаФормата.дайФормат) with typeof(ФорматЧисла). If службаФормата is пусто,
     * then the значение of the текущ property is returned.
     */
    export static ФорматЧисла дайЭкземпляр(ИСлужбаФормата службаФормата)
    {
        Культура культура = cast(Культура)службаФормата;
        if (культура !is пусто)
        {
            if (культура.форматЧисла_ !is пусто)
                return культура.форматЧисла_;
            return культура.форматЧисла;
        }
        if (ФорматЧисла форматЧисла = cast(ФорматЧисла)службаФормата)
            return форматЧисла;
        if (службаФормата !is пусто)
        {
            if (ФорматЧисла форматЧисла = cast(ФорматЧисла)(службаФормата.дайФормат(typeid(ФорматЧисла))))
                return форматЧисла;
        }
        return текущ;
    }

    /**
     * $(I Свойство.) Retrieves a читай-only ФорматЧисла экземпляр из_ the текущ культура.
     * Возвращает: A читай-only ФорматЧисла экземпляр из_ the текущ культура.
     */
    export static ФорматЧисла текущ()
    {
        return Культура.текущ.форматЧисла;
    }

    /**
     * $(ANCHOR NumberFormat_invariantFormat)
     * $(I Свойство.) Retrieves the читай-only, culturally independent ФорматЧисла экземпляр.
     * Возвращает: The читай-only, culturally independent ФорматЧисла экземпляр.
     */
    export static ФорматЧисла инвариантныйФормат()
    {
        if (инвариантныйФормат_ is пусто)
        {
            инвариантныйФормат_ = new ФорматЧисла;
            инвариантныйФормат_.толькоДляЧтения_ = да;
        }
        return инвариантныйФормат_;
    }

    /**
     * $(I Свойство.) Retrieves a значение indicating whether the экземпляр is читай-only.
     * Возвращает: да, если the экземпляр is читай-only; иначе, нет.
     */
    export final бул толькоЧтен_ли()
    {
        return толькоДляЧтения_;
    }

    /**
     * $(I Свойство.) Retrieves the число of десяток places использован for numbers.
     * Возвращает: The число of десяток places использован for numbers. For $(LINK2 #NumberFormat_invariantFormat, инвариантныйФормат), the default is 2.
     */
    export final цел члоДесятичнЦифр()
    {
        return числоДесятичнЦифр_;
    }
    /**
     * Assigns the число of десяток цифры использован for numbers.
     * Параметры: значение = The число of десяток places использован for numbers.
     * Выводит исключение: Исключение if the property is being установи и the экземпляр is читай-only.
     * Примеры:
     * The following example shows the effect of changing члоДесятичнЦифр.
     * ---
     * import io.stream.Format, text.locale.Common;
     *
     * проц main() {
     *   // Get the ФорматЧисла из_ the en-GB культура.
     *   ФорматЧисла фмт = (new Культура("en-GB")).форматЧисла;
     *
     *   // Display a значение with the default число of десяток цифры.
     *   цел n = 5678;
     *   Println(Форматировщик.форматируй(фмт, "{0:N}", n));
     *
     *   // Display the значение with six десяток цифры.
     *   фмт.члоДесятичнЦифр = 6;
     *   Println(Форматировщик.форматируй(фмт, "{0:N}", n));
     * }
     *
     * // Produces the following вывод:
     * // 5,678.00
     * // 5,678.000000
     * ---
     */
    export final проц члоДесятичнЦифр(цел значение)
    {
        проверьТолькоЧтен();
        числоДесятичнЦифр_ = значение;
    }

    /**
     * $(I Свойство.) Retrieves the форматируй образец for негатив numbers.
     * Возвращает: The форматируй образец for негатив numbers. For инвариантныйФормат, the default is 1 (representing "-n").
     * Примечания: The following таблица shows действителен значения for this property.
     *
     * <таблица class="definitionTable">
     * <tr><th>Значение</th><th>образец</th></tr>
     * <tr><td>0</td><td>(n)</td></tr>
     * <tr><td>1</td><td>-n</td></tr>
     * <tr><td>2</td><td>- n</td></tr>
     * <tr><td>3</td><td>n-</td></tr>
     * <tr><td>4</td><td>n -</td></tr>
     * </таблица>
     */
    export final цел члоОтрицатОбразцов()
    {
        return образецОтрицатЧисла_;
    }
    /**
     * $(I Свойство.) Assigns the форматируй образец for негатив numbers.
     * Параметры: значение = The форматируй образец for негатив numbers.
     * Примеры:
     * The following example shows the effect of the different образцы.
     * ---
     * import io.stream.Format, text.locale.Common;
     *
     * проц main() {
     *   ФорматЧисла фмт = new ФорматЧисла;
     *   цел n = -5678;
     *
     *   // Display the default образец.
     *   Println(Форматировщик.форматируй(фмт, "{0:N}", n));
     *
     *   // Display все образцы.
     *   for (цел i = 0; i <= 4; i++) {
     *     фмт.члоОтрицатОбразцов = i;
     *     Println(Форматировщик.форматируй(фмт, "{0:N}", n));
     *   }
     * }
     *
     * // Produces the following вывод:
     * // (5,678.00)
     * // (5,678.00)
     * // -5,678.00
     * // - 5,678.00
     * // 5,678.00-
     * // 5,678.00 -
     * ---
     */
    export final проц члоОтрицатОбразцов(цел значение)
    {
        проверьТолькоЧтен();
        образецОтрицатЧисла_ = значение;
    }

    /**
     * $(I Свойство.) Retrieves the число of десяток places в_ use in валюта значения.
     * Возвращает: The число of десяток цифры в_ use in валюта значения.
     */
    export final цел валютнДесятичнЦифры()
    {
        return десятичнЦифрВалюты_;
    }
    /**
     * $(I Свойство.) Assigns the число of десяток places в_ use in валюта значения.
     * Параметры: значение = The число of десяток цифры в_ use in валюта значения.
     */
    export final проц валютнДесятичнЦифры(цел значение)
    {
        проверьТолькоЧтен();
        десятичнЦифрВалюты_ = значение;
    }

    /**
     * $(I Свойство.) Retrieves the formal образец в_ use for негатив валюта значения.
     * Возвращает: The форматируй образец в_ use for негатив валюта значения.
     */
    export final цел валютнОтрицатОбразец()
    {
        return отрицатОбразецВалюты_;
    }
    /**
     * $(I Свойство.) Assigns the formal образец в_ use for негатив валюта значения.
     * Параметры: значение = The форматируй образец в_ use for негатив валюта значения.
     */
    export final проц валютнОтрицатОбразец(цел значение)
    {
        проверьТолькоЧтен();
        отрицатОбразецВалюты_ = значение;
    }

    /**
     * $(I Свойство.) Retrieves the formal образец в_ use for positive валюта значения.
     * Возвращает: The форматируй образец в_ use for positive валюта значения.
     */
    export final цел валютнПоложитОбразец()
    {
        return положитОбразецВалюты_;
    }
    /**
     * $(I Свойство.) Assigns the formal образец в_ use for positive валюта значения.
     * Возвращает: The форматируй образец в_ use for positive валюта значения.
     */
    export final проц валютнПоложитОбразец(цел значение)
    {
        проверьТолькоЧтен();
        положитОбразецВалюты_ = значение;
    }

    /**
     * $(I Свойство.) Retrieves the число of цифры цел each группа в_ the лево of the десяток place in numbers.
     * Возвращает: The число of цифры цел each группа в_ the лево of the десяток place in numbers.
     */
    export final цел[] размерыЧисловыхГрупп()
    {
        return размерыГруппыЧисел_;
    }
    /**
     * $(I Свойство.) Assigns the число of цифры цел each группа в_ the лево of the десяток place in numbers.
     * Параметры: значение = The число of цифры цел each группа в_ the лево of the десяток place in numbers.
     */
    export final проц размерыЧисловыхГрупп(цел[] значение)
    {
        проверьТолькоЧтен();
        размерыГруппыЧисел_ = значение;
    }

    /**
     * $(I Свойство.) Retrieves the число of цифры цел each группа в_ the лево of the десяток place in валюта значения.
     * Возвращает: The число of цифры цел each группа в_ the лево of the десяток place in валюта значения.
     */
    export final цел[] размерыВалютныхГрупп()
    {
        return размерыГруппыВалют_;
    }
    /**
     * $(I Свойство.) Assigns the число of цифры цел each группа в_ the лево of the десяток place in валюта значения.
     * Параметры: значение = The число of цифры цел each группа в_ the лево of the десяток place in валюта значения.
     */
    export final проц размерыВалютныхГрупп(цел[] значение)
    {
        проверьТолькоЧтен();
        размерыГруппыВалют_ = значение;
    }

    /**
     * $(I Свойство.) Retrieves the ткст separating groups of цифры в_ the лево of the десяток place in numbers.
     * Возвращает: The ткст separating groups of цифры в_ the лево of the десяток place in numbers. Например, ",".
     */
    export final ткст разделительЧисловыхГрупп()
    {
        return разделительГруппыЧисел_;
    }
    /**
     * $(I Свойство.) Assigns the ткст separating groups of цифры в_ the лево of the десяток place in numbers.
     * Параметры: значение = The ткст separating groups of цифры в_ the лево of the десяток place in numbers.
     */
    export final проц разделительЧисловыхГрупп(ткст значение)
    {
        проверьТолькоЧтен();
        разделительГруппыЧисел_ = значение;
    }

    /**
     * $(I Свойство.) Retrieves the ткст использован as the десяток разделитель in numbers.
     * Возвращает: The ткст использован as the десяток разделитель in numbers. Например, ".".
     */
    export final ткст разделительЧисловыхДесятков()
    {
        return разделительДесятковЧисел_;
    }
    /**
     * $(I Свойство.) Assigns the ткст использован as the десяток разделитель in numbers.
     * Параметры: значение = The ткст использован as the десяток разделитель in numbers.
     */
    export final проц разделительЧисловыхДесятков(ткст значение)
    {
        проверьТолькоЧтен();
        разделительДесятковЧисел_ = значение;
    }

    /**
     * $(I Свойство.) Retrieves the ткст separating groups of цифры в_ the лево of the десяток place in валюта значения.
     * Возвращает: The ткст separating groups of цифры в_ the лево of the десяток place in валюта значения. Например, ",".
     */
    export final ткст разделительГруппыВалют()
    {
        return разделительГруппВалют_;
    }
    /**
     * $(I Свойство.) Assigns the ткст separating groups of цифры в_ the лево of the десяток place in валюта значения.
     * Параметры: значение = The ткст separating groups of цифры в_ the лево of the десяток place in валюта значения.
     */
    export final проц разделительГруппыВалют(ткст значение)
    {
        проверьТолькоЧтен();
        разделительГруппВалют_ = значение;
    }

    /**
     * $(I Свойство.) Retrieves the ткст использован as the десяток разделитель in валюта значения.
     * Возвращает: The ткст использован as the десяток разделитель in валюта значения. Например, ".".
     */
    export final ткст десятичнРазделительВалюты()
    {
        return разделительДесятковВалюты_;
    }
    /**
     * $(I Свойство.) Assigns the ткст использован as the десяток разделитель in валюта значения.
     * Параметры: значение = The ткст использован as the десяток разделитель in валюта значения.
     */
    export final проц десятичнРазделительВалюты(ткст значение)
    {
        проверьТолькоЧтен();
        разделительДесятковВалюты_ = значение;
    }

    /**
     * $(I Свойство.) Retrieves the ткст использован as the валюта symbol.
     * Возвращает: The ткст использован as the валюта symbol. Например, "£".
     */
    export final ткст символВалюты()
    {
        return символВалюты_;
    }
    /**
     * $(I Свойство.) Assigns the ткст использован as the валюта symbol.
     * Параметры: значение = The ткст использован as the валюта symbol.
     */
    export final проц символВалюты(ткст значение)
    {
        проверьТолькоЧтен();
        символВалюты_ = значение;
    }

    /**
     * $(I Свойство.) Retrieves the ткст denoting that a число is негатив.
     * Возвращает: The ткст denoting that a число is негатив. Например, "-".
     */
    export final ткст отрицатЗнак()
    {
        return отрицательныйЗнак_;
    }
    /**
     * $(I Свойство.) Assigns the ткст denoting that a число is негатив.
     * Параметры: значение = The ткст denoting that a число is негатив.
     */
    export final проц отрицатЗнак(ткст значение)
    {
        проверьТолькоЧтен();
        отрицательныйЗнак_ = значение;
    }

    /**
     * $(I Свойство.) Retrieves the ткст denoting that a число is positive.
     * Возвращает: The ткст denoting that a число is positive. Например, "+".
     */
    export final ткст положитЗнак()
    {
        return положительныйЗнак_;
    }
    /**
     * $(I Свойство.) Assigns the ткст denoting that a число is positive.
     * Параметры: значение = The ткст denoting that a число is positive.
     */
    export final проц положитЗнак(ткст значение)
    {
        проверьТолькоЧтен();
        положительныйЗнак_ = значение;
    }

    /**
     * $(I Свойство.) Retrieves the ткст representing the НЧ (not a число) значение.
     * Возвращает: The ткст representing the НЧ значение. Например, "НЧ".
     */
    export final ткст символНЧ()
    {
        return символНЧ_;
    }
    /**
     * $(I Свойство.) Assigns the ткст representing the НЧ (not a число) значение.
     * Параметры: значение = The ткст representing the НЧ значение.
     */
    export final проц символНЧ(ткст значение)
    {
        проверьТолькоЧтен();
        символНЧ_ = значение;
    }

    /**
     * $(I Свойство.) Retrieves the ткст representing негатив infinity.
     * Возвращает: The ткст representing негатив infinity. Например, "-Infinity".
     */
    export final ткст отрицатСимволБесконечности()
    {
        return символОтрицатБеск_;
    }
    /**
     * $(I Свойство.) Assigns the ткст representing негатив infinity.
     * Параметры: значение = The ткст representing негатив infinity.
     */
    export final проц отрицатСимволБесконечности(ткст значение)
    {
        проверьТолькоЧтен();
        символОтрицатБеск_ = значение;
    }

    /**
     * $(I Свойство.) Retrieves the ткст representing positive infinity.
     * Возвращает: The ткст representing positive infinity. Например, "Infinity".
     */
    export final ткст положитСимволБесконечности()
    {
        return символПоложитБеск_;
    }
    /**
     * $(I Свойство.) Assigns the ткст representing positive infinity.
     * Параметры: значение = The ткст representing positive infinity.
     */
    export final проц положитСимволБесконечности(ткст значение)
    {
        проверьТолькоЧтен();
        символПоложитБеск_ = значение;
    }

    /**
     * $(I Свойство.) Retrieves a ткст Массив of исконный equivalents of the цифры 0 в_ 9.
     * Возвращает: A ткст Массив of исконный equivalents of the цифры 0 в_ 9.
     */
    export final ткст[] исконныеЦифры()
    {
        return нативныеЧисла_;
    }
    /**
     * $(I Свойство.) Assigns a ткст Массив of исконный equivalents of the цифры 0 в_ 9.
     * Параметры: значение = A ткст Массив of исконный equivalents of the цифры 0 в_ 9.
     */
    export final проц исконныеЦифры(ткст[] значение)
    {
        проверьТолькоЧтен();
        нативныеЧисла_ = значение;
    }

    private проц проверьТолькоЧтен()
    {
        if (толькоДляЧтения_)
            ошибка("Экземпляр ФорматЧисла предназначен только для чтения.");
    }

}

/**
 * $(ANCHOR _DateTimeFormat)
 * Determines как $(LINK2 #Время, Время) значения are formatted, depending on the культура.
 * Примечания: To создай a ФорматДатыВремени for a specific культура, создай a $(LINK2 #Культура, Культура) for that культура и
 * retrieve its $(LINK2 #Культура_форматДатыВремени, форматДатыВремени) property. To создай a ФорматДатыВремени for the пользователь's текущ
 * культура, use the $(LINK2 #Culture_current, текущ) property.
 */
export class ФорматДатыВремени : ИСлужбаФормата
{

    private const ткст rfc1123Pattern_ = "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'";
    private const ткст sortableDateTimePattern_ = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
    private const ткст universalSortableDateTimePattern_ = "yyyy'-'MM'-'dd' 'HH':'mm':'ss'Z'";
    private const ткст всеСтандартныеФорматы = [ 'd', 'D', 'f', 'F', 'g', 'G', 'm', 'M', 'r', 'R', 's', 't', 'T', 'u', 'U', 'y', 'Y' ];


    package бул толькоДляЧтения_;
    private static ФорматДатыВремени инвариантныйФормат_;
    private ДанныеОКультуре* данныеКультуры_;

    private Календарь календарь_;
    private цел[] дополнительныеКалендари_;
    private цел первыйДеньНедели_ = -1;
    private цел правилоКалендарнойНедели_ = -1;
    private ткст разделительДаты_;
    private ткст разделительВремени_;
    private ткст amDesignator_;
    private ткст pmDesignator_;
    private ткст образецКраткойДаты_;
    private ткст образецКраткогоВремени_;
    private ткст образецДлиннойДаты_;
    private ткст образецДлинногоВремени_;
    private ткст образецДняМесяца_;
    private ткст образецМесяцаГода_;
    private ткст[] сокращИменаДней_;
    private ткст[] именаДней_;
    private ткст[] сокращИменаМесяцев_;
    private ткст[] именаМесяцев_;

    private ткст образецПолнойДатыВремени_;
    private ткст общийКраткийФорматВремени_;
    private ткст generalLongTimePattern_;

    private ткст[] shortTimePatterns_;
    private ткст[] shortDatePatterns_;
    private ткст[] longTimePatterns_;
    private ткст[] longDatePatterns_;
    private ткст[] yearMonthPatterns_;

    /**
     * $(ANCHOR DateTimeFormat_ctor)
     * Initializes an экземпляр that is записываемый и культура-independent.
     */
    export this()
    {
        // This ctor is использован by инвариантныйФормат so we can't Устанавливает Календарь property.
        данныеКультуры_ = Культура.инвариантнаяКультура.данныеКультуры_;
        календарь_ = Грегориан.генерный;
        инициализуй();
    }

    export this(ДанныеОКультуре* данныеОКультуре, Календарь календарь)
    {
        данныеКультуры_ = данныеОКультуре;
        this.календарь_ = календарь;
    }

    /**
     * $(ANCHOR DateTimeFormat_getFormat)
     * Retrieves an объект defining как в_ форматируй the specified тип.
     * Параметры: тип = The ИнфОТипе of the результатing formatting объект.
     * Возвращает: If тип is typeid(ФорматДатыВремени), the текущ ФорматДатыВремени экземпляр. Otherwise, пусто.
     * Примечания: Реализует $(LINK2 #ИСлужбаФормата_дайФормат, ИСлужбаФормата.дайФормат).
     */
    export Объект дайФормат(ИнфОТипе тип)
    {
        return (тип is typeid(ФорматДатыВремени)) ? this : пусто;
    }

    version(Clone)
    {
        /**
         */
        export Объект клонируй()
        {
            ФорматДатыВремени другой = cast(ФорматДатыВремени)клонируйОбъект(this);
            другой.календарь_ = cast(Календарь)Календарь.клонируй();
            другой.толькоДляЧтения_ = нет;
            return другой;
        }
    }

    package ткст[] shortTimePatterns()
    {
        if (shortTimePatterns_ is пусто)
            shortTimePatterns_ = данныеКультуры_.краткиеВремена;
        return shortTimePatterns_.dup;
    }

    package ткст[] shortDatePatterns()
    {
        if (shortDatePatterns_ is пусто)
            shortDatePatterns_ = данныеКультуры_.краткиеДаты;
        return shortDatePatterns_.dup;
    }

    package ткст[] longTimePatterns()
    {
        if (longTimePatterns_ is пусто)
            longTimePatterns_ = данныеКультуры_.длинныеВремена;
        return longTimePatterns_.dup;
    }

    package ткст[] longDatePatterns()
    {
        if (longDatePatterns_ is пусто)
            longDatePatterns_ = данныеКультуры_.длинныеДаты;
        return longDatePatterns_.dup;
    }

    package ткст[] yearMonthPatterns()
    {
        if (yearMonthPatterns_ is пусто)
            yearMonthPatterns_ = данныеКультуры_.месяцыГода;
        return yearMonthPatterns_;
    }

    /**
     * $(ANCHOR DateTimeFormat_getAllDateTimePatterns)
     * Retrieves the стандарт образцы in which Время значения can be formatted.
     * Возвращает: An Массив of strings containing the стандарт образцы in which Время значения can be formatted.
     */
    export final ткст[] дайВсеОбразцыДатыВремени()
    {
        ткст[] результат;
        foreach (сим форматируй; ФорматДатыВремени.всеСтандартныеФорматы)
        результат ~= дайВсеОбразцыДатыВремени(форматируй);
        return результат;
    }

    /**
     * $(ANCHOR DateTimeFormat_getAllDateTimePatterns_char)
     * Retrieves the стандарт образцы in which Время значения can be formatted using the specified форматируй character.
     * Возвращает: An Массив of strings containing the стандарт образцы in which Время значения can be formatted using the specified форматируй character.
     */
    export final ткст[] дайВсеОбразцыДатыВремени(сим форматируй)
    {

        ткст[] combinePatterns(ткст[] patterns1, ткст[] patterns2)
        {
            ткст[] результат = new ткст[patterns1.length * patterns2.length];
            for (цел i = 0; i < patterns1.length; i++)
            {
                for (цел j = 0; j < patterns2.length; j++)
                    результат[i * patterns2.length + j] = patterns1[i] ~ " " ~ patterns2[j];
            }
            return результат;
        }

        // форматируй must be one of всеСтандартныеФорматы.
        ткст[] результат;
        switch (форматируй)
        {
        case 'd':
            результат ~= shortDatePatterns;
            break;
        case 'D':
            результат ~= longDatePatterns;
            break;
        case 'f':
            результат ~= combinePatterns(longDatePatterns, shortTimePatterns);
            break;
        case 'F':
            результат ~= combinePatterns(longDatePatterns, longTimePatterns);
            break;
        case 'g':
            результат ~= combinePatterns(shortDatePatterns, shortTimePatterns);
            break;
        case 'G':
            результат ~= combinePatterns(shortDatePatterns, longTimePatterns);
            break;
        case 'm':
        case 'M':
            результат ~= образецДняМесяца;
            break;
        case 'r':
        case 'R':
            результат ~= rfc1123Pattern_;
            break;
        case 's':
            результат ~= sortableDateTimePattern_;
            break;
        case 't':
            результат ~= shortTimePatterns;
            break;
        case 'T':
            результат ~= longTimePatterns;
            break;
        case 'u':
            результат ~= universalSortableDateTimePattern_;
            break;
        case 'U':
            результат ~= combinePatterns(longDatePatterns, longTimePatterns);
            break;
        case 'y':
        case 'Y':
            результат ~= yearMonthPatterns;
            break;
        default:
            ошибка("Указанный формат был недействителен.");
        }
        return результат;
    }

    /**
     * $(ANCHOR DateTimeFormat_getAbbreviatedDayName)
     * Retrieves the abbreviated имя указанного день of the week based on the культура of the экземпляр.
     * Параметры: ДеньНедели = Значение ДняНедели .
     * Возвращает: The abbreviated имя of день недели represented by ДеньНедели.
     */
    export final ткст дайСокращённоеИмяДня(Календарь.ДеньНедели деньНедели)
    {
        return сокращённыеИменаДней[cast(цел)деньНедели];
    }

    /**
     * $(ANCHOR DateTimeFormat_getDayName)
     * Retrieves the full имя указанного день of the week based on the культура of the экземпляр.
     * Параметры: ДеньНедели = Значение ДняНедели .
     * Возвращает: The full имя of день недели represented by ДеньНедели.
     */
    export final ткст дайИмяДня(Календарь.ДеньНедели деньНедели)
    {
        return именаДней[cast(цел)деньНедели];
    }

    /**
     * $(ANCHOR DateTimeFormat_getAbbreviatedMonthName)
     * Retrieves the abbreviated имя указанного месяц based on the культура of the экземпляр.
     * Параметры: месяц = An целое between 1 и 13 indicating the имя of the _месяц в_ return.
     * Возвращает: The abbreviated имя of the _месяц represented by месяц.
     */
    export final ткст дайСокращённоеИмяМесяца(цел месяц)
    {
        return сокращённыеИменаМесяцев[месяц - 1];
    }

    /**
     * $(ANCHOR DateTimeFormat_getMonthName)
     * Retrieves the full имя указанного месяц based on the культура of the экземпляр.
     * Параметры: месяц = An целое between 1 и 13 indicating the имя of the _месяц в_ return.
     * Возвращает: The full имя of the _месяц represented by месяц.
     */
    export final ткст дайИмяМесяца(цел месяц)
    {
        return именаМесяцев[месяц - 1];
    }

    /**
     * $(ANCHOR DateTimeFormat_getInstance)
     * Retrieves the ФорматДатыВремени for the specified ИСлужбаФормата.
     * Параметры: службаФормата = The ИСлужбаФормата использован в_ retrieve ФорматДатыВремени.
     * Возвращает: The ФорматДатыВремени for the specified ИСлужбаФормата.
     * Примечания: The метод calls $(LINK2 #ИСлужбаФормата_дайФормат, ИСлужбаФормата.дайФормат) with typeof(ФорматДатыВремени). If службаФормата is пусто,
     * then the значение of the текущ property is returned.
     */
    export static ФорматДатыВремени дайЭкземпляр(ИСлужбаФормата службаФормата)
    {
        Культура культура = cast(Культура)службаФормата;
        if (культура !is пусто)
        {
            if (культура.форматДатыВремени_ !is пусто)
                return культура.форматДатыВремени_;
            return культура.форматДатыВремени;
        }
        if (ФорматДатыВремени форматДатыВремени = cast(ФорматДатыВремени)службаФормата)
            return форматДатыВремени;
        if (службаФормата !is пусто)
        {
            if (ФорматДатыВремени форматДатыВремени = cast(ФорматДатыВремени)(службаФормата.дайФормат(typeid(ФорматДатыВремени))))
                return форматДатыВремени;
        }
        return текущ;
    }

    /**
     * $(ANCHOR DateTimeFormat_current)
     * $(I Свойство.) Retrieves a читай-only ФорматДатыВремени экземпляр из_ the текущ культура.
     * Возвращает: A читай-only ФорматДатыВремени экземпляр из_ the текущ культура.
     */
    export static ФорматДатыВремени текущ()
    {
        return Культура.текущ.форматДатыВремени;
    }

    /**
     * $(ANCHOR DateTimeFormat_invariantFormat)
     * $(I Свойство.) Retrieves a читай-only ФорматДатыВремени экземпляр that is culturally independent.
     * Возвращает: A читай-only ФорматДатыВремени экземпляр that is culturally independent.
     */
    export static ФорматДатыВремени инвариантныйФормат()
    {
        if (инвариантныйФормат_ is пусто)
        {
            инвариантныйФормат_ = new ФорматДатыВремени;
            инвариантныйФормат_.календарь_ = new Грегориан();
            инвариантныйФормат_.толькоДляЧтения_ = да;
        }
        return инвариантныйФормат_;
    }

    /**
     * $(ANCHOR DateTimeFormat_isReadOnly)
     * $(I Свойство.) Retrieves a значение indicating whether the экземпляр is читай-only.
     * Возвращает: да is the экземпляр is читай-only; иначе, нет.
     */
    export final бул толькоЧтен_ли()
    {
        return толькоДляЧтения_;
    }

    /**
     * $(I Свойство.) Retrieves the Календарь использован by the текущ культура.
     * Возвращает: The Календарь determining the Календарь использован by the текущ культура. Например, the Грегориан.
     */
    export final Календарь календарь()
    {
        assert(календарь_ !is пусто);
        return календарь_;
    }
    /**
     * $(ANCHOR DateTimeFormat_Календарь)
     * $(I Свойство.) Assigns the Календарь в_ be использован by the текущ культура.
     * Параметры: значение = The Календарь determining the Календарь в_ be использован by the текущ культура.
     * Exceptions: If значение is not действителен for the текущ культура, an Исключение is thrown.
     */
    export final проц календарь(Календарь значение)
    {
        проверьТолькоЧтен();
        if (значение !is календарь_)
        {
            for (цел i = 0; i < опциональныеКалендари.length; i++)
            {
                if (опциональныеКалендари[i] == значение.ид)
                {
                    if (календарь_ !is пусто)
                    {
                        // Clear текущ свойства.
                        образецКраткойДаты_ = пусто;
                        образецДлиннойДаты_ = пусто;
                        образецКраткогоВремени_ = пусто;
                        образецМесяцаГода_ = пусто;
                        образецДняМесяца_ = пусто;
                        общийКраткийФорматВремени_ = пусто;
                        generalLongTimePattern_ = пусто;
                        образецПолнойДатыВремени_ = пусто;
                        shortDatePatterns_ = пусто;
                        longDatePatterns_ = пусто;
                        yearMonthPatterns_ = пусто;
                        сокращИменаДней_ = пусто;
                        сокращИменаМесяцев_ = пусто;
                        именаДней_ = пусто;
                        именаМесяцев_ = пусто;
                    }
                    календарь_ = значение;
                    инициализуй();
                    return;
                }
            }
            ошибка("Календарь для данной культуры недействителен.");
        }
    }

    /**
     * $(ANCHOR DateTimeFormat_firstДеньНедели)
     * $(I Свойство.) Retrieves первый день недели.
     * Возвращает: Значение ДняНедели  indicating первый день недели.
     */
    export final Календарь.ДеньНедели первыйДеньНед()
    {
        return cast(Календарь.ДеньНедели)первыйДеньНедели_;
    }
    /**
     * $(I Свойство.) Assigns первый день недели.
     * Параметры: valie = Значение ДняНедели  indicating первый день недели.
     */
    export final проц первыйДеньНед(Календарь.ДеньНедели значение)
    {
        проверьТолькоЧтен();
        первыйДеньНедели_ = значение;
    }

    /**
     * $(ANCHOR DateTimeFormat_КалендарьWeekRule)
     * $(I Свойство.) Retrieves the _value indicating the правило использован в_ determine the первый week of the год.
     * Возвращает: A правилоНеделиКалендаря _value determining the первый week of the год.
     */
    export final Календарь.ПравилоНедели правилоНеделиКалендаря()
    {
        return cast(Календарь.ПравилоНедели) правилоКалендарнойНедели_;
    }
    /**
     * $(I Свойство.) Assigns the _value indicating the правило использован в_ determine the первый week of the год.
     * Параметры: значение = A правилоНеделиКалендаря _value determining the первый week of the год.
     */
    export final проц правилоНеделиКалендаря(Календарь.ПравилоНедели значение)
    {
        проверьТолькоЧтен();
        правилоКалендарнойНедели_ = значение;
    }

    /**
     * $(ANCHOR DateTimeFormat_nativeКалендарьName)
     * $(I Свойство.) Retrieves the исконный имя of the Календарь associated with the текущ экземпляр.
     * Возвращает: The исконный имя of the Календарь associated with the текущ экземпляр.
     */
    export final ткст исконноеНазваниеКалендаря()
    {
        return данныеКультуры_.имяКалНаРодном;
    }

    /**
     * $(ANCHOR DateTimeFormat_dateSeparator)
     * $(I Свойство.) Retrieves the ткст separating дата components.
     * Возвращает: The ткст separating дата components.
     */
    export final ткст разделительДаты()
    {
        if (разделительДаты_ is пусто)
            разделительДаты_ = данныеКультуры_.дата;
        return разделительДаты_;
    }
    /**
     * $(I Свойство.) Assigns the ткст separating дата components.
     * Параметры: значение = The ткст separating дата components.
     */
    export final проц разделительДаты(ткст значение)
    {
        проверьТолькоЧтен();
        разделительДаты_ = значение;
    }

    /**
     * $(ANCHOR DateTimeFormat_timeSeparator)
     * $(I Свойство.) Retrieves the ткст separating время components.
     * Возвращает: The ткст separating время components.
     */
    export final ткст разделительВремени()
    {
        if (разделительВремени_ is пусто)
            разделительВремени_ = данныеКультуры_.время;
        return разделительВремени_;
    }
    /**
     * $(I Свойство.) Assigns the ткст separating время components.
     * Параметры: значение = The ткст separating время components.
     */
    export final проц разделительВремени(ткст значение)
    {
        проверьТолькоЧтен();
        разделительВремени_ = значение;
    }

    /**
     * $(ANCHOR DateTimeFormat_amDesignator)
     * $(I Свойство.) Retrieves the ткст designator for часы перед noon.
     * Возвращает: The ткст designator for часы перед noon. Например, "AM".
     */
    export final ткст определительДоПолудня()
    {
        assert(amDesignator_ !is пусто);
        return amDesignator_;
    }
    /**
     * $(I Свойство.) Assigns the ткст designator for часы перед noon.
     * Параметры: значение = The ткст designator for часы перед noon.
     */
    export final проц определительДоПолудня(ткст значение)
    {
        проверьТолькоЧтен();
        amDesignator_ = значение;
    }

    /**
     * $(ANCHOR DateTimeFormat_pmDesignator)
     * $(I Свойство.) Retrieves the ткст designator for часы после noon.
     * Возвращает: The ткст designator for часы после noon. Например, "PM".
     */
    export final ткст определительПослеПолудня()
    {
        assert(pmDesignator_ !is пусто);
        return pmDesignator_;
    }
    /**
     * $(I Свойство.) Assigns the ткст designator for часы после noon.
     * Параметры: значение = The ткст designator for часы после noon.
     */
    export final проц определительПослеПолудня(ткст значение)
    {
        проверьТолькоЧтен();
        pmDesignator_ = значение;
    }

    /**
     * $(ANCHOR DateTimeFormat_shortDatePattern)
     * $(I Свойство.) Retrieves the форматируй образец for a крат дата значение.
     * Возвращает: The форматируй образец for a крат дата значение.
     */
    export final ткст краткийОбразецДаты()
    {
        assert(образецКраткойДаты_ !is пусто);
        return образецКраткойДаты_;
    }
    /**
     * $(I Свойство.) Assigns the форматируй образец for a крат дата _value.
     * Параметры: значение = The форматируй образец for a крат дата _value.
     */
    export final проц краткийОбразецДаты(ткст значение)
    {
        проверьТолькоЧтен();
        if (shortDatePatterns_ !is пусто)
            shortDatePatterns_[0] = значение;
        образецКраткойДаты_ = значение;
        generalLongTimePattern_ = пусто;
        общийКраткийФорматВремени_ = пусто;
    }

    /**
     * $(ANCHOR DateTimeFormat_shortTimePattern)
     * $(I Свойство.) Retrieves the форматируй образец for a крат время значение.
     * Возвращает: The форматируй образец for a крат время значение.
     */
    export final ткст краткийОбразецВремени()
    {
        if (образецКраткогоВремени_ is пусто)
            образецКраткогоВремени_ = данныеКультуры_.краткоеВремя;
        return образецКраткогоВремени_;
    }
    /**
     * $(I Свойство.) Assigns the форматируй образец for a крат время _value.
     * Параметры: значение = The форматируй образец for a крат время _value.
     */
    export final проц краткийОбразецВремени(ткст значение)
    {
        проверьТолькоЧтен();
        образецКраткогоВремени_ = значение;
        общийКраткийФорматВремени_ = пусто;
    }

    /**
     * $(ANCHOR DateTimeFormat_longDatePattern)
     * $(I Свойство.) Retrieves the форматируй образец for a дол дата значение.
     * Возвращает: The форматируй образец for a дол дата значение.
     */
    export final ткст длинныйОбразецДаты()
    {
        assert(образецДлиннойДаты_ !is пусто);
        return образецДлиннойДаты_;
    }
    /**
     * $(I Свойство.) Assigns the форматируй образец for a дол дата _value.
     * Параметры: значение = The форматируй образец for a дол дата _value.
     */
    export final проц длинныйОбразецДаты(ткст значение)
    {
        проверьТолькоЧтен();
        if (longDatePatterns_ !is пусто)
            longDatePatterns_[0] = значение;
        образецДлиннойДаты_ = значение;
        образецПолнойДатыВремени_ = пусто;
    }

    /**
     * $(ANCHOR DateTimeFormat_longTimePattern)
     * $(I Свойство.) Retrieves the форматируй образец for a дол время значение.
     * Возвращает: The форматируй образец for a дол время значение.
     */
    export final ткст длинныйОбразецВремени()
    {
        assert(образецДлинногоВремени_ !is пусто);
        return образецДлинногоВремени_;
    }
    /**
     * $(I Свойство.) Assigns the форматируй образец for a дол время _value.
     * Параметры: значение = The форматируй образец for a дол время _value.
     */
    export final проц длинныйОбразецВремени(ткст значение)
    {
        проверьТолькоЧтен();
        образецДлинногоВремени_ = значение;
        образецПолнойДатыВремени_ = пусто;
    }

    /**
     * $(ANCHOR DateTimeFormat_monthDayPattern)
     * $(I Свойство.) Retrieves the форматируй образец for a месяц и день значение.
     * Возвращает: The форматируй образец for a месяц и день значение.
     */
    export final ткст образецДняМесяца()
    {
        if (образецДняМесяца_ is пусто)
            образецДняМесяца_ = данныеКультуры_.деньМесяца;
        return образецДняМесяца_;
    }
    /**
     * $(I Свойство.) Assigns the форматируй образец for a месяц и день _value.
     * Параметры: значение = The форматируй образец for a месяц и день _value.
     */
    export final проц образецДняМесяца(ткст значение)
    {
        проверьТолькоЧтен();
        образецДняМесяца_ = значение;
    }

    /**
     * $(ANCHOR DateTimeFormat_yearMonthPattern)
     * $(I Свойство.) Retrieves the форматируй образец for a год и месяц значение.
     * Возвращает: The форматируй образец for a год и месяц значение.
     */
    export final ткст образецМесяцаГода()
    {
        assert(образецМесяцаГода_ !is пусто);
        return образецМесяцаГода_;
    }
    /**
     * $(I Свойство.) Assigns the форматируй образец for a год и месяц _value.
     * Параметры: значение = The форматируй образец for a год и месяц _value.
     */
    export final проц образецМесяцаГода(ткст значение)
    {
        проверьТолькоЧтен();
        образецМесяцаГода_ = значение;
    }

    /**
     * $(ANCHOR DateTimeFormat_abbreviatedDayNames)
     * $(I Свойство.) Retrieves a ткст Массив containing the abbreviated names of the дни of the week.
     * Возвращает: A ткст Массив containing the abbreviated names of the дни of the week. For $(LINK2 #DateTimeFormat_invariantFormat, инвариантныйФормат),
     *   this содержит "Sun", "Mon", "Tue", "Wed", "Thu", "Fri" и "Sat".
     */
    export final ткст[] сокращённыеИменаДней()
    {
        if (сокращИменаДней_ is пусто)
            сокращИменаДней_ = данныеКультуры_.сокращИменаДней;
        return сокращИменаДней_.dup;
    }
    /**
     * $(I Свойство.) Assigns a ткст Массив containing the abbreviated names of the дни of the week.
     * Параметры: значение = A ткст Массив containing the abbreviated names of the дни of the week.
     */
    export final проц сокращённыеИменаДней(ткст[] значение)
    {
        проверьТолькоЧтен();
        сокращИменаДней_ = значение;
    }

    /**
     * $(ANCHOR DateTimeFormat_dayNames)
     * $(I Свойство.) Retrieves a ткст Массив containing the full names of the дни of the week.
     * Возвращает: A ткст Массив containing the full names of the дни of the week. For $(LINK2 #DateTimeFormat_invariantFormat, инвариантныйФормат),
     *   this содержит "Воскресенье", "Понедельник", "Вторник", "Среда", "Четверг", "Пятница" и "Суббота".
     */
    export final ткст[] именаДней()
    {
        if (именаДней_ is пусто)
            именаДней_ = данныеКультуры_.именаДней;
        return именаДней_.dup;
    }
    /**
     * $(I Свойство.) Assigns a ткст Массив containing the full names of the дни of the week.
     * Параметры: значение = A ткст Массив containing the full names of the дни of the week.
     */
    export final проц именаДней(ткст[] значение)
    {
        проверьТолькоЧтен();
        именаДней_ = значение;
    }

    /**
     * $(ANCHOR DateTimeFormat_abbreviatedMonthNames)
     * $(I Свойство.) Retrieves a ткст Массив containing the abbreviated names of the месяцы.
     * Возвращает: A ткст Массив containing the abbreviated names of the месяцы. For $(LINK2 #DateTimeFormat_invariantFormat, инвариантныйФормат),
     *   this содержит "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" и "".
     */
    export final ткст[] сокращённыеИменаМесяцев()
    {
        if (сокращИменаМесяцев_ is пусто)
            сокращИменаМесяцев_ = данныеКультуры_.сокращИменаМесяцев;
        return сокращИменаМесяцев_.dup;
    }
    /**
     * $(I Свойство.) Assigns a ткст Массив containing the abbreviated names of the месяцы.
     * Параметры: значение = A ткст Массив containing the abbreviated names of the месяцы.
     */
    export final проц сокращённыеИменаМесяцев(ткст[] значение)
    {
        проверьТолькоЧтен();
        сокращИменаМесяцев_ = значение;
    }

    /**
     * $(ANCHOR DateTimeFormat_monthNames)
     * $(I Свойство.) Retrieves a ткст Массив containing the full names of the месяцы.
     * Возвращает: A ткст Массив containing the full names of the месяцы. For $(LINK2 #DateTimeFormat_invariantFormat, инвариантныйФормат),
     *   this содержит "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" и "".
     */
    export final ткст[] именаМесяцев()
    {
        if (именаМесяцев_ is пусто)
            именаМесяцев_ = данныеКультуры_.именаМесяцев;
        return именаМесяцев_.dup;
    }
    /**
     * $(I Свойство.) Assigns a ткст Массив containing the full names of the месяцы.
     * Параметры: значение = A ткст Массив containing the full names of the месяцы.
     */
    export final проц именаМесяцев(ткст[] значение)
    {
        проверьТолькоЧтен();
        именаМесяцев_ = значение;
    }

    /**
     * $(ANCHOR DateTimeFormat_ПолнаяДатаTimePattern)
     * $(I Свойство.) Retrieves the форматируй образец for a дол дата и a дол время значение.
     * Возвращает: The форматируй образец for a дол дата и a дол время значение.
     */
    export final ткст полныйОбразецДатыВремени()
    {
        if (образецПолнойДатыВремени_ is пусто)
            образецПолнойДатыВремени_ = длинныйОбразецДаты ~ " " ~ длинныйОбразецВремени;
        return образецПолнойДатыВремени_;
    }
    /**
     * $(I Свойство.) Assigns the форматируй образец for a дол дата и a дол время _value.
     * Параметры: значение = The форматируй образец for a дол дата и a дол время _value.
     */
    export final проц полныйОбразецДатыВремени(ткст значение)
    {
        проверьТолькоЧтен();
        образецПолнойДатыВремени_ = значение;
    }

    /**
     * $(ANCHOR DateTimeFormat_rfc1123Pattern)
     * $(I Свойство.) Retrieves the форматируй образец based on the IETF RFC 1123 specification, for a время значение.
     * Возвращает: The форматируй образец based on the IETF RFC 1123 specification, for a время значение.
     */
    export final ткст образецРФС1123()
    {
        return rfc1123Pattern_;
    }

    /**
     * $(ANCHOR DateTimeFormat_sortableDateTimePattern)
     * $(I Свойство.) Retrieves the форматируй образец for a sortable дата и время значение.
     * Возвращает: The форматируй образец for a sortable дата и время значение.
     */
    export final ткст сортируемыйОбразецДатыВремени()
    {
        return sortableDateTimePattern_;
    }

    /**
     * $(ANCHOR DateTimeFormat_universalSortableDateTimePattern)
     * $(I Свойство.) Retrieves the форматируй образец for a universal дата и время значение.
     * Возвращает: The форматируй образец for a universal дата и время значение.
     */
    export final ткст универсальныйСортируемыйОбразецДатыВремени()
    {
        return universalSortableDateTimePattern_;
    }

    package ткст общКраткийОбразецВремени()
    {
        if (общийКраткийФорматВремени_ is пусто)
            общийКраткийФорматВремени_ = краткийОбразецДаты ~ " " ~ краткийОбразецВремени;
        return общийКраткийФорматВремени_;
    }

    package ткст общДлинныйОбразецВремени()
    {
        if (generalLongTimePattern_ is пусто)
            generalLongTimePattern_ = краткийОбразецДаты ~ " " ~ длинныйОбразецВремени;
        return generalLongTimePattern_;
    }

    private проц проверьТолькоЧтен()
    {
        if (толькоДляЧтения_)
            ошибка("Экземпляр класса ФорматДатыВремени только для чтения.");
    }

    private проц инициализуй()
    {
        if (образецДлинногоВремени_ is пусто)
            образецДлинногоВремени_ = данныеКультуры_.длинноеВремя;
        if (образецКраткойДаты_ is пусто)
            образецКраткойДаты_ = данныеКультуры_.краткаяДата;
        if (образецДлиннойДаты_ is пусто)
            образецДлиннойДаты_ = данныеКультуры_.длиннаяДата;
        if (образецМесяцаГода_ is пусто)
            образецМесяцаГода_ = данныеКультуры_.месяцГода;
        if (amDesignator_ is пусто)
            amDesignator_ = данныеКультуры_.am;
        if (pmDesignator_ is пусто)
            pmDesignator_ = данныеКультуры_.pm;
        if (первыйДеньНедели_ is -1)
            первыйДеньНедели_ = данныеКультуры_.первыйДеньНед;
        if (правилоКалендарнойНедели_ == -1)
            правилоКалендарнойНедели_ = данныеКультуры_.первыйДеньГода;
    }

    private цел[] опциональныеКалендари()
    {
        if (дополнительныеКалендари_ is пусто)
            дополнительныеКалендари_ = данныеКультуры_.опциональныеКалендари;
        return дополнительныеКалендари_;
    }

}


