module text.locale.Collation;

private import text.locale.Core;

version (Windows)
private import нативныеМетоды = text.locale.Win32;
else version (Posix)
    private import нативныеМетоды = text.locale.Posix;

/**
Сравнивает строки, используя указанные правила регистра и сравнения культур.
*/
export class СтрокоСопоставитель
{

    private static СтрокоСопоставитель инвариант_;
    private static СтрокоСопоставитель инвариантИгнорРег_;
    private Культура культура_;
    private бул игнорРег_;

    static this()
    {
        инвариант_ = new СтрокоСопоставитель(Культура.инвариантнаяКультура, нет);
        инвариантИгнорРег_ = new СтрокоСопоставитель(Культура.инвариантнаяКультура, да);
    }

    /**
      Создаёт экземпляр, сравнивающий строки, используя правила заданной культуры.
      Параметры:
        культура = экземпляр Культура, правила которой используются для сравнения строк.
        игнорироватьРегистр = да при выполнении регистро-нечувствительных сравнений; нет - для регистро-чувствительных сравнений.
    */
    export this(Культура культура, бул игнорироватьРегистр)
    {
        культура_ = культура;
        игнорРег_ = игнорироватьРегистр;
    }

    /**
      Сравнивает две строки и возвращает порядок сортировки.
      Возвращает:
        -1 когда тктА меньше, чем тктБ; 0, если тктА равен тктБ; 1, если тктА больше, чем тктБ.
      Параметры:
        тктА = Ткст, сравниваемый с тктБ.
        тктБ = Ткст, сравниваемый с тктА.
    */
    export цел сравни(ткст тктА, ткст тктБ)
    {
        return нативныеМетоды.сравниСтроку(культура_.ид, тктА, 0, тктА.length, тктБ, 0, тктБ.length, игнорРег_);
    }

    /**
      Указывает, равны ли две строки.
      Возвращает:
        да, если тктА и тктБ равны; иначе, нет.
      Параметры:
        тктА = Ткст, сравниваемый с тктБ.
        тктБ = Ткст, сравниваемый с тктА.
    */
    export бул равно(ткст тктА, ткст тктБ)
    {
        return (сравни(тктА, тктБ) == 0);
    }

    /**
      $(I Свойство.) Получает экземпляр, выполняющий регистро-чувствительные сравнения, использующие правила текущей культуры.
      Возвращает:
        Новый экэземпляр СтрокоСопоставителя.
    */
    export static СтрокоСопоставитель текущаяКультура()
    {
        return new СтрокоСопоставитель(Культура.текущ, нет);
    }

    /**Получает экземпляр, выполняющий регистро-нечувствительные сравнения, использующие правила текущей культуры.
      Возвращает:
        Новый экэземпляр СтрокоСопоставителя.
    */
    export static СтрокоСопоставитель текущаяКультураИгнорРег()
    {
        return new СтрокоСопоставитель(Культура.текущ, да);
    }

    /**
      $(I Свойство.) Получает экземпляр, выполняющий регистро-чувствительные сравнения, использующие правила инвариантной культуры.
      Возвращает:
        Новый экэземпляр СтрокоСопоставителя.
    */
    export static СтрокоСопоставитель инвариантнаяКультура()
    {
        return инвариант_;
    }

    /**
      $(I Свойство.) Получает экземпляр, выполняющий регистро-нечувствительные сравнения, использующие правила инвариантной культуры.
      Возвращает:
        Новый экэземпляр СтрокоСопоставителя.
    */
    export static СтрокоСопоставитель инвариантнаяКультураИгнорРег()
    {
        return инвариантИгнорРег_;
    }

}

/**
  $(I Delegate.) Представляет метод, указывающий на текстовое сравнение.
  Примечания:
    У делегате есть сигнатура $(I цел delegate(ткст, ткст)).
 */
alias цел delegate(ткст, ткст) СравнениеСтрок;

/**
  Сортирует строки, согласно с правилами указанной культуры.
 */
export class СтрокоСортировщик
{

    private static СтрокоСортировщик инвариант_;
    private static СтрокоСортировщик инвариантИгнорРег_;
    private Культура культура_;
    private СравнениеСтрок сравнение_;

    static this()
    {
        инвариант_ = new СтрокоСортировщик(СтрокоСопоставитель.инвариантнаяКультура);
        инвариантИгнорРег_ = new СтрокоСортировщик(СтрокоСопоставитель.инвариантнаяКультураИгнорРег);
    }

    /**
      Создаёт экземпляр, используя указанный СтрокоСопоставитель.
      Параметры:
        сравниватель = СтрокоСопоставитель, используемый при сравнении строк. $(I Optional.)
    */
    export this(СтрокоСопоставитель сравниватель = пусто)
    {
        if (сравниватель is пусто)
            сравниватель = СтрокоСопоставитель.текущаяКультура;
        сравнение_ = &сравниватель.сравни;
    }

    /**
      Создаёт экземпляр, использующий укаазнного делегата.
      Параметры:
        сравнение = Делегат, исползуемый при сравнении строк.
      Примечания:
        Параметр сравнения должен иметь такую же сигнатуру, как СравнениеСтрок.
    */
    export this(СравнениеСтрок сравнение)
    {
        сравнение_ = сравнение;
    }

    /**
      Сортирует все элементы в Массиве.
      Параметры:
        Массив = Сортируемый массив строк.
    */
    export проц сортируй(ref ткст[] Массив)
    {
        сортируй(Массив, 0, Массив.length);
    }

    /**
      Сортирует диапазон элементов в массиве.
      Параметры:
        Массив = Сортируемый массив строк.
        индекс = Стартовый индекс диапазона.
        счёт = Число элементов в диапазоне.
    */
    export проц сортируй(ref ткст[] Массив, цел индекс, цел счёт)
    {

        проц qsort(цел лево, цел право)
        {
            do
            {
                цел i = лево, j = право;
                ткст pivot = Массив[лево + ((право - лево) >> 1)];

                do
                {
                    while (сравнение_(Массив[i], pivot) < 0)
                        i++;
                    while (сравнение_(pivot, Массив[j]) < 0)
                        j--;

                    if (i > j)
                        break;
                    else if (i < j)
                    {
                        ткст temp = Массив[i];
                        Массив[i] = Массив[j];
                        Массив[j] = temp;
                    }

                    i++;
                    j--;
                }
                while (i <= j);

                if (j - лево <= право - i)
                {
                    if (лево < j)
                        qsort(лево, j);
                    лево = i;
                }
                else
                {
                    if (i < право)
                        qsort(i, право);
                    право = j;
                }
            }
            while (лево < право);
        }

        qsort(индекс, индекс + (счёт - 1));
    }

    /**
      $(I Свойство.) Получает экземпляр, выполняющий регистро-чувствительную сортировку, используя правила текущей культуры.
      Возвращает: Экземпляр СтрокоСортировщика.
    */
    export static СтрокоСортировщик текущаяКультура()
    {
        return new СтрокоСортировщик(СтрокоСопоставитель.текущаяКультура);
    }

    /**
      $(I Свойство.) Получает экземпляр, выполняющий регистро-нечувствительную сортировку, используя правила текущей культуры.
      Возвращает: Экземпляр СтрокоСортировщика.
    */
    export static СтрокоСортировщик текущаяКультураИгнорРег()
    {
        return new СтрокоСортировщик(СтрокоСопоставитель.текущаяКультураИгнорРег);
    }

    /**
      $(I Свойство.) Получает экземпляр, выполняющий регистро-чувствительную сортировку, используя правила инвариантной культуры.
      Возвращает: Экземпляр СтрокоСортировщика.
    */
    export static СтрокоСортировщик инвариантнаяКультура()
    {
        return инвариант_;
    }

    /**
      $(I Свойство.) Получает экземпляр, выполняющий регистро-нечувствительную сортировку, используя правила инвариантной культуры.
      Возвращает: Экземпляр СтрокоСортировщика.
    */
    export static СтрокоСортировщик инвариантнаяКультураИгнорРег()
    {
        return инвариантИгнорРег_;
    }

}
