module text.locale.Parse;

private import  time.WallClock;
private import  exception;
private import  text.locale.Core;
private import  time.chrono.Calendar;

struct РезультатРазбораДатыВремени {

  цел год = -1;
  цел месяц = -1;
  цел день = -1;
  цел час;
  цел минута;
  цел секунда;
  дво дробь;
  цел меткаВремени;
  Календарь календарь;
  ИнтервалВремени смещениеЧП;
  Время разобраннаяДата;

}

export Время разборВремени(ткст s, ФорматДатыВремени фдв) {
  РезультатРазбораДатыВремени результат;
  if (!пробуйРазборТочноНесколько(s, фдв.дайВсеОбразцыДатыВремени(), фдв, результат))
    throw new ИсклНелегальногоАргумента("Предложенная строка не являлась временем.");
  return результат.разобраннаяДата;
}

export Время разборВремениТочно(ткст s, ткст форматируй, ФорматДатыВремени фдв) {
  РезультатРазбораДатыВремени результат;
  if (!пробуйРазборТочно(s, форматируй, фдв, результат))
    throw new ИсклНелегальногоАргумента("Предложенная строка не являлась временем.");
  return результат.разобраннаяДата;
}

export бул пробуйРазборВремени(ткст s, ФорматДатыВремени фдв, out Время результат) {
  результат = Время.мин;
  РезультатРазбораДатыВремени записьРезультата;
  if (!пробуйРазборТочноНесколько(s, фдв.дайВсеОбразцыДатыВремени(), фдв, записьРезультата))
    return нет;
  результат = записьРезультата.разобраннаяДата;
  return да;
}

export бул пробуйРазборВремениТочно(ткст s, ткст форматируй, ФорматДатыВремени фдв, out Время результат) {
  результат = Время.мин;
  РезультатРазбораДатыВремени записьРезультата;
  if (!пробуйРазборТочно(s, форматируй, фдв, записьРезультата))
    return нет;
  результат = записьРезультата.разобраннаяДата;
  return да;
}

private бул пробуйРазборТочноНесколько(ткст s, ткст[] форматы, ФорматДатыВремени фдв, ref РезультатРазбораДатыВремени результат) {
  foreach (ткст форматируй; форматы) {
    if (пробуйРазборТочно(s, форматируй, фдв, результат))
      return да;
  }
  return нет;
}

private бул пробуйРазборТочно(ткст s, ткст образец, ФорматДатыВремени фдв, ref РезультатРазбораДатыВремени результат) {

  бул парсируй() {

    цел разборЦифр(ткст s, ref цел поз, цел макс) {
      цел результат = s[поз++] - '0';
      while (макс > 1 && поз < s.length && s[поз] >= '0' && s[поз] <= '9') {
        результат = результат * 10 + s[поз++] - '0';
        --макс;
      }
      return результат;
    }

    бул разбериОдин(ткст s, ref цел поз, ткст значение) {
      if (s[поз .. поз + значение.length] != значение)
        return нет;
      поз += значение.length;
      return да;
    }

    цел разбериНесколько(ткст s, ref цел поз, ткст[] значения, ...) {
      цел результат = -1, макс;
      foreach (цел i, ткст значение; значения) {
        if (значение.length == 0 || s.length - поз < значение.length)
          continue;

        if (s[поз .. поз + значение.length] == значение) {
          if (результат == 0 || значение.length > макс) {
            результат = i + 1;
            макс = значение.length;
          }
        }
      }
      поз += макс;
      return результат;
    }

    ИнтервалВремени разборСмещенияЧП(ткст s, ref цел поз) {
      бул знак;
      if (поз < s.length) {
        if (s[поз] == '-') {
          знак = да;
          поз++;
        }
        else if (s[поз] == '+')
          поз++;
      }
      цел час = разборЦифр(s, поз, 2);
      цел минута;
      if (поз < s.length && s[поз] == ':') {
        поз++;
        минута = разборЦифр(s, поз, 2);
      }
      ИнтервалВремени результат = ИнтервалВремени.изЧасов(час) +  ИнтервалВремени.изМин(минута);
      if (знак)
        результат = -результат;
      return результат;
    }
      
    ткст stringOf(сим c, цел счёт = 1) {
      ткст s = new сим[счёт];
      s[0 .. счёт] = c;
      return s;
    }

    результат.календарь = фдв.календарь;
    результат.год = результат.месяц = результат.день = -1;
    результат.час = результат.минута = результат.секунда = 0;
    результат.дробь = 0.0;

    цел поз, i, счёт;
    сим c;

    while (поз < образец.length && i < s.length) {
      c = образец[поз++];

      if (c == ' ') {
        i++;
        while (i < s.length && s[i] == ' ')
          i++;
        if (i >= s.length)
          break;
        continue;
      }

      счёт = 1;

      switch (c) {
        case 'd': case 'm': case 'M': case 'y':
        case 'h': case 'H': case 's':
        case 't': case 'z':
          while (поз < образец.length && образец[поз] == c) {
            поз++;
            счёт++;
          }
          break;
        case ':':
          if (!разбериОдин(s, i, фдв.разделительВремени))
            return нет;
          continue;
        case '/':
          if (!разбериОдин(s, i, фдв.разделительДаты))
            return нет;
          continue;
        case '\\':
          if (поз < образец.length) {
            c = образец[поз++];
            if (s[i++] != c)
              return нет;
          }
          else
            return нет;
          continue;
        case '\'':
          while (поз < образец.length) {
            c = образец[поз++];
            if (c == '\'')
              break;
            if (s[i++] != c)
              return нет;
          }
          continue;
        default:
          if (s[i++] != c)
            return нет;
          continue;
      }

      switch (c) {
        case 'd': // день
          if (счёт == 1 || счёт == 2)
            результат.день = разборЦифр(s, i, 2);
          else if (счёт == 3)
            результат.день = разбериНесколько(s, i, cast(ткст[]) фдв.сокращённыеИменаДней);
          else
            результат.день = разбериНесколько(s, i, cast(ткст[]) фдв.именаДней);
          if (результат.день == -1)
            return нет;
          break;
        case 'M': // месяц
          if (счёт == 1 || счёт == 2)
            результат.месяц = разборЦифр(s, i, 2);
          else if (счёт == 3)
            результат.месяц = разбериНесколько(s, i, фдв.сокращённыеИменаМесяцев);
          else
            результат.месяц = разбериНесколько(s, i, фдв.именаМесяцев);
          if (результат.месяц == -1)
            return нет;
          break;
        case 'y': // год
          if (счёт == 1 || счёт == 2)
            результат.год = разборЦифр(s, i, 2);
          else
            результат.год = разборЦифр(s, i, 4);
          if (результат.год == -1)
            return нет;
          break;
        case 'h': // 12-час clock
        case 'H': // 24-час clock
          результат.час = разборЦифр(s, i, 2);
          break;
        case 'm': // минута
          результат.минута = разборЦифр(s, i, 2);
          break;
        case 's': // секунда
          результат.секунда = разборЦифр(s, i, 2);
          break;
        case 't': // время метка
          if (счёт == 1)
            результат.меткаВремени = разбериНесколько(s, i, cast(ткст[]) stringOf(фдв.определительДоПолудня[0]), cast(ткст[]) stringOf(фдв.определительПослеПолудня[0]));
          else
            результат.меткаВремени = разбериНесколько(s, i, cast(ткст[]) фдв.определительДоПолудня, cast(ткст[]) фдв.определительПослеПолудня);
          break;
        case 'z':
          результат.смещениеЧП = разборСмещенияЧП(s, i);
          break;
        default:
          break;
      }
    }

    if (поз < образец.length || i < s.length)
      return нет;

    if (результат.меткаВремени == 1) { // am
      if (результат.час == 12)
        результат.час = 0;
    }
    else if (результат.меткаВремени == 2) { // pm
      if (результат.час < 12)
        результат.час += 12;
    }

    // If the ввод ткст dопрn't specify a дата часть, try в_ return something meaningful.
    if (результат.год == -1 || результат.месяц == -1 || результат.день == -1) {
      Время сейчас = Куранты.сейчас;
      if (результат.месяц == -1 && результат.день == -1) {
        if (результат.год == -1) {
          результат.год = результат.календарь.дайГод(сейчас);
          результат.месяц = результат.календарь.дайМесяц(сейчас);
          результат.день = результат.календарь.дайДеньМесяца(сейчас);
        }
        else
          результат.месяц = результат.день = 1;
      }
      else {
        if (результат.год == -1)
          результат.год = результат.календарь.дайГод(сейчас);
        if (результат.месяц == -1)
          результат.месяц = 1;
        if (результат.день == -1)
          результат.день = 1;
      }
    }
    return да;
  }

  if (парсируй()) {
    результат.разобраннаяДата = результат.календарь.воВремя(результат.год, результат.месяц, результат.день, результат.час, результат.минута, результат.секунда, 0);
    return да;
  }
  return нет;
}
