module net.SocketConduit;

public  import  io.device.Conduit;

private import  net.Socket;

/*******************************************************************************

        A wrapper around the bare Сокет в_ implement the ИПровод abstraction
        и добавь сокет-specific functionality.

        СокетПровод данные-перемести is typically performed in conjunction with
        an ИБуфер, but can happily be handled directly using проц Массив where
        preferred

*******************************************************************************/

export class СокетПровод : Провод, ИВыбираемый
{
    private значврем                 tv;
    private НаборСокетов               ss;
    package Сокет                  сокет_;
    private бул                    таймаут;

    // фрилист support
    private СокетПровод           следщ;
    private бул                    fromList;
    private static СокетПровод    фрилист;

    /***********************************************************************

            Создаёт Потокing Internet Сокет

    ***********************************************************************/

    export this ()
    {
        this (ПСемействоАдресов.ИНЕТ, ПТипСок.Поток, ППротокол.ПУТ);
    }

    /***********************************************************************

            Созд an Internet Сокет with the предоставленный characteristics

    ***********************************************************************/

    export this (ПСемействоАдресов семейство, ПТипСок тип, ППротокол протокол)
    {
        this (семейство, тип, протокол, да);
    }

    /***********************************************************************

            Созд an Internet Сокет. See метод размести() below

    ***********************************************************************/

    private this (ПСемействоАдресов семейство, ПТипСок тип, ППротокол протокол, бул создай)
    {
        сокет_ = new Сокет (семейство, тип, протокол, создай);
    }

    /***********************************************************************

            Возвращает имя of this устройство

    ***********************************************************************/

    export override ткст вТкст()
    {
        return сокет.вТкст;
    }

    /***********************************************************************

            Возвращает сокет wrapper

    ***********************************************************************/

    export Сокет сокет ()
    {
        return сокет_;
    }

    /***********************************************************************

            Возвращает preferred размер for buffering провод I/O

    ***********************************************************************/

    export override т_мера размерБуфера ()
    {
        return 1024 * 8;
    }

    /***********************************************************************

            Models a укз-oriented устройство.

            TODO: figure out как в_ avoопр exposing this in the general
            case

    ***********************************************************************/

    export Дескр фукз ()
    {
        return cast(Дескр) сокет_.фукз;
    }

    /***********************************************************************

            Устанавливает читай таймаут в_ the specified интервал. Устанавливает
            значение of zero в_ disable таймаут support.

            The интервал is in units of сек, where 0.500 would
            represent 500 milliseconds. Use ИнтервалВремени.интервал в_
            преобразуй из_ a ИнтервалВремени экземпляр.

    ***********************************************************************/

    export СокетПровод установиТаймаут (плав таймаут)
    {
        tv.сек = cast(бцел) таймаут;
        tv.микросек = cast(бцел) ((таймаут - tv.сек) * 1_000_000);
        return this;
    }

    /***********************************************************************

            Завершилась ли последняя операция таймаутом?

    ***********************************************************************/

    export бул былТаймаут ()
    {
        return таймаут;
    }

    /***********************************************************************

            Is this сокет still alive?

    ***********************************************************************/

    export override бул жив_ли ()
    {
        return сокет_.жив_ли;
    }

    /***********************************************************************

            Connect в_ the предоставленный endpoint

    ***********************************************************************/

    export СокетПровод подключись (Адрес адр)
    {
        сокет_.подключись (адр);
        return this;
    }

    /***********************************************************************

            Bind the сокет. This is typically использован в_ конфигурируй a
            listening сокет (such как сервер or multicast сокет).
            The адрес given should describe a local адаптер, or
            specify the порт alone (АДР_ЛЮБОЙ) в_ have the OS присвой
            a local адаптер адрес.

    ***********************************************************************/

    export СокетПровод вяжи (Адрес адрес)
    {
        сокет_.вяжи (адрес);
        return this;
    }

    /***********************************************************************

            Inform другой конец of a подключен сокет that we're no longer
            available. In general, this should be invoked перед закрой()
            is invoked

            The глуши function shuts down the connection of the сокет:

                -   stops receiving данные для этого сокет. If further данные
                    arrives, it is rejected.

                -   stops trying в_ transmit данные из_ this сокет. Also
                    discards any данные waiting в_ be sent. Стоп looking for
                    acknowledgement of данные already sent; don't retransmit
                    if any данные is lost.

    ***********************************************************************/

    export СокетПровод глуши ()
    {
        сокет_.глуши (ПЭкстрЗакрытиеСокета.Всё);
        return this;
    }

    /***********************************************************************

            Release this СокетПровод

            Note that one should всегда disconnect a СокетПровод
            under нормаль conditions, и generally invoke глуши
            on все подключен СОКЕТs передhand

    ***********************************************************************/

    export override проц открепи ()
    {
        сокет_.открепи;

        // вымести если это came из_ the free-список,
        // иначе just жди for the СМ в_ укз it
        if (fromList)
            вымести (this);
    }

    /***********************************************************************

             Чит контент из_ the сокет. Note that the operation
             may таймаут if метод установиТаймаут() имеется been invoked with
             a non-zero значение.

             Возвращает the число of байты читай из_ the сокет, or
             ИПровод.Кф where there's no ещё контент available.

             If the underlying сокет is a блокируется сокет, Кф will
             only be returned once the сокет имеется закрыт.

             Note that a таймаут is equivalent в_ Кф. Isolating
             a таймаут condition can be achieved via былТаймаут()

             Note also that a zero return значение is not legitimate;
             such a значение indicates Кф

     ***********************************************************************/

    export override т_мера читай (проц[] приёмн)
    {
        return читай (приёмн, (проц[] приёмн)
        {
            return cast(т_мера) сокет_.принять(приёмн);
        });
    }

    /***********************************************************************

            Callback routine в_ пиши the предоставленный контент в_ the
            сокет. This will stall until the сокет responds in
            some manner. Возвращает the число of байты sent в_ the
            вывод, либо ИПровод.Кф if the сокет cannot пиши.

    ***********************************************************************/

    export override т_мера пиши (проц[] ист)
    {
        цел счёт = сокет_.шли (ист);
        if (счёт <= 0)
            счёт = Кф;
        return счёт;
    }

    /***********************************************************************

            Internal routine в_ укз сокет читай under a таймаут.
            Note that this is synchronized, in order в_ serialize
            сокет доступ

    ***********************************************************************/

    package final synchronized т_мера читай (проц[] приёмн, т_мера delegate(проц[]) дг)
    {
        // сбрось таймаут; we assume there's no нить contention
        таймаут = нет;

        // dопр пользователь disable таймаут проверьs?
        if (tv.микросек | tv.сек)
        {
            // nope: ensure we have a НаборСокетов
            if (ss is пусто)
                ss = new НаборСокетов (1);

            ss.сбрось ();
            ss.добавь (сокет_);

            // жди until данные is available, либо a таймаут occurs
            auto копируй = tv;
            version (linux)
            {
                // disable блокируется в_ deal with potential linux bug
                auto b = сокет.блокируется;
                if (b)
                    сокет.блокируется (нет);
                цел i = сокет_.выбери (ss, пусто, пусто, &копируй);
                if (b)
                    сокет.блокируется (да);
            }
            else
                цел i = сокет_.выбери (ss, пусто, пусто, &копируй);
            if (i <= 0)
            {
                if (i is 0)
                    таймаут = да;
                return Кф;
            }
        }

        // invoke the actual читай op
        auto счёт = дг (приёмн);
        if (счёт <= 0)
            счёт = Кф;
        return счёт;
    }

    /***********************************************************************

            Размести a СокетПровод из_ a список rather than creating
            a new one. Note that the сокет itself is not opened; only
            the wrappers. This is because the сокет is often назначено
            directly via прими()

    ***********************************************************************/

    package static synchronized СокетПровод размести ()
    {
        СокетПровод s;

        if (фрилист)
        {
            s = фрилист;
            фрилист = s.следщ;
        }
        else
        {
            s = new СокетПровод (ПСемействоАдресов.ИНЕТ, ПТипСок.Поток, ППротокол.ПУТ, нет);
            s.fromList = да;
        }
        return s;
    }

    /***********************************************************************

            Return this СокетПровод в_ the free-список

    ***********************************************************************/

    private static synchronized проц вымести (СокетПровод s)
    {
        s.следщ = фрилист;
        фрилист = s;
    }
}


